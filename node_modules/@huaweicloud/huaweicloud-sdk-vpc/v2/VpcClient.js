"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredError = exports.ParamCreater = exports.VpcClient = void 0;
var ClientBuilder_1 = require("@huaweicloud/huaweicloud-sdk-core/ClientBuilder");
var AcceptVpcPeeringRequest_1 = require("./model/AcceptVpcPeeringRequest");
var AssociateRouteTableRequest_1 = require("./model/AssociateRouteTableRequest");
var BatchCreateSubnetTagsRequest_1 = require("./model/BatchCreateSubnetTagsRequest");
var BatchCreateVpcTagsRequest_1 = require("./model/BatchCreateVpcTagsRequest");
var BatchDeleteSubnetTagsRequest_1 = require("./model/BatchDeleteSubnetTagsRequest");
var BatchDeleteVpcTagsRequest_1 = require("./model/BatchDeleteVpcTagsRequest");
var CreateFlowLogRequest_1 = require("./model/CreateFlowLogRequest");
var CreatePortRequest_1 = require("./model/CreatePortRequest");
var CreatePrivateipRequest_1 = require("./model/CreatePrivateipRequest");
var CreateRouteTableRequest_1 = require("./model/CreateRouteTableRequest");
var CreateSecurityGroupRequest_1 = require("./model/CreateSecurityGroupRequest");
var CreateSecurityGroupRuleRequest_1 = require("./model/CreateSecurityGroupRuleRequest");
var CreateSubnetRequest_1 = require("./model/CreateSubnetRequest");
var CreateSubnetTagRequest_1 = require("./model/CreateSubnetTagRequest");
var CreateVpcPeeringRequest_1 = require("./model/CreateVpcPeeringRequest");
var CreateVpcRequest_1 = require("./model/CreateVpcRequest");
var CreateVpcResourceTagRequest_1 = require("./model/CreateVpcResourceTagRequest");
var CreateVpcRouteRequest_1 = require("./model/CreateVpcRouteRequest");
var DeleteFlowLogRequest_1 = require("./model/DeleteFlowLogRequest");
var DeletePortRequest_1 = require("./model/DeletePortRequest");
var DeletePrivateipRequest_1 = require("./model/DeletePrivateipRequest");
var DeleteRouteTableRequest_1 = require("./model/DeleteRouteTableRequest");
var DeleteSecurityGroupRequest_1 = require("./model/DeleteSecurityGroupRequest");
var DeleteSecurityGroupRuleRequest_1 = require("./model/DeleteSecurityGroupRuleRequest");
var DeleteSubnetRequest_1 = require("./model/DeleteSubnetRequest");
var DeleteSubnetTagRequest_1 = require("./model/DeleteSubnetTagRequest");
var DeleteVpcPeeringRequest_1 = require("./model/DeleteVpcPeeringRequest");
var DeleteVpcRequest_1 = require("./model/DeleteVpcRequest");
var DeleteVpcRouteRequest_1 = require("./model/DeleteVpcRouteRequest");
var DeleteVpcTagRequest_1 = require("./model/DeleteVpcTagRequest");
var DisassociateRouteTableRequest_1 = require("./model/DisassociateRouteTableRequest");
var ListFlowLogsRequest_1 = require("./model/ListFlowLogsRequest");
var ListPortsRequest_1 = require("./model/ListPortsRequest");
var ListPrivateipsRequest_1 = require("./model/ListPrivateipsRequest");
var ListRouteTablesRequest_1 = require("./model/ListRouteTablesRequest");
var ListSecurityGroupRulesRequest_1 = require("./model/ListSecurityGroupRulesRequest");
var ListSecurityGroupsRequest_1 = require("./model/ListSecurityGroupsRequest");
var ListSubnetsByTagsRequest_1 = require("./model/ListSubnetsByTagsRequest");
var ListSubnetsRequest_1 = require("./model/ListSubnetsRequest");
var ListVpcPeeringsRequest_1 = require("./model/ListVpcPeeringsRequest");
var ListVpcRoutesRequest_1 = require("./model/ListVpcRoutesRequest");
var ListVpcsByTagsRequest_1 = require("./model/ListVpcsByTagsRequest");
var ListVpcsRequest_1 = require("./model/ListVpcsRequest");
var NeutronAddFirewallRuleRequest_1 = require("./model/NeutronAddFirewallRuleRequest");
var NeutronCreateFirewallGroupRequest_1 = require("./model/NeutronCreateFirewallGroupRequest");
var NeutronCreateFirewallPolicyRequest_1 = require("./model/NeutronCreateFirewallPolicyRequest");
var NeutronCreateFirewallRuleRequest_1 = require("./model/NeutronCreateFirewallRuleRequest");
var NeutronCreateSecurityGroupRequest_1 = require("./model/NeutronCreateSecurityGroupRequest");
var NeutronCreateSecurityGroupRuleRequest_1 = require("./model/NeutronCreateSecurityGroupRuleRequest");
var NeutronDeleteFirewallGroupRequest_1 = require("./model/NeutronDeleteFirewallGroupRequest");
var NeutronDeleteFirewallPolicyRequest_1 = require("./model/NeutronDeleteFirewallPolicyRequest");
var NeutronDeleteFirewallRuleRequest_1 = require("./model/NeutronDeleteFirewallRuleRequest");
var NeutronDeleteSecurityGroupRequest_1 = require("./model/NeutronDeleteSecurityGroupRequest");
var NeutronDeleteSecurityGroupRuleRequest_1 = require("./model/NeutronDeleteSecurityGroupRuleRequest");
var NeutronListFirewallGroupsRequest_1 = require("./model/NeutronListFirewallGroupsRequest");
var NeutronListFirewallPoliciesRequest_1 = require("./model/NeutronListFirewallPoliciesRequest");
var NeutronListFirewallRulesRequest_1 = require("./model/NeutronListFirewallRulesRequest");
var NeutronListSecurityGroupRulesRequest_1 = require("./model/NeutronListSecurityGroupRulesRequest");
var NeutronListSecurityGroupsRequest_1 = require("./model/NeutronListSecurityGroupsRequest");
var NeutronRemoveFirewallRuleRequest_1 = require("./model/NeutronRemoveFirewallRuleRequest");
var NeutronShowFirewallGroupRequest_1 = require("./model/NeutronShowFirewallGroupRequest");
var NeutronShowFirewallPolicyRequest_1 = require("./model/NeutronShowFirewallPolicyRequest");
var NeutronShowFirewallRuleRequest_1 = require("./model/NeutronShowFirewallRuleRequest");
var NeutronShowSecurityGroupRequest_1 = require("./model/NeutronShowSecurityGroupRequest");
var NeutronShowSecurityGroupRuleRequest_1 = require("./model/NeutronShowSecurityGroupRuleRequest");
var NeutronUpdateFirewallGroupRequest_1 = require("./model/NeutronUpdateFirewallGroupRequest");
var NeutronUpdateFirewallPolicyRequest_1 = require("./model/NeutronUpdateFirewallPolicyRequest");
var NeutronUpdateFirewallRuleRequest_1 = require("./model/NeutronUpdateFirewallRuleRequest");
var NeutronUpdateSecurityGroupRequest_1 = require("./model/NeutronUpdateSecurityGroupRequest");
var RejectVpcPeeringRequest_1 = require("./model/RejectVpcPeeringRequest");
var ShowFlowLogRequest_1 = require("./model/ShowFlowLogRequest");
var ShowNetworkIpAvailabilitiesRequest_1 = require("./model/ShowNetworkIpAvailabilitiesRequest");
var ShowPortRequest_1 = require("./model/ShowPortRequest");
var ShowPrivateipRequest_1 = require("./model/ShowPrivateipRequest");
var ShowQuotaRequest_1 = require("./model/ShowQuotaRequest");
var ShowRouteTableRequest_1 = require("./model/ShowRouteTableRequest");
var ShowSecurityGroupRequest_1 = require("./model/ShowSecurityGroupRequest");
var ShowSecurityGroupRuleRequest_1 = require("./model/ShowSecurityGroupRuleRequest");
var ShowSubnetRequest_1 = require("./model/ShowSubnetRequest");
var ShowSubnetTagsRequest_1 = require("./model/ShowSubnetTagsRequest");
var ShowVpcPeeringRequest_1 = require("./model/ShowVpcPeeringRequest");
var ShowVpcRequest_1 = require("./model/ShowVpcRequest");
var ShowVpcRouteRequest_1 = require("./model/ShowVpcRouteRequest");
var ShowVpcTagsRequest_1 = require("./model/ShowVpcTagsRequest");
var UpdateFlowLogRequest_1 = require("./model/UpdateFlowLogRequest");
var UpdatePortRequest_1 = require("./model/UpdatePortRequest");
var UpdateRouteTableRequest_1 = require("./model/UpdateRouteTableRequest");
var UpdateSubnetRequest_1 = require("./model/UpdateSubnetRequest");
var UpdateVpcPeeringRequest_1 = require("./model/UpdateVpcPeeringRequest");
var UpdateVpcRequest_1 = require("./model/UpdateVpcRequest");
var VpcClient = /** @class */ (function () {
    function VpcClient(client) {
        this.hcClient = client;
    }
    VpcClient.newBuilder = function () {
        return new ClientBuilder_1.ClientBuilder(newClient);
    };
    VpcClient.prototype.getPath = function () {
        return __dirname;
    };
    /**
     * 租户A名下的VPC申请和租户B的VPC建立对等连接，需要等待租户B接受该请求。此接口用于租户接受其他租户发起的对等连接请求。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 接受对等连接请求
     * @param {string} peeringId 对等连接ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.acceptVpcPeering = function (acceptVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().acceptVpcPeering(acceptVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 路由表关联子网。子网关联路由表A后，再关联B，不需要先跟路由表A解关联再关联路由表B
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 子网关联路由表
     * @param {string} routetableId 路由表ID
     * @param {RoutetableAssociateReqbody} routetableAssociate 关联路由表与子网请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.associateRouteTable = function (associateRouteTableRequest) {
        var options = (0, exports.ParamCreater)().associateRouteTable(associateRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为指定的子网资源实例批量添加标签。
     * 此接口为幂等接口：创建时如果请求体中存在重复key则报错。创建时，不允许设置重复key数据，如果数据库已存在该key，就覆盖value的值。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量创建子网资源标签
     * @param {string} subnetId 子网ID
     * @param {BatchCreateSubnetTagsRequestBody} batchCreateSubnetTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.batchCreateSubnetTags = function (batchCreateSubnetTagsRequest) {
        var options = (0, exports.ParamCreater)().batchCreateSubnetTags(batchCreateSubnetTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为指定的子网资源实例批量删除标签
     * 此接口为幂等接口：删除时，如果删除的标签不存在，默认处理成功；删除时不对标签字符集范围做校验。删除时tags结构体不能缺失，key不能为空，或者空字符串。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量删除子网资源标签
     * @param {string} subnetId 子网ID
     * @param {BatchDeleteSubnetTagsRequestBody} batchDeleteSubnetTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.batchDeleteSubnetTags = function (batchDeleteSubnetTagsRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteSubnetTags(batchDeleteSubnetTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建流日志。
     * 流日志功能可以记录虚拟私有云中的流量信息，帮助您检查和优化安全组和网络ACL防火墙控制规则、监控网络流量、进行网络攻击分析等。
     * VPC流日志功能需要与云日志服务LTS结合使用，请先在云日志服务中创建日志组和日志主题，然后再创建VPC流日志。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建流日志
     * @param {CreateFlowLogReqBody} flowLog 创建流日志的请求体，参见CreateFlowLogReq对象。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createFlowLog = function (createFlowLogRequest) {
        var options = (0, exports.ParamCreater)().createFlowLog(createFlowLogRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建端口。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建端口
     * @param {CreatePortRequestBody} port 创建端口对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createPort = function (createPortRequest) {
        var options = (0, exports.ParamCreater)().createPort(createPortRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建路由表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建路由表
     * @param {CreateRoutetableReqBody} routetable 创建路由表对象，参见CreateRouteTableReq对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createRouteTable = function (createRouteTableRequest) {
        var options = (0, exports.ParamCreater)().createRouteTable(createRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建安全组。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建安全组
     * @param {CreateSecurityGroupRequestBody} securityGroup 创建安全组对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createSecurityGroup = function (createSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().createSecurityGroup(createSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建安全组规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建安全组规则
     * @param {CreateSecurityGroupRuleRequestBody} securityGroupRule 创建安全组规则对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createSecurityGroupRule = function (createSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().createSecurityGroupRule(createSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建子网。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建子网
     * @param {CreateSubnetRequestBody} subnet 创建子网对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createSubnet = function (createSubnetRequest) {
        var options = (0, exports.ParamCreater)().createSubnet(createSubnetRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 给指定子网资源实例增加标签信息。
     * 此接口为幂等接口：创建时，如果创建的标签已经存在（key相同），则覆盖。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建子网资源标签
     * @param {string} subnetId 子网ID
     * @param {CreateSubnetTagRequestBody} createSubnetTagRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createSubnetTag = function (createSubnetTagRequest) {
        var options = (0, exports.ParamCreater)().createSubnetTag(createSubnetTagRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建对等连接。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建对等连接
     * @param {CreateVpcPeeringRequestBody} peering peering对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createVpcPeering = function (createVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().createVpcPeering(createVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除流日志
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除流日志
     * @param {string} flowlogId 流日志资源唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteFlowLog = function (deleteFlowLogRequest) {
        var options = (0, exports.ParamCreater)().deleteFlowLog(deleteFlowLogRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除端口。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除端口
     * @param {string} portId 端口ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deletePort = function (deletePortRequest) {
        var options = (0, exports.ParamCreater)().deletePort(deletePortRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除路由表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除路由表
     * @param {string} routetableId 路由表ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteRouteTable = function (deleteRouteTableRequest) {
        var options = (0, exports.ParamCreater)().deleteRouteTable(deleteRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除安全组。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除安全组
     * @param {string} securityGroupId 安全组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteSecurityGroup = function (deleteSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().deleteSecurityGroup(deleteSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除安全组规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除安全组规则
     * @param {string} securityGroupRuleId 安全组规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteSecurityGroupRule = function (deleteSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().deleteSecurityGroupRule(deleteSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除子网
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除子网
     * @param {string} vpcId 子网对应的vpc_id
     * @param {string} subnetId 子网ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteSubnet = function (deleteSubnetRequest) {
        var options = (0, exports.ParamCreater)().deleteSubnet(deleteSubnetRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定子网资源实例的标签信息。
     * 该接口为幂等接口：删除的key不存在报404，Key不能为空或者空字符串
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除子网资源标签
     * @param {string} subnetId 子网ID
     * @param {string} key 功能说明：键值
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteSubnetTag = function (deleteSubnetTagRequest) {
        var options = (0, exports.ParamCreater)().deleteSubnetTag(deleteSubnetTagRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除对等连接。
     * 可以在在本端或对端任何一端删除对等连接。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除对等连接
     * @param {string} peeringId 对等连接ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteVpcPeering = function (deleteVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().deleteVpcPeering(deleteVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 子网解关联路由表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 子网解关联路由表
     * @param {string} routetableId 路由表ID
     * @param {RoutetableAssociateReqbody} routetableAssociate 关联路由表与子网请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.disassociateRouteTable = function (disassociateRouteTableRequest) {
        var options = (0, exports.ParamCreater)().disassociateRouteTable(disassociateRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户的所有流日志列表，并根据过滤条件进行过滤
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询流日志列表
     * @param {string} [id] 流日志资源唯一标识
     * @param {string} [name] 功能说明：流日志名称 取值范围：0-64个字符，支持数字、字母、中文、_（下划线）、-（中划线）、.（点）
     * @param {string} [tenantId] 项目ID
     * @param {string} [description] 功能说明：流日志描述 取值范围：0-255个字符，不能包含“&lt;”和“&gt;”
     * @param {'port' | 'network' | 'vpc'} [resourceType] 功能说明：流日志所属资源类型 取值范围：支持port、network、vpc 3种类型。
     * @param {string} [resourceId] resource_type对应资源的唯一ID
     * @param {'all' | 'reject' | 'accept'} [trafficType] 功能说明：流日志采集类型 取值范围：     1）all：采集指定资源的全部流量。     2）accept：采集指定资源允许传入、传出的流量。     3）reject：采集指定资源拒绝传入、传出的流量。
     * @param {string} [logGroupId] 日志组ID 请在云日志服务中获取，详情请参见《云日志服务用户指南》。
     * @param {string} [logTopicId] 日志主题ID 请在云日志服务中获取，详情请参见《云日志服务用户指南》。
     * @param {'lts'} [logStoreType] 功能说明：流日志存储类型 取值范围：     lts：存储类型为云日志服务（LTS）。
     * @param {'ACTIVE' | 'DOWN' | 'ERROR'} [status] 功能说明：流日志状态 取值范围：     ACTIVE：开启     DOWN：关闭     ERROR：异常故障
     * @param {string} [limit] 功能说明：每页返回的个数 取值范围：0 ~ intmax
     * @param {string} [marker] 分页查询起始的资源ID，为空时为查询第一页
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listFlowLogs = function (listFlowLogsRequest) {
        var options = (0, exports.ParamCreater)().listFlowLogs(listFlowLogsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户的所有端口，单次查询最多返回2000条数据。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询端口列表
     * @param {string} [name] 功能说明：按照name过滤查询  取值范围：最大长度不超过255
     * @param {string} [id] 按照port_id过滤查询
     * @param {number} [limit] 每页返回的个数
     * @param {boolean} [adminStateUp] 按照admin_state_up进行过滤
     * @param {string} [networkId] 按照network_id过滤查询
     * @param {string} [macAddress] 按照mac_address过滤查询
     * @param {string} [deviceId] 按照device_id过滤查询
     * @param {'network:dhcp' | 'neutron:VIP_PORT' | 'network:router_interface_distributed' | 'network:router_centralized_snat'} [deviceOwner] 按照device_owner过滤查询
     * @param {'ACTIVE' | 'BUILD' | 'DOWN'} [status] 功能说明：按照status过滤查询  取值范围：ACTIVE、BUILD、DOWN
     * @param {Array<string>} [securityGroups] 按照安全组ID列表过滤查询
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {Array<string>} [fixedIps] 按照fixed_ips&#x3D;ip_address或者fixed_ips&#x3D;subnet_id过滤查询
     * @param {string} [enterpriseProjectId] 功能说明：企业项目ID，用于基于企业项目的权限管理。  取值范围：最大长度36字节，带“-”连字符的UUID格式，或者是字符串“0”。“0”表示默认企业项目。  若需要查询当前用户所有企业项目绑定的端口，请传参all_granted_eps。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listPorts = function (listPortsRequest) {
        var options = (0, exports.ParamCreater)().listPorts(listPortsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的帐户的所有路由表列表，并根据过滤条件进行过滤
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询路由表列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时为查询第一页
     * @param {string} [id] 路由表ID，可过滤对应ID的路由表
     * @param {string} [vpcId] 虚拟私有云ID，可过滤对应虚拟私有云包含的路由表
     * @param {string} [subnetId] 子网ID，可过滤对应子网关联的路由表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listRouteTables = function (listRouteTablesRequest) {
        var options = (0, exports.ParamCreater)().listRouteTables(listRouteTablesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询安全组规则列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组规则列表
     * @param {string} [marker] 功能说明：分页查询起始的资源ID，为空时查询第一页
     * @param {number} [limit] 每页返回的个数
     * @param {string} [securityGroupId] 安全组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listSecurityGroupRules = function (listSecurityGroupRulesRequest) {
        var options = (0, exports.ParamCreater)().listSecurityGroupRules(listSecurityGroupRulesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询安全组列表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [vpcId] 按照vpc_id过滤查询
     * @param {string} [enterpriseProjectId] 功能说明：企业项目ID。可以使用该字段过滤某个企业项目下的安全组。  取值范围：最大长度36字节，带“-”连字符的UUID格式，或者是字符串“0”。“0”表示默认企业项目。若需要查询当前用户所有企业项目绑定的安全组，或者企业项目子账号需要进行安全组列表展示，请传参all_granted_eps。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listSecurityGroups = function (listSecurityGroupsRequest) {
        var options = (0, exports.ParamCreater)().listSecurityGroups(listSecurityGroupsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询租户在指定区域和实例类型的所有标签集合
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询子网项目标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listSubnetTags = function () {
        var options = (0, exports.ParamCreater)().listSubnetTags();
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询子网列表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询子网列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源id，为空时查询第一页
     * @param {string} [vpcId] 按照vpc_id过滤查询  企业项目细粒度授权场景下，该字段必传
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listSubnets = function (listSubnetsRequest) {
        var options = (0, exports.ParamCreater)().listSubnets(listSubnetsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 使用标签过滤实例
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询子网资源实例
     * @param {ListSubnetsByTagsRequestBody} listSubnetsByTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listSubnetsByTags = function (listSubnetsByTagsRequest) {
        var options = (0, exports.ParamCreater)().listSubnetsByTags(listSubnetsByTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户的所有对等连接。根据过滤条件进行过滤。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询对等连接列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [id] 按照peering_id过滤查询
     * @param {string} [name] 功能说明：按照peering_name过查询  取值范围：最大长度不超过64
     * @param {'PENDING_ACCEPTANCE' | 'REJECTED' | 'EXPIRED' | 'DELETED' | 'ACTIVE'} [status] 根据status进行过滤  - PENDING_ACCEPTANCE：等待接受 - REJECTED：已拒绝。 - EXPIRED：已过期。 - DELETED：已删除。 - ACTIVE：活动的。
     * @param {string} [tenantId] 按照项目ID过滤查询
     * @param {string} [vpcId] 根据vpc ID过滤查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listVpcPeerings = function (listVpcPeeringsRequest) {
        var options = (0, exports.ParamCreater)().listVpcPeerings(listVpcPeeringsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 租户A名下的VPC申请和租户B的VPC建立对等连接，需要等待租户B接受该请求。此接口用于租户拒绝其他租户发起的对等连接请求。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 拒绝对等连接请求
     * @param {string} peeringId 对等连接ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.rejectVpcPeering = function (rejectVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().rejectVpcPeering(rejectVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询流日志详情
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询流日志
     * @param {string} flowlogId 流日志资源唯一标识
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showFlowLog = function (showFlowLogRequest) {
        var options = (0, exports.ParamCreater)().showFlowLog(showFlowLogRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询单个端口详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询端口
     * @param {string} portId 端口ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showPort = function (showPortRequest) {
        var options = (0, exports.ParamCreater)().showPort(showPortRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询单租户在VPC服务下的网络资源配额，包括vpc配额、子网配额、安全组配额、安全组规则配额、弹性公网IP配额，vpn配额等。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询配额
     * @param {'vpc' | 'subnet' | 'securityGroup' | 'securityGroupRule' | 'publicIp' | 'vpn' | 'vpngw' | 'vpcPeer' | 'firewall' | 'shareBandwidth' | 'shareBandwidthIP' | 'loadbalancer' | 'listener' | 'physicalConnect' | 'virtualInterface' | 'vpcContainRoutetable' | 'routetableContainRoutes'} [type] 功能说明：根据type过滤查询指定类型的配额 取值范围：vpc，subnet，securityGroup，securityGroupRule，publicIp，vpn，vpngw，vpcPeer，firewall，shareBandwidth，shareBandwidthIP，loadbalancer，listener，physicalConnect，virtualInterface，vpcContainRoutetable，routetableContainRoutes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showQuota = function (showQuotaRequest) {
        var options = (0, exports.ParamCreater)().showQuota(showQuotaRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询路由表详情
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询路由表
     * @param {string} routetableId 路由表ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showRouteTable = function (showRouteTableRequest) {
        var options = (0, exports.ParamCreater)().showRouteTable(showRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询单个安全组详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组
     * @param {string} securityGroupId 安全组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showSecurityGroup = function (showSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().showSecurityGroup(showSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询单个安全组规则详情
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组规则
     * @param {string} securityGroupRuleId 安全组规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showSecurityGroupRule = function (showSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().showSecurityGroupRule(showSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询子网详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询子网
     * @param {string} subnetId 子网ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showSubnet = function (showSubnetRequest) {
        var options = (0, exports.ParamCreater)().showSubnet(showSubnetRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询指定子网实例的标签信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询子网资源标签
     * @param {string} subnetId 子网ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showSubnetTags = function (showSubnetTagsRequest) {
        var options = (0, exports.ParamCreater)().showSubnetTags(showSubnetTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询对等连接详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询对等连接
     * @param {string} peeringId 对等连接ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showVpcPeering = function (showVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().showVpcPeering(showVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新流日志
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新流日志
     * @param {string} flowlogId 流日志资源唯一标识
     * @param {UpdateFlowLogReqBody} flowLog 更新流日志的请求体，参见UpdateFlowLogReq对象。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updateFlowLog = function (updateFlowLogRequest) {
        var options = (0, exports.ParamCreater)().updateFlowLog(updateFlowLogRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新端口。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新端口
     * @param {string} portId 端口ID
     * @param {UpdatePortRequestBody} port 更新端口对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updatePort = function (updatePortRequest) {
        var options = (0, exports.ParamCreater)().updatePort(updatePortRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新路由表，包括可以更新路由表的名称，描述，以及新增、更新、删除路由条目
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新路由表
     * @param {string} routetableId 路由表ID
     * @param {UpdateRoutetableReqBody} routetable 更新路由表对象，参见UpdateRouteTableReq对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updateRouteTable = function (updateRouteTableRequest) {
        var options = (0, exports.ParamCreater)().updateRouteTable(updateRouteTableRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新子网。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新子网
     * @param {string} vpcId 子网对应的vpc_id
     * @param {string} subnetId 子网ID
     * @param {UpdateSubnetRequestBody} subnet 更新子网对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updateSubnet = function (updateSubnetRequest) {
        var options = (0, exports.ParamCreater)().updateSubnet(updateSubnetRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新对等连接。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新对等连接
     * @param {string} peeringId 对等连接ID
     * @param {UpdateVpcPeeringRequestBody} peering 更新peering对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updateVpcPeering = function (updateVpcPeeringRequest) {
        var options = (0, exports.ParamCreater)().updateVpcPeering(updateVpcPeeringRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 申请私有IP。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 申请私有IP
     * @param {CreatePrivateipRequestBody} privateips 申请私有IP对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createPrivateip = function (createPrivateipRequest) {
        var options = (0, exports.ParamCreater)().createPrivateip(createPrivateipRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除私有IP。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除私有IP
     * @param {string} privateipId 私有IP ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deletePrivateip = function (deletePrivateipRequest) {
        var options = (0, exports.ParamCreater)().deletePrivateip(deletePrivateipRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询指定子网下的私有IP列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询私有IP列表
     * @param {string} subnetId 私有IP所在子网的唯一标识
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源id，为空时查询第一页
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listPrivateips = function (listPrivateipsRequest) {
        var options = (0, exports.ParamCreater)().listPrivateips(listPrivateipsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 显示一个指定网络中的IPv4地址使用情况。
     * 包括此网络中的IP总数以及已用IP总数，以及网络下每一个子网的IP地址总数和可用IP地址总数。
     *
     * &gt; 须知
     *
     * - 系统预留地址指的是子网的第1个以及最后4个地址，一般用于网关、DHCP等服务。
     * - 这里以及下文描述的IP地址总数、已用IP地址总数不包含系统预留地址。
     * - 在分配IP时，用户可以指定系统预留的IP地址。但是不论IP是如何分配的，只要是处于系统预留IP地址段的IP均不会被统计到已用IP地址数目和IP地址总数中。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询网络IP使用情况
     * @param {string} networkId 网络ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showNetworkIpAvailabilities = function (showNetworkIpAvailabilitiesRequest) {
        var options = (0, exports.ParamCreater)().showNetworkIpAvailabilities(showNetworkIpAvailabilitiesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 指定ID查询私有IP。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询私有IP
     * @param {string} privateipId 私有IP ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showPrivateip = function (showPrivateipRequest) {
        var options = (0, exports.ParamCreater)().showPrivateip(showPrivateipRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建安全组
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建安全组
     * @param {NeutronCreateSecurityGroupRequestBody} securityGroup 安全组对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronCreateSecurityGroup = function (neutronCreateSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronCreateSecurityGroup(neutronCreateSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建安全组规则
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建安全组规则
     * @param {NeutronCreateSecurityGroupRuleRequestBody} securityGroupRule 安全组规则对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronCreateSecurityGroupRule = function (neutronCreateSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronCreateSecurityGroupRule(neutronCreateSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除安全组
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除安全组
     * @param {string} securityGroupId 安全组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronDeleteSecurityGroup = function (neutronDeleteSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronDeleteSecurityGroup(neutronDeleteSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除安全组规则
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除安全组规则
     * @param {string} securityGroupRuleId 安全组规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronDeleteSecurityGroupRule = function (neutronDeleteSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronDeleteSecurityGroupRule(neutronDeleteSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户有权限查看的所有安全组规则。单次查询最多返回2000条数据，超过2000后会返回分页标记。分页查询请参考分页查询
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组规则列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [id] 按照安全组规则对应的id过滤查询结果
     * @param {string} [direction] 按照安全组规则的方向过滤查询结果，支持ingress和egress进行过滤
     * @param {string} [protocol] 按照安全组规则的IP协议过滤查询结果
     * @param {string} [ethertype] 按照网络类型过滤查询结果，支持IPv4或者IPv6
     * @param {string} [description] 按照安全组规则的描述过滤查询结果
     * @param {string} [remoteIpPrefix] 按照与此安全组规则匹配的远端IP网段过滤查询结果
     * @param {string} [remoteGroupId] 按照与此安全组规则关联的远端安全组ID过滤查询结果
     * @param {string} [securityGroupId] 按照与此安全组规则所属的安全组ID过滤查询结果
     * @param {string} [portRangeMax] 按照最大端口过滤查询结果
     * @param {string} [portRangeMin] 按照最小端口过滤查询结果
     * @param {string} [tenantId] 按照安全组规则所属的项目ID过滤查询结果
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronListSecurityGroupRules = function (neutronListSecurityGroupRulesRequest) {
        var options = (0, exports.ParamCreater)().neutronListSecurityGroupRules(neutronListSecurityGroupRulesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求租户的所有安全组，单次查询最多返回2000条数据，超过2000后会返回分页标记。分页查询请参考分页查询 。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [id] 按照安全组对应的ID过滤查询
     * @param {string} [name] 按照安全组的名称过滤查询
     * @param {string} [description] 按照安全组的描述过滤查询
     * @param {string} [tenantId] 按照安全组所属的项目ID过滤查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronListSecurityGroups = function (neutronListSecurityGroupsRequest) {
        var options = (0, exports.ParamCreater)().neutronListSecurityGroups(neutronListSecurityGroupsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询安全组详情
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组
     * @param {string} securityGroupId 安全组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronShowSecurityGroup = function (neutronShowSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronShowSecurityGroup(neutronShowSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询安全组规则详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询安全组规则
     * @param {string} securityGroupRuleId 安全组规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronShowSecurityGroupRule = function (neutronShowSecurityGroupRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronShowSecurityGroupRule(neutronShowSecurityGroupRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新安全组
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新安全组
     * @param {string} securityGroupId 安全组ID
     * @param {NeutronUpdateSecurityGroupRequestBody} securityGroup 安全组
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronUpdateSecurityGroup = function (neutronUpdateSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronUpdateSecurityGroup(neutronUpdateSecurityGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 插入一条网络ACL规则到某一网络ACL策略中。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 插入网络ACL规则
     * @param {string} firewallPolicyId 网络ACL防火墙策略ID
     * @param {NeutronInsertFirewallRuleRequestBody} insertFirewallRule 插入ACL规则请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronAddFirewallRule = function (neutronAddFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronAddFirewallRule(neutronAddFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建网络ACL组
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建网络ACL组
     * @param {NeutronCreateFirewallGroupRequestBody} firewallGroup firewall group对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronCreateFirewallGroup = function (neutronCreateFirewallGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronCreateFirewallGroup(neutronCreateFirewallGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建网络ACL策略。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建网络ACL策略
     * @param {NeutronCreateFirewallPolicyRequestBody} firewallPolicy firewall policy对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronCreateFirewallPolicy = function (neutronCreateFirewallPolicyRequest) {
        var options = (0, exports.ParamCreater)().neutronCreateFirewallPolicy(neutronCreateFirewallPolicyRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建网络ACL规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建网络ACL规则
     * @param {NeutronCreateFirewallRuleRequestBody} firewallRule firewall rule对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronCreateFirewallRule = function (neutronCreateFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronCreateFirewallRule(neutronCreateFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除网络ACL组
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除网络ACL组
     * @param {string} firewallGroupId 网络ACL防火墙组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronDeleteFirewallGroup = function (neutronDeleteFirewallGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronDeleteFirewallGroup(neutronDeleteFirewallGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除网络ACL策略。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除网络ACL策略
     * @param {string} firewallPolicyId 网络ACL防火墙策略ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronDeleteFirewallPolicy = function (neutronDeleteFirewallPolicyRequest) {
        var options = (0, exports.ParamCreater)().neutronDeleteFirewallPolicy(neutronDeleteFirewallPolicyRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除网络ACL规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除网络ACL规则
     * @param {string} firewallRuleId 网络ACL防火墙规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronDeleteFirewallRule = function (neutronDeleteFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronDeleteFirewallRule(neutronDeleteFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户有权限操作的所有网络ACL组信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询所有网络ACL组
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {number} [limit] 每页返回的个数
     * @param {Array<string>} [id] 使用id过滤网络ACL组
     * @param {Array<string>} [name] 使用name过滤ACL组
     * @param {Array<string>} [description] 使用description过滤ACL组
     * @param {string} [ingressFirewallPolicyId] 使用入方向的网络ACL策略ID过滤网络ACL组
     * @param {string} [egressFirewallPolicyId] 使用出方向的网络ACL策略过滤查询网络ACL组
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronListFirewallGroups = function (neutronListFirewallGroupsRequest) {
        var options = (0, exports.ParamCreater)().neutronListFirewallGroups(neutronListFirewallGroupsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户有权限操作的所有网络ACL策略信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询所有网络ACL策略
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {Array<string>} [id] 使用网络ACL策略ID过滤网络ACL策略
     * @param {Array<string>} [name] 使用name过滤网络ACL策略
     * @param {Array<string>} [description] 使用网络ACL策略描述过滤查询网络ACL策略
     * @param {string} [tenantId] 使用tenant_id过滤查询网络ACL策略
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronListFirewallPolicies = function (neutronListFirewallPoliciesRequest) {
        var options = (0, exports.ParamCreater)().neutronListFirewallPolicies(neutronListFirewallPoliciesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户有权限操作的所有网络ACL规则信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询所有网络ACL规则
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {number} [limit] 每页返回的个数
     * @param {Array<string>} [id] 使用网络ACL规则ID过滤网络ACL规则
     * @param {Array<string>} [name] 使用网络ACL规则name过滤网络ACL规则
     * @param {Array<string>} [description] 使用网络ACL规则的description过滤网络ACL规则
     * @param {string} [action] 使用action过滤查询网络ACL规则
     * @param {string} [tenantId] 使用tenant_id过滤查询网络ACL规则
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronListFirewallRules = function (neutronListFirewallRulesRequest) {
        var options = (0, exports.ParamCreater)().neutronListFirewallRules(neutronListFirewallRulesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 从某一网络ACL策略中移除一条网络ACL规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 移除网络ACL规则
     * @param {string} firewallPolicyId 网络ACL防火墙策略ID
     * @param {NeutronRemoveFirewallRuleRequestBody} removeFirewallRule 移除ACL规则请求体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronRemoveFirewallRule = function (neutronRemoveFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronRemoveFirewallRule(neutronRemoveFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询特定网络ACL组详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询特定网络ACL组详情
     * @param {string} firewallGroupId 网络ACL防火墙组ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronShowFirewallGroup = function (neutronShowFirewallGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronShowFirewallGroup(neutronShowFirewallGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询特定网络ACL策略详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询特定网络ACL策略详情
     * @param {string} firewallPolicyId 网络ACL防火墙策略ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronShowFirewallPolicy = function (neutronShowFirewallPolicyRequest) {
        var options = (0, exports.ParamCreater)().neutronShowFirewallPolicy(neutronShowFirewallPolicyRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询特定网络ACL规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询特定网络ACL规则
     * @param {string} firewallRuleId 网络ACL规则ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronShowFirewallRule = function (neutronShowFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronShowFirewallRule(neutronShowFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新网络ACL组。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新网络ACL组
     * @param {string} firewallGroupId 网络ACL防火墙组ID
     * @param {NeutronUpdateFirewallGroupRequestBody} firewallGroup firewall group对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronUpdateFirewallGroup = function (neutronUpdateFirewallGroupRequest) {
        var options = (0, exports.ParamCreater)().neutronUpdateFirewallGroup(neutronUpdateFirewallGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新网络ACL策略。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新网络ACL策略
     * @param {string} firewallPolicyId 网络ACL防火墙策略ID
     * @param {NeutronUpdateFirewallPolicyRequestBody} firewallPolicy firewall policy对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronUpdateFirewallPolicy = function (neutronUpdateFirewallPolicyRequest) {
        var options = (0, exports.ParamCreater)().neutronUpdateFirewallPolicy(neutronUpdateFirewallPolicyRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新网络ACL规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新网络ACL规则
     * @param {string} firewallRuleId 网络ACL防火墙规则ID
     * @param {NeutronUpdateFirewallRuleRequestBody} firewallRule firewall rule对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.neutronUpdateFirewallRule = function (neutronUpdateFirewallRuleRequest) {
        var options = (0, exports.ParamCreater)().neutronUpdateFirewallRule(neutronUpdateFirewallRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为指定的VPC资源实例批量添加标签。
     * 此接口为幂等接口：创建时如果请求体中存在重复key则报错。创建时，不允许设置重复key数据，如果数据库已存在该key，就覆盖value的值。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量创建VPC资源标签
     * @param {string} vpcId 功能说明：虚拟私有云唯一标识 取值范围：合法UUID 约束：ID对应的VPC必须存在
     * @param {BatchCreateVpcTagsRequestBody} batchCreateVpcTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.batchCreateVpcTags = function (batchCreateVpcTagsRequest) {
        var options = (0, exports.ParamCreater)().batchCreateVpcTags(batchCreateVpcTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为指定的VPC资源实例批量删除标签。
     * 此接口为幂等接口：删除时，如果删除的标签不存在，默认处理成功；删除时不对标签字符集范围做校验。删除时tags结构体不能缺失，key不能为空，或者空字符串。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 批量删除VPC资源标签
     * @param {string} vpcId 功能说明：虚拟私有云唯一标识 取值范围：合法UUID 约束：ID对应的VPC必须存在
     * @param {BatchDeleteVpcTagsRequestBody} batchDeleteVpcTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.batchDeleteVpcTags = function (batchDeleteVpcTagsRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteVpcTags(batchDeleteVpcTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建虚拟私有云。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建VPC
     * @param {CreateVpcRequestBody} vpc 创建VPC对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createVpc = function (createVpcRequest) {
        var options = (0, exports.ParamCreater)().createVpc(createVpcRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 给指定VPC资源实例增加标签信息
     * 此接口为幂等接口：创建时，如果创建的标签已经存在（key相同），则覆盖。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建VPC资源标签
     * @param {string} vpcId 功能说明：虚拟私有云唯一标识 取值范围：合法UUID 约束：ID对应的VPC必须存在
     * @param {CreateVpcResourceTagRequestBody} createVpcResourceTagRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createVpcResourceTag = function (createVpcResourceTagRequest) {
        var options = (0, exports.ParamCreater)().createVpcResourceTag(createVpcResourceTagRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建路由
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建VPC路由
     * @param {CreateVpcRouteRequestBody} route route对象，必选字段：destination、nexthop、type、vpc_id。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.createVpcRoute = function (createVpcRouteRequest) {
        var options = (0, exports.ParamCreater)().createVpcRoute(createVpcRouteRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除虚拟私有云。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除VPC
     * @param {string} vpcId 虚拟私有云ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteVpc = function (deleteVpcRequest) {
        var options = (0, exports.ParamCreater)().deleteVpc(deleteVpcRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除路由
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除VPC路由
     * @param {string} routeId 路由ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteVpcRoute = function (deleteVpcRouteRequest) {
        var options = (0, exports.ParamCreater)().deleteVpcRoute(deleteVpcRouteRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定VPC资源实例的标签信息
     * 该接口为幂等接口：删除的key不存在报404，Key不能为空或者空字符串
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除VPC资源标签
     * @param {string} vpcId 功能说明：虚拟私有云唯一标识 取值范围：合法UUID 约束：ID对应的VPC必须存在
     * @param {string} key 功能说明：标签键
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.deleteVpcTag = function (deleteVpcTagRequest) {
        var options = (0, exports.ParamCreater)().deleteVpcTag(deleteVpcTagRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询提交请求的租户的所有路由列表，并根据过滤条件进行过滤。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC路由列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [id] 按照routes_id过滤查询
     * @param {'peering'} [type] 功能说明：按照路由类型过滤查询  取值范围：peering
     * @param {string} [vpcId] 按照vpc_id过滤查询
     * @param {string} [destination] 按照路由目的地址CIDR过滤查询
     * @param {string} [tenantId] 按照项目ID过滤查询
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listVpcRoutes = function (listVpcRoutesRequest) {
        var options = (0, exports.ParamCreater)().listVpcRoutes(listVpcRoutesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询租户在指定区域和实例类型的所有标签集合
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC项目标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listVpcTags = function () {
        var options = (0, exports.ParamCreater)().listVpcTags();
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询虚拟私有云列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC列表
     * @param {number} [limit] 每页返回的个数
     * @param {string} [marker] 分页查询起始的资源ID，为空时查询第一页
     * @param {string} [id] 功能说明：虚拟私有云ID。可以使用该字段过滤某个ID的虚拟私有云。
     * @param {string} [enterpriseProjectId] 功能说明：企业项目ID。可以使用该字段过滤某个企业项目下的虚拟私有云。若未传值则默认返回所有企业项目绑定的虚拟私有云。  取值范围：最大长度36字节，带“-”连字符的UUID格式，或者是字符串“0”。“0”表示默认企业项目。若需要查询当前用户所有企业项目绑定的虚拟私有云，请传参all_granted_eps。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listVpcs = function (listVpcsRequest) {
        var options = (0, exports.ParamCreater)().listVpcs(listVpcsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 使用标签过滤实例。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC资源实例
     * @param {ListVpcsByTagsRequestBody} listVpcsByTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.listVpcsByTags = function (listVpcsByTagsRequest) {
        var options = (0, exports.ParamCreater)().listVpcsByTags(listVpcsByTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询虚拟私有云。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC
     * @param {string} vpcId 虚拟私有云ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showVpc = function (showVpcRequest) {
        var options = (0, exports.ParamCreater)().showVpc(showVpcRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询路由详情
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC路由
     * @param {string} routeId 路由ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showVpcRoute = function (showVpcRouteRequest) {
        var options = (0, exports.ParamCreater)().showVpcRoute(showVpcRouteRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询指定VPC实例的标签信息
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询VPC资源标签
     * @param {string} vpcId 功能说明：虚拟私有云唯一标识 取值范围：合法UUID 约束：ID对应的VPC必须存在
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.showVpcTags = function (showVpcTagsRequest) {
        var options = (0, exports.ParamCreater)().showVpcTags(showVpcTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新虚拟私有云。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 更新VPC
     * @param {string} vpcId 虚拟私有云ID
     * @param {UpdateVpcRequestBody} vpc 更新VPC对象
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    VpcClient.prototype.updateVpc = function (updateVpcRequest) {
        var options = (0, exports.ParamCreater)().updateVpc(updateVpcRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    return VpcClient;
}());
exports.VpcClient = VpcClient;
var ParamCreater = function () {
    return {
        /**
         * 租户A名下的VPC申请和租户B的VPC建立对等连接，需要等待租户B接受该请求。此接口用于租户接受其他租户发起的对等连接请求。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        acceptVpcPeering: function (acceptVpcPeeringRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/vpc/peerings/{peering_id}/accept",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var peeringId;
            if (acceptVpcPeeringRequest !== null && acceptVpcPeeringRequest !== undefined) {
                if (acceptVpcPeeringRequest instanceof AcceptVpcPeeringRequest_1.AcceptVpcPeeringRequest) {
                    peeringId = acceptVpcPeeringRequest.peeringId;
                }
                else {
                    peeringId = acceptVpcPeeringRequest['peering_id'];
                }
            }
            if (peeringId === null || peeringId === undefined) {
                throw new RequiredError('peeringId', 'Required parameter peeringId was null or undefined when calling acceptVpcPeering.');
            }
            options.pathParams = { 'peering_id': peeringId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 路由表关联子网。子网关联路由表A后，再关联B，不需要先跟路由表A解关联再关联路由表B
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        associateRouteTable: function (associateRouteTableRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/routetables/{routetable_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var routetableId;
            if (associateRouteTableRequest !== null && associateRouteTableRequest !== undefined) {
                if (associateRouteTableRequest instanceof AssociateRouteTableRequest_1.AssociateRouteTableRequest) {
                    routetableId = associateRouteTableRequest.routetableId;
                    body = associateRouteTableRequest.body;
                }
                else {
                    routetableId = associateRouteTableRequest['routetable_id'];
                    body = associateRouteTableRequest['body'];
                }
            }
            if (routetableId === null || routetableId === undefined) {
                throw new RequiredError('routetableId', 'Required parameter routetableId was null or undefined when calling associateRouteTable.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'routetable_id': routetableId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为指定的子网资源实例批量添加标签。
         * 此接口为幂等接口：创建时如果请求体中存在重复key则报错。创建时，不允许设置重复key数据，如果数据库已存在该key，就覆盖value的值。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchCreateSubnetTags: function (batchCreateSubnetTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/subnets/{subnet_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var subnetId;
            if (batchCreateSubnetTagsRequest !== null && batchCreateSubnetTagsRequest !== undefined) {
                if (batchCreateSubnetTagsRequest instanceof BatchCreateSubnetTagsRequest_1.BatchCreateSubnetTagsRequest) {
                    subnetId = batchCreateSubnetTagsRequest.subnetId;
                    body = batchCreateSubnetTagsRequest.body;
                }
                else {
                    subnetId = batchCreateSubnetTagsRequest['subnet_id'];
                    body = batchCreateSubnetTagsRequest['body'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling batchCreateSubnetTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为指定的子网资源实例批量删除标签
         * 此接口为幂等接口：删除时，如果删除的标签不存在，默认处理成功；删除时不对标签字符集范围做校验。删除时tags结构体不能缺失，key不能为空，或者空字符串。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchDeleteSubnetTags: function (batchDeleteSubnetTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/subnets/{subnet_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var subnetId;
            if (batchDeleteSubnetTagsRequest !== null && batchDeleteSubnetTagsRequest !== undefined) {
                if (batchDeleteSubnetTagsRequest instanceof BatchDeleteSubnetTagsRequest_1.BatchDeleteSubnetTagsRequest) {
                    subnetId = batchDeleteSubnetTagsRequest.subnetId;
                    body = batchDeleteSubnetTagsRequest.body;
                }
                else {
                    subnetId = batchDeleteSubnetTagsRequest['subnet_id'];
                    body = batchDeleteSubnetTagsRequest['body'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling batchDeleteSubnetTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建流日志。
         * 流日志功能可以记录虚拟私有云中的流量信息，帮助您检查和优化安全组和网络ACL防火墙控制规则、监控网络流量、进行网络攻击分析等。
         * VPC流日志功能需要与云日志服务LTS结合使用，请先在云日志服务中创建日志组和日志主题，然后再创建VPC流日志。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createFlowLog: function (createFlowLogRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/fl/flow_logs",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createFlowLogRequest !== null && createFlowLogRequest !== undefined) {
                if (createFlowLogRequest instanceof CreateFlowLogRequest_1.CreateFlowLogRequest) {
                    body = createFlowLogRequest.body;
                }
                else {
                    body = createFlowLogRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建端口。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createPort: function (createPortRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/ports",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createPortRequest !== null && createPortRequest !== undefined) {
                if (createPortRequest instanceof CreatePortRequest_1.CreatePortRequest) {
                    body = createPortRequest.body;
                }
                else {
                    body = createPortRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建路由表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createRouteTable: function (createRouteTableRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/routetables",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createRouteTableRequest !== null && createRouteTableRequest !== undefined) {
                if (createRouteTableRequest instanceof CreateRouteTableRequest_1.CreateRouteTableRequest) {
                    body = createRouteTableRequest.body;
                }
                else {
                    body = createRouteTableRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建安全组。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createSecurityGroup: function (createSecurityGroupRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/security-groups",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createSecurityGroupRequest !== null && createSecurityGroupRequest !== undefined) {
                if (createSecurityGroupRequest instanceof CreateSecurityGroupRequest_1.CreateSecurityGroupRequest) {
                    body = createSecurityGroupRequest.body;
                }
                else {
                    body = createSecurityGroupRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建安全组规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createSecurityGroupRule: function (createSecurityGroupRuleRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/security-group-rules",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createSecurityGroupRuleRequest !== null && createSecurityGroupRuleRequest !== undefined) {
                if (createSecurityGroupRuleRequest instanceof CreateSecurityGroupRuleRequest_1.CreateSecurityGroupRuleRequest) {
                    body = createSecurityGroupRuleRequest.body;
                }
                else {
                    body = createSecurityGroupRuleRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建子网。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createSubnet: function (createSubnetRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/subnets",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createSubnetRequest !== null && createSubnetRequest !== undefined) {
                if (createSubnetRequest instanceof CreateSubnetRequest_1.CreateSubnetRequest) {
                    body = createSubnetRequest.body;
                }
                else {
                    body = createSubnetRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 给指定子网资源实例增加标签信息。
         * 此接口为幂等接口：创建时，如果创建的标签已经存在（key相同），则覆盖。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createSubnetTag: function (createSubnetTagRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/subnets/{subnet_id}/tags",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var subnetId;
            if (createSubnetTagRequest !== null && createSubnetTagRequest !== undefined) {
                if (createSubnetTagRequest instanceof CreateSubnetTagRequest_1.CreateSubnetTagRequest) {
                    subnetId = createSubnetTagRequest.subnetId;
                    body = createSubnetTagRequest.body;
                }
                else {
                    subnetId = createSubnetTagRequest['subnet_id'];
                    body = createSubnetTagRequest['body'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling createSubnetTag.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建对等连接。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createVpcPeering: function (createVpcPeeringRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/vpc/peerings",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createVpcPeeringRequest !== null && createVpcPeeringRequest !== undefined) {
                if (createVpcPeeringRequest instanceof CreateVpcPeeringRequest_1.CreateVpcPeeringRequest) {
                    body = createVpcPeeringRequest.body;
                }
                else {
                    body = createVpcPeeringRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除流日志
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteFlowLog: function (deleteFlowLogRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/fl/flow_logs/{flowlog_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var flowlogId;
            if (deleteFlowLogRequest !== null && deleteFlowLogRequest !== undefined) {
                if (deleteFlowLogRequest instanceof DeleteFlowLogRequest_1.DeleteFlowLogRequest) {
                    flowlogId = deleteFlowLogRequest.flowlogId;
                }
                else {
                    flowlogId = deleteFlowLogRequest['flowlog_id'];
                }
            }
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId', 'Required parameter flowlogId was null or undefined when calling deleteFlowLog.');
            }
            options.pathParams = { 'flowlog_id': flowlogId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除端口。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deletePort: function (deletePortRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/ports/{port_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var portId;
            if (deletePortRequest !== null && deletePortRequest !== undefined) {
                if (deletePortRequest instanceof DeletePortRequest_1.DeletePortRequest) {
                    portId = deletePortRequest.portId;
                }
                else {
                    portId = deletePortRequest['port_id'];
                }
            }
            if (portId === null || portId === undefined) {
                throw new RequiredError('portId', 'Required parameter portId was null or undefined when calling deletePort.');
            }
            options.pathParams = { 'port_id': portId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除路由表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteRouteTable: function (deleteRouteTableRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/routetables/{routetable_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var routetableId;
            if (deleteRouteTableRequest !== null && deleteRouteTableRequest !== undefined) {
                if (deleteRouteTableRequest instanceof DeleteRouteTableRequest_1.DeleteRouteTableRequest) {
                    routetableId = deleteRouteTableRequest.routetableId;
                }
                else {
                    routetableId = deleteRouteTableRequest['routetable_id'];
                }
            }
            if (routetableId === null || routetableId === undefined) {
                throw new RequiredError('routetableId', 'Required parameter routetableId was null or undefined when calling deleteRouteTable.');
            }
            options.pathParams = { 'routetable_id': routetableId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除安全组。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteSecurityGroup: function (deleteSecurityGroupRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/security-groups/{security_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupId;
            if (deleteSecurityGroupRequest !== null && deleteSecurityGroupRequest !== undefined) {
                if (deleteSecurityGroupRequest instanceof DeleteSecurityGroupRequest_1.DeleteSecurityGroupRequest) {
                    securityGroupId = deleteSecurityGroupRequest.securityGroupId;
                }
                else {
                    securityGroupId = deleteSecurityGroupRequest['security_group_id'];
                }
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId', 'Required parameter securityGroupId was null or undefined when calling deleteSecurityGroup.');
            }
            options.pathParams = { 'security_group_id': securityGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除安全组规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteSecurityGroupRule: function (deleteSecurityGroupRuleRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/security-group-rules/{security_group_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupRuleId;
            if (deleteSecurityGroupRuleRequest !== null && deleteSecurityGroupRuleRequest !== undefined) {
                if (deleteSecurityGroupRuleRequest instanceof DeleteSecurityGroupRuleRequest_1.DeleteSecurityGroupRuleRequest) {
                    securityGroupRuleId = deleteSecurityGroupRuleRequest.securityGroupRuleId;
                }
                else {
                    securityGroupRuleId = deleteSecurityGroupRuleRequest['security_group_rule_id'];
                }
            }
            if (securityGroupRuleId === null || securityGroupRuleId === undefined) {
                throw new RequiredError('securityGroupRuleId', 'Required parameter securityGroupRuleId was null or undefined when calling deleteSecurityGroupRule.');
            }
            options.pathParams = { 'security_group_rule_id': securityGroupRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除子网
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteSubnet: function (deleteSubnetRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/vpcs/{vpc_id}/subnets/{subnet_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var vpcId;
            var subnetId;
            if (deleteSubnetRequest !== null && deleteSubnetRequest !== undefined) {
                if (deleteSubnetRequest instanceof DeleteSubnetRequest_1.DeleteSubnetRequest) {
                    vpcId = deleteSubnetRequest.vpcId;
                    subnetId = deleteSubnetRequest.subnetId;
                }
                else {
                    vpcId = deleteSubnetRequest['vpc_id'];
                    subnetId = deleteSubnetRequest['subnet_id'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling deleteSubnet.');
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling deleteSubnet.');
            }
            options.pathParams = { 'vpc_id': vpcId, 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定子网资源实例的标签信息。
         * 该接口为幂等接口：删除的key不存在报404，Key不能为空或者空字符串
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteSubnetTag: function (deleteSubnetTagRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/{project_id}/subnets/{subnet_id}/tags/{key}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var subnetId;
            var key;
            if (deleteSubnetTagRequest !== null && deleteSubnetTagRequest !== undefined) {
                if (deleteSubnetTagRequest instanceof DeleteSubnetTagRequest_1.DeleteSubnetTagRequest) {
                    subnetId = deleteSubnetTagRequest.subnetId;
                    key = deleteSubnetTagRequest.key;
                }
                else {
                    subnetId = deleteSubnetTagRequest['subnet_id'];
                    key = deleteSubnetTagRequest['key'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling deleteSubnetTag.');
            }
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling deleteSubnetTag.');
            }
            options.pathParams = { 'subnet_id': subnetId, 'key': key, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除对等连接。
         * 可以在在本端或对端任何一端删除对等连接。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteVpcPeering: function (deleteVpcPeeringRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/vpc/peerings/{peering_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var peeringId;
            if (deleteVpcPeeringRequest !== null && deleteVpcPeeringRequest !== undefined) {
                if (deleteVpcPeeringRequest instanceof DeleteVpcPeeringRequest_1.DeleteVpcPeeringRequest) {
                    peeringId = deleteVpcPeeringRequest.peeringId;
                }
                else {
                    peeringId = deleteVpcPeeringRequest['peering_id'];
                }
            }
            if (peeringId === null || peeringId === undefined) {
                throw new RequiredError('peeringId', 'Required parameter peeringId was null or undefined when calling deleteVpcPeering.');
            }
            options.pathParams = { 'peering_id': peeringId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 子网解关联路由表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        disassociateRouteTable: function (disassociateRouteTableRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/routetables/{routetable_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var routetableId;
            if (disassociateRouteTableRequest !== null && disassociateRouteTableRequest !== undefined) {
                if (disassociateRouteTableRequest instanceof DisassociateRouteTableRequest_1.DisassociateRouteTableRequest) {
                    routetableId = disassociateRouteTableRequest.routetableId;
                    body = disassociateRouteTableRequest.body;
                }
                else {
                    routetableId = disassociateRouteTableRequest['routetable_id'];
                    body = disassociateRouteTableRequest['body'];
                }
            }
            if (routetableId === null || routetableId === undefined) {
                throw new RequiredError('routetableId', 'Required parameter routetableId was null or undefined when calling disassociateRouteTable.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'routetable_id': routetableId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户的所有流日志列表，并根据过滤条件进行过滤
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listFlowLogs: function (listFlowLogsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/fl/flow_logs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var id;
            var name;
            var tenantId;
            var description;
            var resourceType;
            var resourceId;
            var trafficType;
            var logGroupId;
            var logTopicId;
            var logStoreType;
            var status;
            var limit;
            var marker;
            if (listFlowLogsRequest !== null && listFlowLogsRequest !== undefined) {
                if (listFlowLogsRequest instanceof ListFlowLogsRequest_1.ListFlowLogsRequest) {
                    id = listFlowLogsRequest.id;
                    name = listFlowLogsRequest.name;
                    tenantId = listFlowLogsRequest.tenantId;
                    description = listFlowLogsRequest.description;
                    resourceType = listFlowLogsRequest.resourceType;
                    resourceId = listFlowLogsRequest.resourceId;
                    trafficType = listFlowLogsRequest.trafficType;
                    logGroupId = listFlowLogsRequest.logGroupId;
                    logTopicId = listFlowLogsRequest.logTopicId;
                    logStoreType = listFlowLogsRequest.logStoreType;
                    status = listFlowLogsRequest.status;
                    limit = listFlowLogsRequest.limit;
                    marker = listFlowLogsRequest.marker;
                }
                else {
                    id = listFlowLogsRequest['id'];
                    name = listFlowLogsRequest['name'];
                    tenantId = listFlowLogsRequest['tenant_id'];
                    description = listFlowLogsRequest['description'];
                    resourceType = listFlowLogsRequest['resource_type'];
                    resourceId = listFlowLogsRequest['resource_id'];
                    trafficType = listFlowLogsRequest['traffic_type'];
                    logGroupId = listFlowLogsRequest['log_group_id'];
                    logTopicId = listFlowLogsRequest['log_topic_id'];
                    logStoreType = listFlowLogsRequest['log_store_type'];
                    status = listFlowLogsRequest['status'];
                    limit = listFlowLogsRequest['limit'];
                    marker = listFlowLogsRequest['marker'];
                }
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (resourceType !== null && resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }
            if (resourceId !== null && resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }
            if (trafficType !== null && trafficType !== undefined) {
                localVarQueryParameter['traffic_type'] = trafficType;
            }
            if (logGroupId !== null && logGroupId !== undefined) {
                localVarQueryParameter['log_group_id'] = logGroupId;
            }
            if (logTopicId !== null && logTopicId !== undefined) {
                localVarQueryParameter['log_topic_id'] = logTopicId;
            }
            if (logStoreType !== null && logStoreType !== undefined) {
                localVarQueryParameter['log_store_type'] = logStoreType;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户的所有端口，单次查询最多返回2000条数据。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPorts: function (listPortsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/ports",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var name;
            var id;
            var limit;
            var adminStateUp;
            var networkId;
            var macAddress;
            var deviceId;
            var deviceOwner;
            var status;
            var securityGroups;
            var marker;
            var fixedIps;
            var enterpriseProjectId;
            if (listPortsRequest !== null && listPortsRequest !== undefined) {
                if (listPortsRequest instanceof ListPortsRequest_1.ListPortsRequest) {
                    name = listPortsRequest.name;
                    id = listPortsRequest.id;
                    limit = listPortsRequest.limit;
                    adminStateUp = listPortsRequest.adminStateUp;
                    networkId = listPortsRequest.networkId;
                    macAddress = listPortsRequest.macAddress;
                    deviceId = listPortsRequest.deviceId;
                    deviceOwner = listPortsRequest.deviceOwner;
                    status = listPortsRequest.status;
                    securityGroups = listPortsRequest.securityGroups;
                    marker = listPortsRequest.marker;
                    fixedIps = listPortsRequest.fixedIps;
                    enterpriseProjectId = listPortsRequest.enterpriseProjectId;
                }
                else {
                    name = listPortsRequest['name'];
                    id = listPortsRequest['id'];
                    limit = listPortsRequest['limit'];
                    adminStateUp = listPortsRequest['admin_state_up'];
                    networkId = listPortsRequest['network_id'];
                    macAddress = listPortsRequest['mac_address'];
                    deviceId = listPortsRequest['device_id'];
                    deviceOwner = listPortsRequest['device_owner'];
                    status = listPortsRequest['status'];
                    securityGroups = listPortsRequest['security_groups'];
                    marker = listPortsRequest['marker'];
                    fixedIps = listPortsRequest['fixed_ips'];
                    enterpriseProjectId = listPortsRequest['enterprise_project_id'];
                }
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (adminStateUp !== null && adminStateUp !== undefined) {
                localVarQueryParameter['admin_state_up'] = adminStateUp;
            }
            if (networkId !== null && networkId !== undefined) {
                localVarQueryParameter['network_id'] = networkId;
            }
            if (macAddress !== null && macAddress !== undefined) {
                localVarQueryParameter['mac_address'] = macAddress;
            }
            if (deviceId !== null && deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }
            if (deviceOwner !== null && deviceOwner !== undefined) {
                localVarQueryParameter['device_owner'] = deviceOwner;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (securityGroups !== null && securityGroups !== undefined) {
                localVarQueryParameter['security_groups'] = securityGroups;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (fixedIps !== null && fixedIps !== undefined) {
                localVarQueryParameter['fixed_ips'] = fixedIps;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的帐户的所有路由表列表，并根据过滤条件进行过滤
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRouteTables: function (listRouteTablesRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/routetables",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var vpcId;
            var subnetId;
            if (listRouteTablesRequest !== null && listRouteTablesRequest !== undefined) {
                if (listRouteTablesRequest instanceof ListRouteTablesRequest_1.ListRouteTablesRequest) {
                    limit = listRouteTablesRequest.limit;
                    marker = listRouteTablesRequest.marker;
                    id = listRouteTablesRequest.id;
                    vpcId = listRouteTablesRequest.vpcId;
                    subnetId = listRouteTablesRequest.subnetId;
                }
                else {
                    limit = listRouteTablesRequest['limit'];
                    marker = listRouteTablesRequest['marker'];
                    id = listRouteTablesRequest['id'];
                    vpcId = listRouteTablesRequest['vpc_id'];
                    subnetId = listRouteTablesRequest['subnet_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            if (subnetId !== null && subnetId !== undefined) {
                localVarQueryParameter['subnet_id'] = subnetId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询安全组规则列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSecurityGroupRules: function (listSecurityGroupRulesRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/security-group-rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var marker;
            var limit;
            var securityGroupId;
            if (listSecurityGroupRulesRequest !== null && listSecurityGroupRulesRequest !== undefined) {
                if (listSecurityGroupRulesRequest instanceof ListSecurityGroupRulesRequest_1.ListSecurityGroupRulesRequest) {
                    marker = listSecurityGroupRulesRequest.marker;
                    limit = listSecurityGroupRulesRequest.limit;
                    securityGroupId = listSecurityGroupRulesRequest.securityGroupId;
                }
                else {
                    marker = listSecurityGroupRulesRequest['marker'];
                    limit = listSecurityGroupRulesRequest['limit'];
                    securityGroupId = listSecurityGroupRulesRequest['security_group_id'];
                }
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (securityGroupId !== null && securityGroupId !== undefined) {
                localVarQueryParameter['security_group_id'] = securityGroupId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询安全组列表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSecurityGroups: function (listSecurityGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/security-groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var vpcId;
            var enterpriseProjectId;
            if (listSecurityGroupsRequest !== null && listSecurityGroupsRequest !== undefined) {
                if (listSecurityGroupsRequest instanceof ListSecurityGroupsRequest_1.ListSecurityGroupsRequest) {
                    limit = listSecurityGroupsRequest.limit;
                    marker = listSecurityGroupsRequest.marker;
                    vpcId = listSecurityGroupsRequest.vpcId;
                    enterpriseProjectId = listSecurityGroupsRequest.enterpriseProjectId;
                }
                else {
                    limit = listSecurityGroupsRequest['limit'];
                    marker = listSecurityGroupsRequest['marker'];
                    vpcId = listSecurityGroupsRequest['vpc_id'];
                    enterpriseProjectId = listSecurityGroupsRequest['enterprise_project_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询租户在指定区域和实例类型的所有标签集合
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSubnetTags: function () {
            var options = {
                method: "GET",
                url: "/v2.0/{project_id}/subnets/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询子网列表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSubnets: function (listSubnetsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/subnets",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var vpcId;
            if (listSubnetsRequest !== null && listSubnetsRequest !== undefined) {
                if (listSubnetsRequest instanceof ListSubnetsRequest_1.ListSubnetsRequest) {
                    limit = listSubnetsRequest.limit;
                    marker = listSubnetsRequest.marker;
                    vpcId = listSubnetsRequest.vpcId;
                }
                else {
                    limit = listSubnetsRequest['limit'];
                    marker = listSubnetsRequest['marker'];
                    vpcId = listSubnetsRequest['vpc_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 使用标签过滤实例
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listSubnetsByTags: function (listSubnetsByTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/subnets/resource_instances/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (listSubnetsByTagsRequest !== null && listSubnetsByTagsRequest !== undefined) {
                if (listSubnetsByTagsRequest instanceof ListSubnetsByTagsRequest_1.ListSubnetsByTagsRequest) {
                    body = listSubnetsByTagsRequest.body;
                }
                else {
                    body = listSubnetsByTagsRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户的所有对等连接。根据过滤条件进行过滤。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVpcPeerings: function (listVpcPeeringsRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/vpc/peerings",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var name;
            var status;
            var tenantId;
            var vpcId;
            if (listVpcPeeringsRequest !== null && listVpcPeeringsRequest !== undefined) {
                if (listVpcPeeringsRequest instanceof ListVpcPeeringsRequest_1.ListVpcPeeringsRequest) {
                    limit = listVpcPeeringsRequest.limit;
                    marker = listVpcPeeringsRequest.marker;
                    id = listVpcPeeringsRequest.id;
                    name = listVpcPeeringsRequest.name;
                    status = listVpcPeeringsRequest.status;
                    tenantId = listVpcPeeringsRequest.tenantId;
                    vpcId = listVpcPeeringsRequest.vpcId;
                }
                else {
                    limit = listVpcPeeringsRequest['limit'];
                    marker = listVpcPeeringsRequest['marker'];
                    id = listVpcPeeringsRequest['id'];
                    name = listVpcPeeringsRequest['name'];
                    status = listVpcPeeringsRequest['status'];
                    tenantId = listVpcPeeringsRequest['tenant_id'];
                    vpcId = listVpcPeeringsRequest['vpc_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 租户A名下的VPC申请和租户B的VPC建立对等连接，需要等待租户B接受该请求。此接口用于租户拒绝其他租户发起的对等连接请求。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        rejectVpcPeering: function (rejectVpcPeeringRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/vpc/peerings/{peering_id}/reject",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var peeringId;
            if (rejectVpcPeeringRequest !== null && rejectVpcPeeringRequest !== undefined) {
                if (rejectVpcPeeringRequest instanceof RejectVpcPeeringRequest_1.RejectVpcPeeringRequest) {
                    peeringId = rejectVpcPeeringRequest.peeringId;
                }
                else {
                    peeringId = rejectVpcPeeringRequest['peering_id'];
                }
            }
            if (peeringId === null || peeringId === undefined) {
                throw new RequiredError('peeringId', 'Required parameter peeringId was null or undefined when calling rejectVpcPeering.');
            }
            options.pathParams = { 'peering_id': peeringId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询流日志详情
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showFlowLog: function (showFlowLogRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/fl/flow_logs/{flowlog_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var flowlogId;
            if (showFlowLogRequest !== null && showFlowLogRequest !== undefined) {
                if (showFlowLogRequest instanceof ShowFlowLogRequest_1.ShowFlowLogRequest) {
                    flowlogId = showFlowLogRequest.flowlogId;
                }
                else {
                    flowlogId = showFlowLogRequest['flowlog_id'];
                }
            }
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId', 'Required parameter flowlogId was null or undefined when calling showFlowLog.');
            }
            options.pathParams = { 'flowlog_id': flowlogId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询单个端口详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showPort: function (showPortRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/ports/{port_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var portId;
            if (showPortRequest !== null && showPortRequest !== undefined) {
                if (showPortRequest instanceof ShowPortRequest_1.ShowPortRequest) {
                    portId = showPortRequest.portId;
                }
                else {
                    portId = showPortRequest['port_id'];
                }
            }
            if (portId === null || portId === undefined) {
                throw new RequiredError('portId', 'Required parameter portId was null or undefined when calling showPort.');
            }
            options.pathParams = { 'port_id': portId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询单租户在VPC服务下的网络资源配额，包括vpc配额、子网配额、安全组配额、安全组规则配额、弹性公网IP配额，vpn配额等。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showQuota: function (showQuotaRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/quotas",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var type;
            if (showQuotaRequest !== null && showQuotaRequest !== undefined) {
                if (showQuotaRequest instanceof ShowQuotaRequest_1.ShowQuotaRequest) {
                    type = showQuotaRequest.type;
                }
                else {
                    type = showQuotaRequest['type'];
                }
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询路由表详情
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRouteTable: function (showRouteTableRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/routetables/{routetable_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var routetableId;
            if (showRouteTableRequest !== null && showRouteTableRequest !== undefined) {
                if (showRouteTableRequest instanceof ShowRouteTableRequest_1.ShowRouteTableRequest) {
                    routetableId = showRouteTableRequest.routetableId;
                }
                else {
                    routetableId = showRouteTableRequest['routetable_id'];
                }
            }
            if (routetableId === null || routetableId === undefined) {
                throw new RequiredError('routetableId', 'Required parameter routetableId was null or undefined when calling showRouteTable.');
            }
            options.pathParams = { 'routetable_id': routetableId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询单个安全组详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSecurityGroup: function (showSecurityGroupRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/security-groups/{security_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupId;
            if (showSecurityGroupRequest !== null && showSecurityGroupRequest !== undefined) {
                if (showSecurityGroupRequest instanceof ShowSecurityGroupRequest_1.ShowSecurityGroupRequest) {
                    securityGroupId = showSecurityGroupRequest.securityGroupId;
                }
                else {
                    securityGroupId = showSecurityGroupRequest['security_group_id'];
                }
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId', 'Required parameter securityGroupId was null or undefined when calling showSecurityGroup.');
            }
            options.pathParams = { 'security_group_id': securityGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询单个安全组规则详情
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSecurityGroupRule: function (showSecurityGroupRuleRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/security-group-rules/{security_group_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupRuleId;
            if (showSecurityGroupRuleRequest !== null && showSecurityGroupRuleRequest !== undefined) {
                if (showSecurityGroupRuleRequest instanceof ShowSecurityGroupRuleRequest_1.ShowSecurityGroupRuleRequest) {
                    securityGroupRuleId = showSecurityGroupRuleRequest.securityGroupRuleId;
                }
                else {
                    securityGroupRuleId = showSecurityGroupRuleRequest['security_group_rule_id'];
                }
            }
            if (securityGroupRuleId === null || securityGroupRuleId === undefined) {
                throw new RequiredError('securityGroupRuleId', 'Required parameter securityGroupRuleId was null or undefined when calling showSecurityGroupRule.');
            }
            options.pathParams = { 'security_group_rule_id': securityGroupRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询子网详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSubnet: function (showSubnetRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/subnets/{subnet_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var subnetId;
            if (showSubnetRequest !== null && showSubnetRequest !== undefined) {
                if (showSubnetRequest instanceof ShowSubnetRequest_1.ShowSubnetRequest) {
                    subnetId = showSubnetRequest.subnetId;
                }
                else {
                    subnetId = showSubnetRequest['subnet_id'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling showSubnet.');
            }
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询指定子网实例的标签信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showSubnetTags: function (showSubnetTagsRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/{project_id}/subnets/{subnet_id}/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var subnetId;
            if (showSubnetTagsRequest !== null && showSubnetTagsRequest !== undefined) {
                if (showSubnetTagsRequest instanceof ShowSubnetTagsRequest_1.ShowSubnetTagsRequest) {
                    subnetId = showSubnetTagsRequest.subnetId;
                }
                else {
                    subnetId = showSubnetTagsRequest['subnet_id'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling showSubnetTags.');
            }
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询对等连接详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVpcPeering: function (showVpcPeeringRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/vpc/peerings/{peering_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var peeringId;
            if (showVpcPeeringRequest !== null && showVpcPeeringRequest !== undefined) {
                if (showVpcPeeringRequest instanceof ShowVpcPeeringRequest_1.ShowVpcPeeringRequest) {
                    peeringId = showVpcPeeringRequest.peeringId;
                }
                else {
                    peeringId = showVpcPeeringRequest['peering_id'];
                }
            }
            if (peeringId === null || peeringId === undefined) {
                throw new RequiredError('peeringId', 'Required parameter peeringId was null or undefined when calling showVpcPeering.');
            }
            options.pathParams = { 'peering_id': peeringId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新流日志
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateFlowLog: function (updateFlowLogRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/fl/flow_logs/{flowlog_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var flowlogId;
            if (updateFlowLogRequest !== null && updateFlowLogRequest !== undefined) {
                if (updateFlowLogRequest instanceof UpdateFlowLogRequest_1.UpdateFlowLogRequest) {
                    flowlogId = updateFlowLogRequest.flowlogId;
                    body = updateFlowLogRequest.body;
                }
                else {
                    flowlogId = updateFlowLogRequest['flowlog_id'];
                    body = updateFlowLogRequest['body'];
                }
            }
            if (flowlogId === null || flowlogId === undefined) {
                throw new RequiredError('flowlogId', 'Required parameter flowlogId was null or undefined when calling updateFlowLog.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'flowlog_id': flowlogId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新端口。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updatePort: function (updatePortRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/ports/{port_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var portId;
            if (updatePortRequest !== null && updatePortRequest !== undefined) {
                if (updatePortRequest instanceof UpdatePortRequest_1.UpdatePortRequest) {
                    portId = updatePortRequest.portId;
                    body = updatePortRequest.body;
                }
                else {
                    portId = updatePortRequest['port_id'];
                    body = updatePortRequest['body'];
                }
            }
            if (portId === null || portId === undefined) {
                throw new RequiredError('portId', 'Required parameter portId was null or undefined when calling updatePort.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'port_id': portId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新路由表，包括可以更新路由表的名称，描述，以及新增、更新、删除路由条目
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateRouteTable: function (updateRouteTableRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/routetables/{routetable_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var routetableId;
            if (updateRouteTableRequest !== null && updateRouteTableRequest !== undefined) {
                if (updateRouteTableRequest instanceof UpdateRouteTableRequest_1.UpdateRouteTableRequest) {
                    routetableId = updateRouteTableRequest.routetableId;
                    body = updateRouteTableRequest.body;
                }
                else {
                    routetableId = updateRouteTableRequest['routetable_id'];
                    body = updateRouteTableRequest['body'];
                }
            }
            if (routetableId === null || routetableId === undefined) {
                throw new RequiredError('routetableId', 'Required parameter routetableId was null or undefined when calling updateRouteTable.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'routetable_id': routetableId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新子网。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateSubnet: function (updateSubnetRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/vpcs/{vpc_id}/subnets/{subnet_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var vpcId;
            var subnetId;
            if (updateSubnetRequest !== null && updateSubnetRequest !== undefined) {
                if (updateSubnetRequest instanceof UpdateSubnetRequest_1.UpdateSubnetRequest) {
                    vpcId = updateSubnetRequest.vpcId;
                    subnetId = updateSubnetRequest.subnetId;
                    body = updateSubnetRequest.body;
                }
                else {
                    vpcId = updateSubnetRequest['vpc_id'];
                    subnetId = updateSubnetRequest['subnet_id'];
                    body = updateSubnetRequest['body'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling updateSubnet.');
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling updateSubnet.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'vpc_id': vpcId, 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新对等连接。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateVpcPeering: function (updateVpcPeeringRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/vpc/peerings/{peering_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var peeringId;
            if (updateVpcPeeringRequest !== null && updateVpcPeeringRequest !== undefined) {
                if (updateVpcPeeringRequest instanceof UpdateVpcPeeringRequest_1.UpdateVpcPeeringRequest) {
                    peeringId = updateVpcPeeringRequest.peeringId;
                    body = updateVpcPeeringRequest.body;
                }
                else {
                    peeringId = updateVpcPeeringRequest['peering_id'];
                    body = updateVpcPeeringRequest['body'];
                }
            }
            if (peeringId === null || peeringId === undefined) {
                throw new RequiredError('peeringId', 'Required parameter peeringId was null or undefined when calling updateVpcPeering.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'peering_id': peeringId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 申请私有IP。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createPrivateip: function (createPrivateipRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/privateips",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createPrivateipRequest !== null && createPrivateipRequest !== undefined) {
                if (createPrivateipRequest instanceof CreatePrivateipRequest_1.CreatePrivateipRequest) {
                    body = createPrivateipRequest.body;
                }
                else {
                    body = createPrivateipRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除私有IP。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deletePrivateip: function (deletePrivateipRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/privateips/{privateip_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var privateipId;
            if (deletePrivateipRequest !== null && deletePrivateipRequest !== undefined) {
                if (deletePrivateipRequest instanceof DeletePrivateipRequest_1.DeletePrivateipRequest) {
                    privateipId = deletePrivateipRequest.privateipId;
                }
                else {
                    privateipId = deletePrivateipRequest['privateip_id'];
                }
            }
            if (privateipId === null || privateipId === undefined) {
                throw new RequiredError('privateipId', 'Required parameter privateipId was null or undefined when calling deletePrivateip.');
            }
            options.pathParams = { 'privateip_id': privateipId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询指定子网下的私有IP列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listPrivateips: function (listPrivateipsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/subnets/{subnet_id}/privateips",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var subnetId;
            var limit;
            var marker;
            if (listPrivateipsRequest !== null && listPrivateipsRequest !== undefined) {
                if (listPrivateipsRequest instanceof ListPrivateipsRequest_1.ListPrivateipsRequest) {
                    subnetId = listPrivateipsRequest.subnetId;
                    limit = listPrivateipsRequest.limit;
                    marker = listPrivateipsRequest.marker;
                }
                else {
                    subnetId = listPrivateipsRequest['subnet_id'];
                    limit = listPrivateipsRequest['limit'];
                    marker = listPrivateipsRequest['marker'];
                }
            }
            if (subnetId === null || subnetId === undefined) {
                throw new RequiredError('subnetId', 'Required parameter subnetId was null or undefined when calling listPrivateips.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'subnet_id': subnetId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 显示一个指定网络中的IPv4地址使用情况。
         * 包括此网络中的IP总数以及已用IP总数，以及网络下每一个子网的IP地址总数和可用IP地址总数。
         *
         * &gt; 须知
         *
         * - 系统预留地址指的是子网的第1个以及最后4个地址，一般用于网关、DHCP等服务。
         * - 这里以及下文描述的IP地址总数、已用IP地址总数不包含系统预留地址。
         * - 在分配IP时，用户可以指定系统预留的IP地址。但是不论IP是如何分配的，只要是处于系统预留IP地址段的IP均不会被统计到已用IP地址数目和IP地址总数中。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showNetworkIpAvailabilities: function (showNetworkIpAvailabilitiesRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/network-ip-availabilities/{network_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var networkId;
            if (showNetworkIpAvailabilitiesRequest !== null && showNetworkIpAvailabilitiesRequest !== undefined) {
                if (showNetworkIpAvailabilitiesRequest instanceof ShowNetworkIpAvailabilitiesRequest_1.ShowNetworkIpAvailabilitiesRequest) {
                    networkId = showNetworkIpAvailabilitiesRequest.networkId;
                }
                else {
                    networkId = showNetworkIpAvailabilitiesRequest['network_id'];
                }
            }
            if (networkId === null || networkId === undefined) {
                throw new RequiredError('networkId', 'Required parameter networkId was null or undefined when calling showNetworkIpAvailabilities.');
            }
            options.pathParams = { 'network_id': networkId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 指定ID查询私有IP。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showPrivateip: function (showPrivateipRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/privateips/{privateip_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var privateipId;
            if (showPrivateipRequest !== null && showPrivateipRequest !== undefined) {
                if (showPrivateipRequest instanceof ShowPrivateipRequest_1.ShowPrivateipRequest) {
                    privateipId = showPrivateipRequest.privateipId;
                }
                else {
                    privateipId = showPrivateipRequest['privateip_id'];
                }
            }
            if (privateipId === null || privateipId === undefined) {
                throw new RequiredError('privateipId', 'Required parameter privateipId was null or undefined when calling showPrivateip.');
            }
            options.pathParams = { 'privateip_id': privateipId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建安全组
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronCreateSecurityGroup: function (neutronCreateSecurityGroupRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/security-groups",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (neutronCreateSecurityGroupRequest !== null && neutronCreateSecurityGroupRequest !== undefined) {
                if (neutronCreateSecurityGroupRequest instanceof NeutronCreateSecurityGroupRequest_1.NeutronCreateSecurityGroupRequest) {
                    body = neutronCreateSecurityGroupRequest.body;
                }
                else {
                    body = neutronCreateSecurityGroupRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建安全组规则
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronCreateSecurityGroupRule: function (neutronCreateSecurityGroupRuleRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/security-group-rules",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (neutronCreateSecurityGroupRuleRequest !== null && neutronCreateSecurityGroupRuleRequest !== undefined) {
                if (neutronCreateSecurityGroupRuleRequest instanceof NeutronCreateSecurityGroupRuleRequest_1.NeutronCreateSecurityGroupRuleRequest) {
                    body = neutronCreateSecurityGroupRuleRequest.body;
                }
                else {
                    body = neutronCreateSecurityGroupRuleRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除安全组
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronDeleteSecurityGroup: function (neutronDeleteSecurityGroupRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/security-groups/{security_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupId;
            if (neutronDeleteSecurityGroupRequest !== null && neutronDeleteSecurityGroupRequest !== undefined) {
                if (neutronDeleteSecurityGroupRequest instanceof NeutronDeleteSecurityGroupRequest_1.NeutronDeleteSecurityGroupRequest) {
                    securityGroupId = neutronDeleteSecurityGroupRequest.securityGroupId;
                }
                else {
                    securityGroupId = neutronDeleteSecurityGroupRequest['security_group_id'];
                }
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId', 'Required parameter securityGroupId was null or undefined when calling neutronDeleteSecurityGroup.');
            }
            options.pathParams = { 'security_group_id': securityGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除安全组规则
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronDeleteSecurityGroupRule: function (neutronDeleteSecurityGroupRuleRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/security-group-rules/{security_group_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupRuleId;
            if (neutronDeleteSecurityGroupRuleRequest !== null && neutronDeleteSecurityGroupRuleRequest !== undefined) {
                if (neutronDeleteSecurityGroupRuleRequest instanceof NeutronDeleteSecurityGroupRuleRequest_1.NeutronDeleteSecurityGroupRuleRequest) {
                    securityGroupRuleId = neutronDeleteSecurityGroupRuleRequest.securityGroupRuleId;
                }
                else {
                    securityGroupRuleId = neutronDeleteSecurityGroupRuleRequest['security_group_rule_id'];
                }
            }
            if (securityGroupRuleId === null || securityGroupRuleId === undefined) {
                throw new RequiredError('securityGroupRuleId', 'Required parameter securityGroupRuleId was null or undefined when calling neutronDeleteSecurityGroupRule.');
            }
            options.pathParams = { 'security_group_rule_id': securityGroupRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户有权限查看的所有安全组规则。单次查询最多返回2000条数据，超过2000后会返回分页标记。分页查询请参考分页查询
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronListSecurityGroupRules: function (neutronListSecurityGroupRulesRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/security-group-rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var direction;
            var protocol;
            var ethertype;
            var description;
            var remoteIpPrefix;
            var remoteGroupId;
            var securityGroupId;
            var portRangeMax;
            var portRangeMin;
            var tenantId;
            if (neutronListSecurityGroupRulesRequest !== null && neutronListSecurityGroupRulesRequest !== undefined) {
                if (neutronListSecurityGroupRulesRequest instanceof NeutronListSecurityGroupRulesRequest_1.NeutronListSecurityGroupRulesRequest) {
                    limit = neutronListSecurityGroupRulesRequest.limit;
                    marker = neutronListSecurityGroupRulesRequest.marker;
                    id = neutronListSecurityGroupRulesRequest.id;
                    direction = neutronListSecurityGroupRulesRequest.direction;
                    protocol = neutronListSecurityGroupRulesRequest.protocol;
                    ethertype = neutronListSecurityGroupRulesRequest.ethertype;
                    description = neutronListSecurityGroupRulesRequest.description;
                    remoteIpPrefix = neutronListSecurityGroupRulesRequest.remoteIpPrefix;
                    remoteGroupId = neutronListSecurityGroupRulesRequest.remoteGroupId;
                    securityGroupId = neutronListSecurityGroupRulesRequest.securityGroupId;
                    portRangeMax = neutronListSecurityGroupRulesRequest.portRangeMax;
                    portRangeMin = neutronListSecurityGroupRulesRequest.portRangeMin;
                    tenantId = neutronListSecurityGroupRulesRequest.tenantId;
                }
                else {
                    limit = neutronListSecurityGroupRulesRequest['limit'];
                    marker = neutronListSecurityGroupRulesRequest['marker'];
                    id = neutronListSecurityGroupRulesRequest['id'];
                    direction = neutronListSecurityGroupRulesRequest['direction'];
                    protocol = neutronListSecurityGroupRulesRequest['protocol'];
                    ethertype = neutronListSecurityGroupRulesRequest['ethertype'];
                    description = neutronListSecurityGroupRulesRequest['description'];
                    remoteIpPrefix = neutronListSecurityGroupRulesRequest['remote_ip_prefix'];
                    remoteGroupId = neutronListSecurityGroupRulesRequest['remote_group_id'];
                    securityGroupId = neutronListSecurityGroupRulesRequest['security_group_id'];
                    portRangeMax = neutronListSecurityGroupRulesRequest['port_range_max'];
                    portRangeMin = neutronListSecurityGroupRulesRequest['port_range_min'];
                    tenantId = neutronListSecurityGroupRulesRequest['tenant_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (direction !== null && direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }
            if (protocol !== null && protocol !== undefined) {
                localVarQueryParameter['protocol'] = protocol;
            }
            if (ethertype !== null && ethertype !== undefined) {
                localVarQueryParameter['ethertype'] = ethertype;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (remoteIpPrefix !== null && remoteIpPrefix !== undefined) {
                localVarQueryParameter['remote_ip_prefix'] = remoteIpPrefix;
            }
            if (remoteGroupId !== null && remoteGroupId !== undefined) {
                localVarQueryParameter['remote_group_id'] = remoteGroupId;
            }
            if (securityGroupId !== null && securityGroupId !== undefined) {
                localVarQueryParameter['security_group_id'] = securityGroupId;
            }
            if (portRangeMax !== null && portRangeMax !== undefined) {
                localVarQueryParameter['port_range_max'] = portRangeMax;
            }
            if (portRangeMin !== null && portRangeMin !== undefined) {
                localVarQueryParameter['port_range_min'] = portRangeMin;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求租户的所有安全组，单次查询最多返回2000条数据，超过2000后会返回分页标记。分页查询请参考分页查询 。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronListSecurityGroups: function (neutronListSecurityGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/security-groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var name;
            var description;
            var tenantId;
            if (neutronListSecurityGroupsRequest !== null && neutronListSecurityGroupsRequest !== undefined) {
                if (neutronListSecurityGroupsRequest instanceof NeutronListSecurityGroupsRequest_1.NeutronListSecurityGroupsRequest) {
                    limit = neutronListSecurityGroupsRequest.limit;
                    marker = neutronListSecurityGroupsRequest.marker;
                    id = neutronListSecurityGroupsRequest.id;
                    name = neutronListSecurityGroupsRequest.name;
                    description = neutronListSecurityGroupsRequest.description;
                    tenantId = neutronListSecurityGroupsRequest.tenantId;
                }
                else {
                    limit = neutronListSecurityGroupsRequest['limit'];
                    marker = neutronListSecurityGroupsRequest['marker'];
                    id = neutronListSecurityGroupsRequest['id'];
                    name = neutronListSecurityGroupsRequest['name'];
                    description = neutronListSecurityGroupsRequest['description'];
                    tenantId = neutronListSecurityGroupsRequest['tenant_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询安全组详情
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronShowSecurityGroup: function (neutronShowSecurityGroupRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/security-groups/{security_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupId;
            if (neutronShowSecurityGroupRequest !== null && neutronShowSecurityGroupRequest !== undefined) {
                if (neutronShowSecurityGroupRequest instanceof NeutronShowSecurityGroupRequest_1.NeutronShowSecurityGroupRequest) {
                    securityGroupId = neutronShowSecurityGroupRequest.securityGroupId;
                }
                else {
                    securityGroupId = neutronShowSecurityGroupRequest['security_group_id'];
                }
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId', 'Required parameter securityGroupId was null or undefined when calling neutronShowSecurityGroup.');
            }
            options.pathParams = { 'security_group_id': securityGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询安全组规则详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronShowSecurityGroupRule: function (neutronShowSecurityGroupRuleRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/security-group-rules/{security_group_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var securityGroupRuleId;
            if (neutronShowSecurityGroupRuleRequest !== null && neutronShowSecurityGroupRuleRequest !== undefined) {
                if (neutronShowSecurityGroupRuleRequest instanceof NeutronShowSecurityGroupRuleRequest_1.NeutronShowSecurityGroupRuleRequest) {
                    securityGroupRuleId = neutronShowSecurityGroupRuleRequest.securityGroupRuleId;
                }
                else {
                    securityGroupRuleId = neutronShowSecurityGroupRuleRequest['security_group_rule_id'];
                }
            }
            if (securityGroupRuleId === null || securityGroupRuleId === undefined) {
                throw new RequiredError('securityGroupRuleId', 'Required parameter securityGroupRuleId was null or undefined when calling neutronShowSecurityGroupRule.');
            }
            options.pathParams = { 'security_group_rule_id': securityGroupRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新安全组
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronUpdateSecurityGroup: function (neutronUpdateSecurityGroupRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/security-groups/{security_group_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var securityGroupId;
            if (neutronUpdateSecurityGroupRequest !== null && neutronUpdateSecurityGroupRequest !== undefined) {
                if (neutronUpdateSecurityGroupRequest instanceof NeutronUpdateSecurityGroupRequest_1.NeutronUpdateSecurityGroupRequest) {
                    securityGroupId = neutronUpdateSecurityGroupRequest.securityGroupId;
                    body = neutronUpdateSecurityGroupRequest.body;
                }
                else {
                    securityGroupId = neutronUpdateSecurityGroupRequest['security_group_id'];
                    body = neutronUpdateSecurityGroupRequest['body'];
                }
            }
            if (securityGroupId === null || securityGroupId === undefined) {
                throw new RequiredError('securityGroupId', 'Required parameter securityGroupId was null or undefined when calling neutronUpdateSecurityGroup.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'security_group_id': securityGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 插入一条网络ACL规则到某一网络ACL策略中。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronAddFirewallRule: function (neutronAddFirewallRuleRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/fwaas/firewall_policies/{firewall_policy_id}/insert_rule",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var firewallPolicyId;
            if (neutronAddFirewallRuleRequest !== null && neutronAddFirewallRuleRequest !== undefined) {
                if (neutronAddFirewallRuleRequest instanceof NeutronAddFirewallRuleRequest_1.NeutronAddFirewallRuleRequest) {
                    firewallPolicyId = neutronAddFirewallRuleRequest.firewallPolicyId;
                    body = neutronAddFirewallRuleRequest.body;
                }
                else {
                    firewallPolicyId = neutronAddFirewallRuleRequest['firewall_policy_id'];
                    body = neutronAddFirewallRuleRequest['body'];
                }
            }
            if (firewallPolicyId === null || firewallPolicyId === undefined) {
                throw new RequiredError('firewallPolicyId', 'Required parameter firewallPolicyId was null or undefined when calling neutronAddFirewallRule.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'firewall_policy_id': firewallPolicyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建网络ACL组
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronCreateFirewallGroup: function (neutronCreateFirewallGroupRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/fwaas/firewall_groups",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (neutronCreateFirewallGroupRequest !== null && neutronCreateFirewallGroupRequest !== undefined) {
                if (neutronCreateFirewallGroupRequest instanceof NeutronCreateFirewallGroupRequest_1.NeutronCreateFirewallGroupRequest) {
                    body = neutronCreateFirewallGroupRequest.body;
                }
                else {
                    body = neutronCreateFirewallGroupRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建网络ACL策略。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronCreateFirewallPolicy: function (neutronCreateFirewallPolicyRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/fwaas/firewall_policies",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (neutronCreateFirewallPolicyRequest !== null && neutronCreateFirewallPolicyRequest !== undefined) {
                if (neutronCreateFirewallPolicyRequest instanceof NeutronCreateFirewallPolicyRequest_1.NeutronCreateFirewallPolicyRequest) {
                    body = neutronCreateFirewallPolicyRequest.body;
                }
                else {
                    body = neutronCreateFirewallPolicyRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建网络ACL规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronCreateFirewallRule: function (neutronCreateFirewallRuleRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/fwaas/firewall_rules",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (neutronCreateFirewallRuleRequest !== null && neutronCreateFirewallRuleRequest !== undefined) {
                if (neutronCreateFirewallRuleRequest instanceof NeutronCreateFirewallRuleRequest_1.NeutronCreateFirewallRuleRequest) {
                    body = neutronCreateFirewallRuleRequest.body;
                }
                else {
                    body = neutronCreateFirewallRuleRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除网络ACL组
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronDeleteFirewallGroup: function (neutronDeleteFirewallGroupRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/fwaas/firewall_groups/{firewall_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallGroupId;
            if (neutronDeleteFirewallGroupRequest !== null && neutronDeleteFirewallGroupRequest !== undefined) {
                if (neutronDeleteFirewallGroupRequest instanceof NeutronDeleteFirewallGroupRequest_1.NeutronDeleteFirewallGroupRequest) {
                    firewallGroupId = neutronDeleteFirewallGroupRequest.firewallGroupId;
                }
                else {
                    firewallGroupId = neutronDeleteFirewallGroupRequest['firewall_group_id'];
                }
            }
            if (firewallGroupId === null || firewallGroupId === undefined) {
                throw new RequiredError('firewallGroupId', 'Required parameter firewallGroupId was null or undefined when calling neutronDeleteFirewallGroup.');
            }
            options.pathParams = { 'firewall_group_id': firewallGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除网络ACL策略。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronDeleteFirewallPolicy: function (neutronDeleteFirewallPolicyRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/fwaas/firewall_policies/{firewall_policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallPolicyId;
            if (neutronDeleteFirewallPolicyRequest !== null && neutronDeleteFirewallPolicyRequest !== undefined) {
                if (neutronDeleteFirewallPolicyRequest instanceof NeutronDeleteFirewallPolicyRequest_1.NeutronDeleteFirewallPolicyRequest) {
                    firewallPolicyId = neutronDeleteFirewallPolicyRequest.firewallPolicyId;
                }
                else {
                    firewallPolicyId = neutronDeleteFirewallPolicyRequest['firewall_policy_id'];
                }
            }
            if (firewallPolicyId === null || firewallPolicyId === undefined) {
                throw new RequiredError('firewallPolicyId', 'Required parameter firewallPolicyId was null or undefined when calling neutronDeleteFirewallPolicy.');
            }
            options.pathParams = { 'firewall_policy_id': firewallPolicyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除网络ACL规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronDeleteFirewallRule: function (neutronDeleteFirewallRuleRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/fwaas/firewall_rules/{firewall_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallRuleId;
            if (neutronDeleteFirewallRuleRequest !== null && neutronDeleteFirewallRuleRequest !== undefined) {
                if (neutronDeleteFirewallRuleRequest instanceof NeutronDeleteFirewallRuleRequest_1.NeutronDeleteFirewallRuleRequest) {
                    firewallRuleId = neutronDeleteFirewallRuleRequest.firewallRuleId;
                }
                else {
                    firewallRuleId = neutronDeleteFirewallRuleRequest['firewall_rule_id'];
                }
            }
            if (firewallRuleId === null || firewallRuleId === undefined) {
                throw new RequiredError('firewallRuleId', 'Required parameter firewallRuleId was null or undefined when calling neutronDeleteFirewallRule.');
            }
            options.pathParams = { 'firewall_rule_id': firewallRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户有权限操作的所有网络ACL组信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronListFirewallGroups: function (neutronListFirewallGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var marker;
            var limit;
            var id;
            var name;
            var description;
            var ingressFirewallPolicyId;
            var egressFirewallPolicyId;
            if (neutronListFirewallGroupsRequest !== null && neutronListFirewallGroupsRequest !== undefined) {
                if (neutronListFirewallGroupsRequest instanceof NeutronListFirewallGroupsRequest_1.NeutronListFirewallGroupsRequest) {
                    marker = neutronListFirewallGroupsRequest.marker;
                    limit = neutronListFirewallGroupsRequest.limit;
                    id = neutronListFirewallGroupsRequest.id;
                    name = neutronListFirewallGroupsRequest.name;
                    description = neutronListFirewallGroupsRequest.description;
                    ingressFirewallPolicyId = neutronListFirewallGroupsRequest.ingressFirewallPolicyId;
                    egressFirewallPolicyId = neutronListFirewallGroupsRequest.egressFirewallPolicyId;
                }
                else {
                    marker = neutronListFirewallGroupsRequest['marker'];
                    limit = neutronListFirewallGroupsRequest['limit'];
                    id = neutronListFirewallGroupsRequest['id'];
                    name = neutronListFirewallGroupsRequest['name'];
                    description = neutronListFirewallGroupsRequest['description'];
                    ingressFirewallPolicyId = neutronListFirewallGroupsRequest['ingress_firewall_policy_id'];
                    egressFirewallPolicyId = neutronListFirewallGroupsRequest['egress_firewall_policy_id'];
                }
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (ingressFirewallPolicyId !== null && ingressFirewallPolicyId !== undefined) {
                localVarQueryParameter['ingress_firewall_policy_id'] = ingressFirewallPolicyId;
            }
            if (egressFirewallPolicyId !== null && egressFirewallPolicyId !== undefined) {
                localVarQueryParameter['egress_firewall_policy_id'] = egressFirewallPolicyId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户有权限操作的所有网络ACL策略信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronListFirewallPolicies: function (neutronListFirewallPoliciesRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_policies",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var name;
            var description;
            var tenantId;
            if (neutronListFirewallPoliciesRequest !== null && neutronListFirewallPoliciesRequest !== undefined) {
                if (neutronListFirewallPoliciesRequest instanceof NeutronListFirewallPoliciesRequest_1.NeutronListFirewallPoliciesRequest) {
                    limit = neutronListFirewallPoliciesRequest.limit;
                    marker = neutronListFirewallPoliciesRequest.marker;
                    id = neutronListFirewallPoliciesRequest.id;
                    name = neutronListFirewallPoliciesRequest.name;
                    description = neutronListFirewallPoliciesRequest.description;
                    tenantId = neutronListFirewallPoliciesRequest.tenantId;
                }
                else {
                    limit = neutronListFirewallPoliciesRequest['limit'];
                    marker = neutronListFirewallPoliciesRequest['marker'];
                    id = neutronListFirewallPoliciesRequest['id'];
                    name = neutronListFirewallPoliciesRequest['name'];
                    description = neutronListFirewallPoliciesRequest['description'];
                    tenantId = neutronListFirewallPoliciesRequest['tenant_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户有权限操作的所有网络ACL规则信息。单次查询最多返回2000条数据，超过2000后会返回分页标记。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronListFirewallRules: function (neutronListFirewallRulesRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var marker;
            var limit;
            var id;
            var name;
            var description;
            var action;
            var tenantId;
            if (neutronListFirewallRulesRequest !== null && neutronListFirewallRulesRequest !== undefined) {
                if (neutronListFirewallRulesRequest instanceof NeutronListFirewallRulesRequest_1.NeutronListFirewallRulesRequest) {
                    marker = neutronListFirewallRulesRequest.marker;
                    limit = neutronListFirewallRulesRequest.limit;
                    id = neutronListFirewallRulesRequest.id;
                    name = neutronListFirewallRulesRequest.name;
                    description = neutronListFirewallRulesRequest.description;
                    action = neutronListFirewallRulesRequest.action;
                    tenantId = neutronListFirewallRulesRequest.tenantId;
                }
                else {
                    marker = neutronListFirewallRulesRequest['marker'];
                    limit = neutronListFirewallRulesRequest['limit'];
                    id = neutronListFirewallRulesRequest['id'];
                    name = neutronListFirewallRulesRequest['name'];
                    description = neutronListFirewallRulesRequest['description'];
                    action = neutronListFirewallRulesRequest['action'];
                    tenantId = neutronListFirewallRulesRequest['tenant_id'];
                }
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (description !== null && description !== undefined) {
                localVarQueryParameter['description'] = description;
            }
            if (action !== null && action !== undefined) {
                localVarQueryParameter['action'] = action;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 从某一网络ACL策略中移除一条网络ACL规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronRemoveFirewallRule: function (neutronRemoveFirewallRuleRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/fwaas/firewall_policies/{firewall_policy_id}/remove_rule",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var firewallPolicyId;
            if (neutronRemoveFirewallRuleRequest !== null && neutronRemoveFirewallRuleRequest !== undefined) {
                if (neutronRemoveFirewallRuleRequest instanceof NeutronRemoveFirewallRuleRequest_1.NeutronRemoveFirewallRuleRequest) {
                    firewallPolicyId = neutronRemoveFirewallRuleRequest.firewallPolicyId;
                    body = neutronRemoveFirewallRuleRequest.body;
                }
                else {
                    firewallPolicyId = neutronRemoveFirewallRuleRequest['firewall_policy_id'];
                    body = neutronRemoveFirewallRuleRequest['body'];
                }
            }
            if (firewallPolicyId === null || firewallPolicyId === undefined) {
                throw new RequiredError('firewallPolicyId', 'Required parameter firewallPolicyId was null or undefined when calling neutronRemoveFirewallRule.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'firewall_policy_id': firewallPolicyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询特定网络ACL组详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronShowFirewallGroup: function (neutronShowFirewallGroupRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_groups/{firewall_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallGroupId;
            if (neutronShowFirewallGroupRequest !== null && neutronShowFirewallGroupRequest !== undefined) {
                if (neutronShowFirewallGroupRequest instanceof NeutronShowFirewallGroupRequest_1.NeutronShowFirewallGroupRequest) {
                    firewallGroupId = neutronShowFirewallGroupRequest.firewallGroupId;
                }
                else {
                    firewallGroupId = neutronShowFirewallGroupRequest['firewall_group_id'];
                }
            }
            if (firewallGroupId === null || firewallGroupId === undefined) {
                throw new RequiredError('firewallGroupId', 'Required parameter firewallGroupId was null or undefined when calling neutronShowFirewallGroup.');
            }
            options.pathParams = { 'firewall_group_id': firewallGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询特定网络ACL策略详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronShowFirewallPolicy: function (neutronShowFirewallPolicyRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_policies/{firewall_policy_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallPolicyId;
            if (neutronShowFirewallPolicyRequest !== null && neutronShowFirewallPolicyRequest !== undefined) {
                if (neutronShowFirewallPolicyRequest instanceof NeutronShowFirewallPolicyRequest_1.NeutronShowFirewallPolicyRequest) {
                    firewallPolicyId = neutronShowFirewallPolicyRequest.firewallPolicyId;
                }
                else {
                    firewallPolicyId = neutronShowFirewallPolicyRequest['firewall_policy_id'];
                }
            }
            if (firewallPolicyId === null || firewallPolicyId === undefined) {
                throw new RequiredError('firewallPolicyId', 'Required parameter firewallPolicyId was null or undefined when calling neutronShowFirewallPolicy.');
            }
            options.pathParams = { 'firewall_policy_id': firewallPolicyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询特定网络ACL规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronShowFirewallRule: function (neutronShowFirewallRuleRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/fwaas/firewall_rules/{firewall_rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var firewallRuleId;
            if (neutronShowFirewallRuleRequest !== null && neutronShowFirewallRuleRequest !== undefined) {
                if (neutronShowFirewallRuleRequest instanceof NeutronShowFirewallRuleRequest_1.NeutronShowFirewallRuleRequest) {
                    firewallRuleId = neutronShowFirewallRuleRequest.firewallRuleId;
                }
                else {
                    firewallRuleId = neutronShowFirewallRuleRequest['firewall_rule_id'];
                }
            }
            if (firewallRuleId === null || firewallRuleId === undefined) {
                throw new RequiredError('firewallRuleId', 'Required parameter firewallRuleId was null or undefined when calling neutronShowFirewallRule.');
            }
            options.pathParams = { 'firewall_rule_id': firewallRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新网络ACL组。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronUpdateFirewallGroup: function (neutronUpdateFirewallGroupRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/fwaas/firewall_groups/{firewall_group_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var firewallGroupId;
            if (neutronUpdateFirewallGroupRequest !== null && neutronUpdateFirewallGroupRequest !== undefined) {
                if (neutronUpdateFirewallGroupRequest instanceof NeutronUpdateFirewallGroupRequest_1.NeutronUpdateFirewallGroupRequest) {
                    firewallGroupId = neutronUpdateFirewallGroupRequest.firewallGroupId;
                    body = neutronUpdateFirewallGroupRequest.body;
                }
                else {
                    firewallGroupId = neutronUpdateFirewallGroupRequest['firewall_group_id'];
                    body = neutronUpdateFirewallGroupRequest['body'];
                }
            }
            if (firewallGroupId === null || firewallGroupId === undefined) {
                throw new RequiredError('firewallGroupId', 'Required parameter firewallGroupId was null or undefined when calling neutronUpdateFirewallGroup.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'firewall_group_id': firewallGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新网络ACL策略。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronUpdateFirewallPolicy: function (neutronUpdateFirewallPolicyRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/fwaas/firewall_policies/{firewall_policy_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var firewallPolicyId;
            if (neutronUpdateFirewallPolicyRequest !== null && neutronUpdateFirewallPolicyRequest !== undefined) {
                if (neutronUpdateFirewallPolicyRequest instanceof NeutronUpdateFirewallPolicyRequest_1.NeutronUpdateFirewallPolicyRequest) {
                    firewallPolicyId = neutronUpdateFirewallPolicyRequest.firewallPolicyId;
                    body = neutronUpdateFirewallPolicyRequest.body;
                }
                else {
                    firewallPolicyId = neutronUpdateFirewallPolicyRequest['firewall_policy_id'];
                    body = neutronUpdateFirewallPolicyRequest['body'];
                }
            }
            if (firewallPolicyId === null || firewallPolicyId === undefined) {
                throw new RequiredError('firewallPolicyId', 'Required parameter firewallPolicyId was null or undefined when calling neutronUpdateFirewallPolicy.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'firewall_policy_id': firewallPolicyId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新网络ACL规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        neutronUpdateFirewallRule: function (neutronUpdateFirewallRuleRequest) {
            var options = {
                method: "PUT",
                url: "/v2.0/fwaas/firewall_rules/{firewall_rule_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var firewallRuleId;
            if (neutronUpdateFirewallRuleRequest !== null && neutronUpdateFirewallRuleRequest !== undefined) {
                if (neutronUpdateFirewallRuleRequest instanceof NeutronUpdateFirewallRuleRequest_1.NeutronUpdateFirewallRuleRequest) {
                    firewallRuleId = neutronUpdateFirewallRuleRequest.firewallRuleId;
                    body = neutronUpdateFirewallRuleRequest.body;
                }
                else {
                    firewallRuleId = neutronUpdateFirewallRuleRequest['firewall_rule_id'];
                    body = neutronUpdateFirewallRuleRequest['body'];
                }
            }
            if (firewallRuleId === null || firewallRuleId === undefined) {
                throw new RequiredError('firewallRuleId', 'Required parameter firewallRuleId was null or undefined when calling neutronUpdateFirewallRule.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'firewall_rule_id': firewallRuleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为指定的VPC资源实例批量添加标签。
         * 此接口为幂等接口：创建时如果请求体中存在重复key则报错。创建时，不允许设置重复key数据，如果数据库已存在该key，就覆盖value的值。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchCreateVpcTags: function (batchCreateVpcTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/vpcs/{vpc_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var vpcId;
            if (batchCreateVpcTagsRequest !== null && batchCreateVpcTagsRequest !== undefined) {
                if (batchCreateVpcTagsRequest instanceof BatchCreateVpcTagsRequest_1.BatchCreateVpcTagsRequest) {
                    vpcId = batchCreateVpcTagsRequest.vpcId;
                    body = batchCreateVpcTagsRequest.body;
                }
                else {
                    vpcId = batchCreateVpcTagsRequest['vpc_id'];
                    body = batchCreateVpcTagsRequest['body'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling batchCreateVpcTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为指定的VPC资源实例批量删除标签。
         * 此接口为幂等接口：删除时，如果删除的标签不存在，默认处理成功；删除时不对标签字符集范围做校验。删除时tags结构体不能缺失，key不能为空，或者空字符串。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchDeleteVpcTags: function (batchDeleteVpcTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/vpcs/{vpc_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var vpcId;
            if (batchDeleteVpcTagsRequest !== null && batchDeleteVpcTagsRequest !== undefined) {
                if (batchDeleteVpcTagsRequest instanceof BatchDeleteVpcTagsRequest_1.BatchDeleteVpcTagsRequest) {
                    vpcId = batchDeleteVpcTagsRequest.vpcId;
                    body = batchDeleteVpcTagsRequest.body;
                }
                else {
                    vpcId = batchDeleteVpcTagsRequest['vpc_id'];
                    body = batchDeleteVpcTagsRequest['body'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling batchDeleteVpcTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建虚拟私有云。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createVpc: function (createVpcRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/vpcs",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createVpcRequest !== null && createVpcRequest !== undefined) {
                if (createVpcRequest instanceof CreateVpcRequest_1.CreateVpcRequest) {
                    body = createVpcRequest.body;
                }
                else {
                    body = createVpcRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 给指定VPC资源实例增加标签信息
         * 此接口为幂等接口：创建时，如果创建的标签已经存在（key相同），则覆盖。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createVpcResourceTag: function (createVpcResourceTagRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/vpcs/{vpc_id}/tags",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var vpcId;
            if (createVpcResourceTagRequest !== null && createVpcResourceTagRequest !== undefined) {
                if (createVpcResourceTagRequest instanceof CreateVpcResourceTagRequest_1.CreateVpcResourceTagRequest) {
                    vpcId = createVpcResourceTagRequest.vpcId;
                    body = createVpcResourceTagRequest.body;
                }
                else {
                    vpcId = createVpcResourceTagRequest['vpc_id'];
                    body = createVpcResourceTagRequest['body'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling createVpcResourceTag.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建路由
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createVpcRoute: function (createVpcRouteRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/vpc/routes",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createVpcRouteRequest !== null && createVpcRouteRequest !== undefined) {
                if (createVpcRouteRequest instanceof CreateVpcRouteRequest_1.CreateVpcRouteRequest) {
                    body = createVpcRouteRequest.body;
                }
                else {
                    body = createVpcRouteRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除虚拟私有云。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteVpc: function (deleteVpcRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/vpcs/{vpc_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var vpcId;
            if (deleteVpcRequest !== null && deleteVpcRequest !== undefined) {
                if (deleteVpcRequest instanceof DeleteVpcRequest_1.DeleteVpcRequest) {
                    vpcId = deleteVpcRequest.vpcId;
                }
                else {
                    vpcId = deleteVpcRequest['vpc_id'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling deleteVpc.');
            }
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除路由
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteVpcRoute: function (deleteVpcRouteRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/vpc/routes/{route_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var routeId;
            if (deleteVpcRouteRequest !== null && deleteVpcRouteRequest !== undefined) {
                if (deleteVpcRouteRequest instanceof DeleteVpcRouteRequest_1.DeleteVpcRouteRequest) {
                    routeId = deleteVpcRouteRequest.routeId;
                }
                else {
                    routeId = deleteVpcRouteRequest['route_id'];
                }
            }
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId', 'Required parameter routeId was null or undefined when calling deleteVpcRoute.');
            }
            options.pathParams = { 'route_id': routeId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定VPC资源实例的标签信息
         * 该接口为幂等接口：删除的key不存在报404，Key不能为空或者空字符串
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteVpcTag: function (deleteVpcTagRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.0/{project_id}/vpcs/{vpc_id}/tags/{key}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var vpcId;
            var key;
            if (deleteVpcTagRequest !== null && deleteVpcTagRequest !== undefined) {
                if (deleteVpcTagRequest instanceof DeleteVpcTagRequest_1.DeleteVpcTagRequest) {
                    vpcId = deleteVpcTagRequest.vpcId;
                    key = deleteVpcTagRequest.key;
                }
                else {
                    vpcId = deleteVpcTagRequest['vpc_id'];
                    key = deleteVpcTagRequest['key'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling deleteVpcTag.');
            }
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling deleteVpcTag.');
            }
            options.pathParams = { 'vpc_id': vpcId, 'key': key, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询提交请求的租户的所有路由列表，并根据过滤条件进行过滤。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVpcRoutes: function (listVpcRoutesRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/vpc/routes",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var type;
            var vpcId;
            var destination;
            var tenantId;
            if (listVpcRoutesRequest !== null && listVpcRoutesRequest !== undefined) {
                if (listVpcRoutesRequest instanceof ListVpcRoutesRequest_1.ListVpcRoutesRequest) {
                    limit = listVpcRoutesRequest.limit;
                    marker = listVpcRoutesRequest.marker;
                    id = listVpcRoutesRequest.id;
                    type = listVpcRoutesRequest.type;
                    vpcId = listVpcRoutesRequest.vpcId;
                    destination = listVpcRoutesRequest.destination;
                    tenantId = listVpcRoutesRequest.tenantId;
                }
                else {
                    limit = listVpcRoutesRequest['limit'];
                    marker = listVpcRoutesRequest['marker'];
                    id = listVpcRoutesRequest['id'];
                    type = listVpcRoutesRequest['type'];
                    vpcId = listVpcRoutesRequest['vpc_id'];
                    destination = listVpcRoutesRequest['destination'];
                    tenantId = listVpcRoutesRequest['tenant_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (type !== null && type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (vpcId !== null && vpcId !== undefined) {
                localVarQueryParameter['vpc_id'] = vpcId;
            }
            if (destination !== null && destination !== undefined) {
                localVarQueryParameter['destination'] = destination;
            }
            if (tenantId !== null && tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询租户在指定区域和实例类型的所有标签集合
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVpcTags: function () {
            var options = {
                method: "GET",
                url: "/v2.0/{project_id}/vpcs/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询虚拟私有云列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVpcs: function (listVpcsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/vpcs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var id;
            var enterpriseProjectId;
            if (listVpcsRequest !== null && listVpcsRequest !== undefined) {
                if (listVpcsRequest instanceof ListVpcsRequest_1.ListVpcsRequest) {
                    limit = listVpcsRequest.limit;
                    marker = listVpcsRequest.marker;
                    id = listVpcsRequest.id;
                    enterpriseProjectId = listVpcsRequest.enterpriseProjectId;
                }
                else {
                    limit = listVpcsRequest['limit'];
                    marker = listVpcsRequest['marker'];
                    id = listVpcsRequest['id'];
                    enterpriseProjectId = listVpcsRequest['enterprise_project_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (id !== null && id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 使用标签过滤实例。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listVpcsByTags: function (listVpcsByTagsRequest) {
            var options = {
                method: "POST",
                url: "/v2.0/{project_id}/vpcs/resource_instances/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (listVpcsByTagsRequest !== null && listVpcsByTagsRequest !== undefined) {
                if (listVpcsByTagsRequest instanceof ListVpcsByTagsRequest_1.ListVpcsByTagsRequest) {
                    body = listVpcsByTagsRequest.body;
                }
                else {
                    body = listVpcsByTagsRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询虚拟私有云。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVpc: function (showVpcRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/vpcs/{vpc_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var vpcId;
            if (showVpcRequest !== null && showVpcRequest !== undefined) {
                if (showVpcRequest instanceof ShowVpcRequest_1.ShowVpcRequest) {
                    vpcId = showVpcRequest.vpcId;
                }
                else {
                    vpcId = showVpcRequest['vpc_id'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling showVpc.');
            }
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询路由详情
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVpcRoute: function (showVpcRouteRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/vpc/routes/{route_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var routeId;
            if (showVpcRouteRequest !== null && showVpcRouteRequest !== undefined) {
                if (showVpcRouteRequest instanceof ShowVpcRouteRequest_1.ShowVpcRouteRequest) {
                    routeId = showVpcRouteRequest.routeId;
                }
                else {
                    routeId = showVpcRouteRequest['route_id'];
                }
            }
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId', 'Required parameter routeId was null or undefined when calling showVpcRoute.');
            }
            options.pathParams = { 'route_id': routeId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询指定VPC实例的标签信息
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showVpcTags: function (showVpcTagsRequest) {
            var options = {
                method: "GET",
                url: "/v2.0/{project_id}/vpcs/{vpc_id}/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var vpcId;
            if (showVpcTagsRequest !== null && showVpcTagsRequest !== undefined) {
                if (showVpcTagsRequest instanceof ShowVpcTagsRequest_1.ShowVpcTagsRequest) {
                    vpcId = showVpcTagsRequest.vpcId;
                }
                else {
                    vpcId = showVpcTagsRequest['vpc_id'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling showVpcTags.');
            }
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新虚拟私有云。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateVpc: function (updateVpcRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/vpcs/{vpc_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var vpcId;
            if (updateVpcRequest !== null && updateVpcRequest !== undefined) {
                if (updateVpcRequest instanceof UpdateVpcRequest_1.UpdateVpcRequest) {
                    vpcId = updateVpcRequest.vpcId;
                    body = updateVpcRequest.body;
                }
                else {
                    vpcId = updateVpcRequest['vpc_id'];
                    body = updateVpcRequest['body'];
                }
            }
            if (vpcId === null || vpcId === undefined) {
                throw new RequiredError('vpcId', 'Required parameter vpcId was null or undefined when calling updateVpc.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'vpc_id': vpcId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    };
};
exports.ParamCreater = ParamCreater;
function newClient(client) {
    return new VpcClient(client);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
