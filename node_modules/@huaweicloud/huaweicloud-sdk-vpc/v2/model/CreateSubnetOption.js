"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateSubnetOption = void 0;
var CreateSubnetOption = /** @class */ (function () {
    function CreateSubnetOption(name, cidr, vpcId, gatewayIp) {
        this['name'] = name;
        this['cidr'] = cidr;
        this['vpc_id'] = vpcId;
        this['gateway_ip'] = gatewayIp;
    }
    CreateSubnetOption.prototype.withName = function (name) {
        this['name'] = name;
        return this;
    };
    CreateSubnetOption.prototype.withDescription = function (description) {
        this['description'] = description;
        return this;
    };
    CreateSubnetOption.prototype.withCidr = function (cidr) {
        this['cidr'] = cidr;
        return this;
    };
    CreateSubnetOption.prototype.withVpcId = function (vpcId) {
        this['vpc_id'] = vpcId;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "vpcId", {
        get: function () {
            return this['vpc_id'];
        },
        set: function (vpcId) {
            this['vpc_id'] = vpcId;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withGatewayIp = function (gatewayIp) {
        this['gateway_ip'] = gatewayIp;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "gatewayIp", {
        get: function () {
            return this['gateway_ip'];
        },
        set: function (gatewayIp) {
            this['gateway_ip'] = gatewayIp;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withIpv6Enable = function (ipv6Enable) {
        this['ipv6_enable'] = ipv6Enable;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "ipv6Enable", {
        get: function () {
            return this['ipv6_enable'];
        },
        set: function (ipv6Enable) {
            this['ipv6_enable'] = ipv6Enable;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withDhcpEnable = function (dhcpEnable) {
        this['dhcp_enable'] = dhcpEnable;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "dhcpEnable", {
        get: function () {
            return this['dhcp_enable'];
        },
        set: function (dhcpEnable) {
            this['dhcp_enable'] = dhcpEnable;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withPrimaryDns = function (primaryDns) {
        this['primary_dns'] = primaryDns;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "primaryDns", {
        get: function () {
            return this['primary_dns'];
        },
        set: function (primaryDns) {
            this['primary_dns'] = primaryDns;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withSecondaryDns = function (secondaryDns) {
        this['secondary_dns'] = secondaryDns;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "secondaryDns", {
        get: function () {
            return this['secondary_dns'];
        },
        set: function (secondaryDns) {
            this['secondary_dns'] = secondaryDns;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withDnsList = function (dnsList) {
        this['dnsList'] = dnsList;
        return this;
    };
    CreateSubnetOption.prototype.withAvailabilityZone = function (availabilityZone) {
        this['availability_zone'] = availabilityZone;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "availabilityZone", {
        get: function () {
            return this['availability_zone'];
        },
        set: function (availabilityZone) {
            this['availability_zone'] = availabilityZone;
        },
        enumerable: false,
        configurable: true
    });
    CreateSubnetOption.prototype.withExtraDhcpOpts = function (extraDhcpOpts) {
        this['extra_dhcp_opts'] = extraDhcpOpts;
        return this;
    };
    Object.defineProperty(CreateSubnetOption.prototype, "extraDhcpOpts", {
        get: function () {
            return this['extra_dhcp_opts'];
        },
        set: function (extraDhcpOpts) {
            this['extra_dhcp_opts'] = extraDhcpOpts;
        },
        enumerable: false,
        configurable: true
    });
    return CreateSubnetOption;
}());
exports.CreateSubnetOption = CreateSubnetOption;
