"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortStatusEnum = exports.PortDeviceOwnerEnum = exports.Port = void 0;
var Port = /** @class */ (function () {
    function Port(id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, securityGroups, allowedAddressPairs, extraDhcpOpts, bindingVnicType, dnsAssignment, dnsName, bindingVifDetails, bindingProfile, instanceId, instanceType, portSecurityEnabled, zoneId) {
        this['id'] = id;
        this['name'] = name;
        this['network_id'] = networkId;
        this['admin_state_up'] = adminStateUp;
        this['mac_address'] = macAddress;
        this['fixed_ips'] = fixedIps;
        this['device_id'] = deviceId;
        this['device_owner'] = deviceOwner;
        this['tenant_id'] = tenantId;
        this['status'] = status;
        this['security_groups'] = securityGroups;
        this['allowed_address_pairs'] = allowedAddressPairs;
        this['extra_dhcp_opts'] = extraDhcpOpts;
        this['binding:vnic_type'] = bindingVnicType;
        this['dns_assignment'] = dnsAssignment;
        this['dns_name'] = dnsName;
        this['binding:vif_details'] = bindingVifDetails;
        this['binding:profile'] = bindingProfile;
        this['instance_id'] = instanceId;
        this['instance_type'] = instanceType;
        this['port_security_enabled'] = portSecurityEnabled;
        this['zone_id'] = zoneId;
    }
    Port.prototype.withId = function (id) {
        this['id'] = id;
        return this;
    };
    Port.prototype.withName = function (name) {
        this['name'] = name;
        return this;
    };
    Port.prototype.withNetworkId = function (networkId) {
        this['network_id'] = networkId;
        return this;
    };
    Object.defineProperty(Port.prototype, "networkId", {
        get: function () {
            return this['network_id'];
        },
        set: function (networkId) {
            this['network_id'] = networkId;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withAdminStateUp = function (adminStateUp) {
        this['admin_state_up'] = adminStateUp;
        return this;
    };
    Object.defineProperty(Port.prototype, "adminStateUp", {
        get: function () {
            return this['admin_state_up'];
        },
        set: function (adminStateUp) {
            this['admin_state_up'] = adminStateUp;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withMacAddress = function (macAddress) {
        this['mac_address'] = macAddress;
        return this;
    };
    Object.defineProperty(Port.prototype, "macAddress", {
        get: function () {
            return this['mac_address'];
        },
        set: function (macAddress) {
            this['mac_address'] = macAddress;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withFixedIps = function (fixedIps) {
        this['fixed_ips'] = fixedIps;
        return this;
    };
    Object.defineProperty(Port.prototype, "fixedIps", {
        get: function () {
            return this['fixed_ips'];
        },
        set: function (fixedIps) {
            this['fixed_ips'] = fixedIps;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withDeviceId = function (deviceId) {
        this['device_id'] = deviceId;
        return this;
    };
    Object.defineProperty(Port.prototype, "deviceId", {
        get: function () {
            return this['device_id'];
        },
        set: function (deviceId) {
            this['device_id'] = deviceId;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withDeviceOwner = function (deviceOwner) {
        this['device_owner'] = deviceOwner;
        return this;
    };
    Object.defineProperty(Port.prototype, "deviceOwner", {
        get: function () {
            return this['device_owner'];
        },
        set: function (deviceOwner) {
            this['device_owner'] = deviceOwner;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withTenantId = function (tenantId) {
        this['tenant_id'] = tenantId;
        return this;
    };
    Object.defineProperty(Port.prototype, "tenantId", {
        get: function () {
            return this['tenant_id'];
        },
        set: function (tenantId) {
            this['tenant_id'] = tenantId;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withStatus = function (status) {
        this['status'] = status;
        return this;
    };
    Port.prototype.withSecurityGroups = function (securityGroups) {
        this['security_groups'] = securityGroups;
        return this;
    };
    Object.defineProperty(Port.prototype, "securityGroups", {
        get: function () {
            return this['security_groups'];
        },
        set: function (securityGroups) {
            this['security_groups'] = securityGroups;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withAllowedAddressPairs = function (allowedAddressPairs) {
        this['allowed_address_pairs'] = allowedAddressPairs;
        return this;
    };
    Object.defineProperty(Port.prototype, "allowedAddressPairs", {
        get: function () {
            return this['allowed_address_pairs'];
        },
        set: function (allowedAddressPairs) {
            this['allowed_address_pairs'] = allowedAddressPairs;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withExtraDhcpOpts = function (extraDhcpOpts) {
        this['extra_dhcp_opts'] = extraDhcpOpts;
        return this;
    };
    Object.defineProperty(Port.prototype, "extraDhcpOpts", {
        get: function () {
            return this['extra_dhcp_opts'];
        },
        set: function (extraDhcpOpts) {
            this['extra_dhcp_opts'] = extraDhcpOpts;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withBindingVnicType = function (bindingVnicType) {
        this['binding:vnic_type'] = bindingVnicType;
        return this;
    };
    Object.defineProperty(Port.prototype, "bindingVnicType", {
        get: function () {
            return this['binding:vnic_type'];
        },
        set: function (bindingVnicType) {
            this['binding:vnic_type'] = bindingVnicType;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withDnsAssignment = function (dnsAssignment) {
        this['dns_assignment'] = dnsAssignment;
        return this;
    };
    Object.defineProperty(Port.prototype, "dnsAssignment", {
        get: function () {
            return this['dns_assignment'];
        },
        set: function (dnsAssignment) {
            this['dns_assignment'] = dnsAssignment;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withDnsName = function (dnsName) {
        this['dns_name'] = dnsName;
        return this;
    };
    Object.defineProperty(Port.prototype, "dnsName", {
        get: function () {
            return this['dns_name'];
        },
        set: function (dnsName) {
            this['dns_name'] = dnsName;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withBindingVifDetails = function (bindingVifDetails) {
        this['binding:vif_details'] = bindingVifDetails;
        return this;
    };
    Object.defineProperty(Port.prototype, "bindingVifDetails", {
        get: function () {
            return this['binding:vif_details'];
        },
        set: function (bindingVifDetails) {
            this['binding:vif_details'] = bindingVifDetails;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withBindingProfile = function (bindingProfile) {
        this['binding:profile'] = bindingProfile;
        return this;
    };
    Object.defineProperty(Port.prototype, "bindingProfile", {
        get: function () {
            return this['binding:profile'];
        },
        set: function (bindingProfile) {
            this['binding:profile'] = bindingProfile;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withInstanceId = function (instanceId) {
        this['instance_id'] = instanceId;
        return this;
    };
    Object.defineProperty(Port.prototype, "instanceId", {
        get: function () {
            return this['instance_id'];
        },
        set: function (instanceId) {
            this['instance_id'] = instanceId;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withInstanceType = function (instanceType) {
        this['instance_type'] = instanceType;
        return this;
    };
    Object.defineProperty(Port.prototype, "instanceType", {
        get: function () {
            return this['instance_type'];
        },
        set: function (instanceType) {
            this['instance_type'] = instanceType;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withPortSecurityEnabled = function (portSecurityEnabled) {
        this['port_security_enabled'] = portSecurityEnabled;
        return this;
    };
    Object.defineProperty(Port.prototype, "portSecurityEnabled", {
        get: function () {
            return this['port_security_enabled'];
        },
        set: function (portSecurityEnabled) {
            this['port_security_enabled'] = portSecurityEnabled;
        },
        enumerable: false,
        configurable: true
    });
    Port.prototype.withZoneId = function (zoneId) {
        this['zone_id'] = zoneId;
        return this;
    };
    Object.defineProperty(Port.prototype, "zoneId", {
        get: function () {
            return this['zone_id'];
        },
        set: function (zoneId) {
            this['zone_id'] = zoneId;
        },
        enumerable: false,
        configurable: true
    });
    return Port;
}());
exports.Port = Port;
/**
    * @export
    * @enum {string}
    */
var PortDeviceOwnerEnum;
(function (PortDeviceOwnerEnum) {
    PortDeviceOwnerEnum["NETWORKDHCP"] = "network:dhcp";
    PortDeviceOwnerEnum["NEUTRONVIP_PORT"] = "neutron:VIP_PORT";
    PortDeviceOwnerEnum["NETWORKROUTER_INTERFACE_DISTRIBUTED"] = "network:router_interface_distributed";
    PortDeviceOwnerEnum["NETWORKROUTER_CENTRALIZED_SNAT"] = "network:router_centralized_snat";
})(PortDeviceOwnerEnum = exports.PortDeviceOwnerEnum || (exports.PortDeviceOwnerEnum = {}));
/**
    * @export
    * @enum {string}
    */
var PortStatusEnum;
(function (PortStatusEnum) {
    PortStatusEnum["ACTIVE"] = "ACTIVE";
    PortStatusEnum["BUILD"] = "BUILD";
    PortStatusEnum["DOWN"] = "DOWN";
})(PortStatusEnum = exports.PortStatusEnum || (exports.PortStatusEnum = {}));
