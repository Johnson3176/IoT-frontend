import { ExtraDhcpOption } from './ExtraDhcpOption';
export declare class CreateSubnetOption {
    name: string;
    description?: string;
    cidr: string;
    private 'vpc_id';
    private 'gateway_ip';
    private 'ipv6_enable'?;
    private 'dhcp_enable'?;
    private 'primary_dns'?;
    private 'secondary_dns'?;
    dnsList?: Array<string>;
    private 'availability_zone'?;
    private 'extra_dhcp_opts'?;
    constructor(name?: any, cidr?: any, vpcId?: any, gatewayIp?: any);
    withName(name: string): CreateSubnetOption;
    withDescription(description: string): CreateSubnetOption;
    withCidr(cidr: string): CreateSubnetOption;
    withVpcId(vpcId: string): CreateSubnetOption;
    set vpcId(vpcId: string | undefined);
    get vpcId(): string | undefined;
    withGatewayIp(gatewayIp: string): CreateSubnetOption;
    set gatewayIp(gatewayIp: string | undefined);
    get gatewayIp(): string | undefined;
    withIpv6Enable(ipv6Enable: boolean): CreateSubnetOption;
    set ipv6Enable(ipv6Enable: boolean | undefined);
    get ipv6Enable(): boolean | undefined;
    withDhcpEnable(dhcpEnable: boolean): CreateSubnetOption;
    set dhcpEnable(dhcpEnable: boolean | undefined);
    get dhcpEnable(): boolean | undefined;
    withPrimaryDns(primaryDns: string): CreateSubnetOption;
    set primaryDns(primaryDns: string | undefined);
    get primaryDns(): string | undefined;
    withSecondaryDns(secondaryDns: string): CreateSubnetOption;
    set secondaryDns(secondaryDns: string | undefined);
    get secondaryDns(): string | undefined;
    withDnsList(dnsList: Array<string>): CreateSubnetOption;
    withAvailabilityZone(availabilityZone: string): CreateSubnetOption;
    set availabilityZone(availabilityZone: string | undefined);
    get availabilityZone(): string | undefined;
    withExtraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOption>): CreateSubnetOption;
    set extraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOption> | undefined);
    get extraDhcpOpts(): Array<ExtraDhcpOption> | undefined;
}
