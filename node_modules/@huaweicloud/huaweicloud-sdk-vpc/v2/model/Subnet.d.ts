import { ExtraDhcpOption } from './ExtraDhcpOption';
export declare class Subnet {
    id: string;
    name: string;
    description: string;
    cidr: string;
    private 'gateway_ip';
    private 'ipv6_enable';
    private 'cidr_v6';
    private 'gateway_ip_v6';
    private 'dhcp_enable';
    private 'primary_dns';
    private 'secondary_dns';
    dnsList: Array<string>;
    private 'availability_zone';
    private 'vpc_id';
    status: SubnetStatusEnum;
    private 'neutron_network_id';
    private 'neutron_subnet_id';
    private 'neutron_subnet_id_v6';
    private 'extra_dhcp_opts';
    scope?: string;
    private 'tenant_id';
    private 'created_at';
    private 'updated_at';
    constructor(id?: any, name?: any, description?: any, cidr?: any, gatewayIp?: any, ipv6Enable?: any, cidrV6?: any, gatewayIpV6?: any, dhcpEnable?: any, primaryDns?: any, secondaryDns?: any, dnsList?: any, availabilityZone?: any, vpcId?: any, status?: any, neutronNetworkId?: any, neutronSubnetId?: any, neutronSubnetIdV6?: any, extraDhcpOpts?: any, tenantId?: any, createdAt?: any, updatedAt?: any);
    withId(id: string): Subnet;
    withName(name: string): Subnet;
    withDescription(description: string): Subnet;
    withCidr(cidr: string): Subnet;
    withGatewayIp(gatewayIp: string): Subnet;
    set gatewayIp(gatewayIp: string | undefined);
    get gatewayIp(): string | undefined;
    withIpv6Enable(ipv6Enable: boolean): Subnet;
    set ipv6Enable(ipv6Enable: boolean | undefined);
    get ipv6Enable(): boolean | undefined;
    withCidrV6(cidrV6: string): Subnet;
    set cidrV6(cidrV6: string | undefined);
    get cidrV6(): string | undefined;
    withGatewayIpV6(gatewayIpV6: string): Subnet;
    set gatewayIpV6(gatewayIpV6: string | undefined);
    get gatewayIpV6(): string | undefined;
    withDhcpEnable(dhcpEnable: boolean): Subnet;
    set dhcpEnable(dhcpEnable: boolean | undefined);
    get dhcpEnable(): boolean | undefined;
    withPrimaryDns(primaryDns: string): Subnet;
    set primaryDns(primaryDns: string | undefined);
    get primaryDns(): string | undefined;
    withSecondaryDns(secondaryDns: string): Subnet;
    set secondaryDns(secondaryDns: string | undefined);
    get secondaryDns(): string | undefined;
    withDnsList(dnsList: Array<string>): Subnet;
    withAvailabilityZone(availabilityZone: string): Subnet;
    set availabilityZone(availabilityZone: string | undefined);
    get availabilityZone(): string | undefined;
    withVpcId(vpcId: string): Subnet;
    set vpcId(vpcId: string | undefined);
    get vpcId(): string | undefined;
    withStatus(status: SubnetStatusEnum): Subnet;
    withNeutronNetworkId(neutronNetworkId: string): Subnet;
    set neutronNetworkId(neutronNetworkId: string | undefined);
    get neutronNetworkId(): string | undefined;
    withNeutronSubnetId(neutronSubnetId: string): Subnet;
    set neutronSubnetId(neutronSubnetId: string | undefined);
    get neutronSubnetId(): string | undefined;
    withNeutronSubnetIdV6(neutronSubnetIdV6: string): Subnet;
    set neutronSubnetIdV6(neutronSubnetIdV6: string | undefined);
    get neutronSubnetIdV6(): string | undefined;
    withExtraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOption>): Subnet;
    set extraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOption> | undefined);
    get extraDhcpOpts(): Array<ExtraDhcpOption> | undefined;
    withScope(scope: string): Subnet;
    withTenantId(tenantId: string): Subnet;
    set tenantId(tenantId: string | undefined);
    get tenantId(): string | undefined;
    withCreatedAt(createdAt: Date): Subnet;
    set createdAt(createdAt: Date | undefined);
    get createdAt(): Date | undefined;
    withUpdatedAt(updatedAt: Date): Subnet;
    set updatedAt(updatedAt: Date | undefined);
    get updatedAt(): Date | undefined;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SubnetStatusEnum {
    ACTIVE = "ACTIVE",
    UNKNOWN = "UNKNOWN",
    ERROR = "ERROR"
}
