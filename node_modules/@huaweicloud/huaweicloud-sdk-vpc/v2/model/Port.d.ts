import { AllowedAddressPair } from './AllowedAddressPair';
import { BindingVifDetails } from './BindingVifDetails';
import { DnsAssignMent } from './DnsAssignMent';
import { ExtraDhcpOpt } from './ExtraDhcpOpt';
import { FixedIp } from './FixedIp';
export declare class Port {
    id: string;
    name: string;
    private 'network_id';
    private 'admin_state_up';
    private 'mac_address';
    private 'fixed_ips';
    private 'device_id';
    private 'device_owner';
    private 'tenant_id';
    status: PortStatusEnum;
    private 'security_groups';
    private 'allowed_address_pairs';
    private 'extra_dhcp_opts';
    private 'binding:vnic_type';
    private 'dns_assignment';
    private 'dns_name';
    private 'binding:vif_details';
    private 'binding:profile';
    private 'instance_id';
    private 'instance_type';
    private 'port_security_enabled';
    private 'zone_id';
    constructor(id?: any, name?: any, networkId?: any, adminStateUp?: any, macAddress?: any, fixedIps?: any, deviceId?: any, deviceOwner?: any, tenantId?: any, status?: any, securityGroups?: any, allowedAddressPairs?: any, extraDhcpOpts?: any, bindingVnicType?: any, dnsAssignment?: any, dnsName?: any, bindingVifDetails?: any, bindingProfile?: any, instanceId?: any, instanceType?: any, portSecurityEnabled?: any, zoneId?: any);
    withId(id: string): Port;
    withName(name: string): Port;
    withNetworkId(networkId: string): Port;
    set networkId(networkId: string | undefined);
    get networkId(): string | undefined;
    withAdminStateUp(adminStateUp: boolean): Port;
    set adminStateUp(adminStateUp: boolean | undefined);
    get adminStateUp(): boolean | undefined;
    withMacAddress(macAddress: string): Port;
    set macAddress(macAddress: string | undefined);
    get macAddress(): string | undefined;
    withFixedIps(fixedIps: Array<FixedIp>): Port;
    set fixedIps(fixedIps: Array<FixedIp> | undefined);
    get fixedIps(): Array<FixedIp> | undefined;
    withDeviceId(deviceId: string): Port;
    set deviceId(deviceId: string | undefined);
    get deviceId(): string | undefined;
    withDeviceOwner(deviceOwner: PortDeviceOwnerEnum): Port;
    set deviceOwner(deviceOwner: PortDeviceOwnerEnum | undefined);
    get deviceOwner(): PortDeviceOwnerEnum | undefined;
    withTenantId(tenantId: string): Port;
    set tenantId(tenantId: string | undefined);
    get tenantId(): string | undefined;
    withStatus(status: PortStatusEnum): Port;
    withSecurityGroups(securityGroups: Array<string>): Port;
    set securityGroups(securityGroups: Array<string> | undefined);
    get securityGroups(): Array<string> | undefined;
    withAllowedAddressPairs(allowedAddressPairs: Array<AllowedAddressPair>): Port;
    set allowedAddressPairs(allowedAddressPairs: Array<AllowedAddressPair> | undefined);
    get allowedAddressPairs(): Array<AllowedAddressPair> | undefined;
    withExtraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOpt>): Port;
    set extraDhcpOpts(extraDhcpOpts: Array<ExtraDhcpOpt> | undefined);
    get extraDhcpOpts(): Array<ExtraDhcpOpt> | undefined;
    withBindingVnicType(bindingVnicType: string): Port;
    set bindingVnicType(bindingVnicType: string | undefined);
    get bindingVnicType(): string | undefined;
    withDnsAssignment(dnsAssignment: Array<DnsAssignMent>): Port;
    set dnsAssignment(dnsAssignment: Array<DnsAssignMent> | undefined);
    get dnsAssignment(): Array<DnsAssignMent> | undefined;
    withDnsName(dnsName: string): Port;
    set dnsName(dnsName: string | undefined);
    get dnsName(): string | undefined;
    withBindingVifDetails(bindingVifDetails: BindingVifDetails): Port;
    set bindingVifDetails(bindingVifDetails: BindingVifDetails | undefined);
    get bindingVifDetails(): BindingVifDetails | undefined;
    withBindingProfile(bindingProfile: object): Port;
    set bindingProfile(bindingProfile: object | undefined);
    get bindingProfile(): object | undefined;
    withInstanceId(instanceId: string): Port;
    set instanceId(instanceId: string | undefined);
    get instanceId(): string | undefined;
    withInstanceType(instanceType: string): Port;
    set instanceType(instanceType: string | undefined);
    get instanceType(): string | undefined;
    withPortSecurityEnabled(portSecurityEnabled: boolean): Port;
    set portSecurityEnabled(portSecurityEnabled: boolean | undefined);
    get portSecurityEnabled(): boolean | undefined;
    withZoneId(zoneId: string): Port;
    set zoneId(zoneId: string | undefined);
    get zoneId(): string | undefined;
}
/**
    * @export
    * @enum {string}
    */
export declare enum PortDeviceOwnerEnum {
    NETWORKDHCP = "network:dhcp",
    NEUTRONVIP_PORT = "neutron:VIP_PORT",
    NETWORKROUTER_INTERFACE_DISTRIBUTED = "network:router_interface_distributed",
    NETWORKROUTER_CENTRALIZED_SNAT = "network:router_centralized_snat"
}
/**
    * @export
    * @enum {string}
    */
export declare enum PortStatusEnum {
    ACTIVE = "ACTIVE",
    BUILD = "BUILD",
    DOWN = "DOWN"
}
