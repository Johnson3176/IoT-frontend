"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetIpAvailability = void 0;
var SubnetIpAvailability = /** @class */ (function () {
    function SubnetIpAvailability(usedIps, subnetId, subnetName, ipVersion, cidr, totalIps) {
        this['used_ips'] = usedIps;
        this['subnet_id'] = subnetId;
        this['subnet_name'] = subnetName;
        this['ip_version'] = ipVersion;
        this['cidr'] = cidr;
        this['total_ips'] = totalIps;
    }
    SubnetIpAvailability.prototype.withUsedIps = function (usedIps) {
        this['used_ips'] = usedIps;
        return this;
    };
    Object.defineProperty(SubnetIpAvailability.prototype, "usedIps", {
        get: function () {
            return this['used_ips'];
        },
        set: function (usedIps) {
            this['used_ips'] = usedIps;
        },
        enumerable: false,
        configurable: true
    });
    SubnetIpAvailability.prototype.withSubnetId = function (subnetId) {
        this['subnet_id'] = subnetId;
        return this;
    };
    Object.defineProperty(SubnetIpAvailability.prototype, "subnetId", {
        get: function () {
            return this['subnet_id'];
        },
        set: function (subnetId) {
            this['subnet_id'] = subnetId;
        },
        enumerable: false,
        configurable: true
    });
    SubnetIpAvailability.prototype.withSubnetName = function (subnetName) {
        this['subnet_name'] = subnetName;
        return this;
    };
    Object.defineProperty(SubnetIpAvailability.prototype, "subnetName", {
        get: function () {
            return this['subnet_name'];
        },
        set: function (subnetName) {
            this['subnet_name'] = subnetName;
        },
        enumerable: false,
        configurable: true
    });
    SubnetIpAvailability.prototype.withIpVersion = function (ipVersion) {
        this['ip_version'] = ipVersion;
        return this;
    };
    Object.defineProperty(SubnetIpAvailability.prototype, "ipVersion", {
        get: function () {
            return this['ip_version'];
        },
        set: function (ipVersion) {
            this['ip_version'] = ipVersion;
        },
        enumerable: false,
        configurable: true
    });
    SubnetIpAvailability.prototype.withCidr = function (cidr) {
        this['cidr'] = cidr;
        return this;
    };
    SubnetIpAvailability.prototype.withTotalIps = function (totalIps) {
        this['total_ips'] = totalIps;
        return this;
    };
    Object.defineProperty(SubnetIpAvailability.prototype, "totalIps", {
        get: function () {
            return this['total_ips'];
        },
        set: function (totalIps) {
            this['total_ips'] = totalIps;
        },
        enumerable: false,
        configurable: true
    });
    return SubnetIpAvailability;
}());
exports.SubnetIpAvailability = SubnetIpAvailability;
