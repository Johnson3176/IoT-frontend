export declare class SecurityGroupRule {
    id: string;
    description: string;
    private 'security_group_id';
    direction: string;
    ethertype: string;
    protocol: string;
    private 'port_range_min';
    private 'port_range_max';
    private 'remote_ip_prefix';
    private 'remote_group_id';
    private 'remote_address_group_id'?;
    private 'tenant_id';
    constructor(id?: any, description?: any, securityGroupId?: any, direction?: any, ethertype?: any, protocol?: any, portRangeMin?: any, portRangeMax?: any, remoteIpPrefix?: any, remoteGroupId?: any, tenantId?: any);
    withId(id: string): SecurityGroupRule;
    withDescription(description: string): SecurityGroupRule;
    withSecurityGroupId(securityGroupId: string): SecurityGroupRule;
    set securityGroupId(securityGroupId: string | undefined);
    get securityGroupId(): string | undefined;
    withDirection(direction: string): SecurityGroupRule;
    withEthertype(ethertype: string): SecurityGroupRule;
    withProtocol(protocol: string): SecurityGroupRule;
    withPortRangeMin(portRangeMin: number): SecurityGroupRule;
    set portRangeMin(portRangeMin: number | undefined);
    get portRangeMin(): number | undefined;
    withPortRangeMax(portRangeMax: number): SecurityGroupRule;
    set portRangeMax(portRangeMax: number | undefined);
    get portRangeMax(): number | undefined;
    withRemoteIpPrefix(remoteIpPrefix: string): SecurityGroupRule;
    set remoteIpPrefix(remoteIpPrefix: string | undefined);
    get remoteIpPrefix(): string | undefined;
    withRemoteGroupId(remoteGroupId: string): SecurityGroupRule;
    set remoteGroupId(remoteGroupId: string | undefined);
    get remoteGroupId(): string | undefined;
    withRemoteAddressGroupId(remoteAddressGroupId: string): SecurityGroupRule;
    set remoteAddressGroupId(remoteAddressGroupId: string | undefined);
    get remoteAddressGroupId(): string | undefined;
    withTenantId(tenantId: string): SecurityGroupRule;
    set tenantId(tenantId: string | undefined);
    get tenantId(): string | undefined;
}
