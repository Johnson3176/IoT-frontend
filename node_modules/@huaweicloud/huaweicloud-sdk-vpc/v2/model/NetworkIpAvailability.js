"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkIpAvailability = void 0;
var NetworkIpAvailability = /** @class */ (function () {
    function NetworkIpAvailability(networkId, networkName, tenantId, totalIps, usedIps, subnetIpAvailability) {
        this['network_id'] = networkId;
        this['network_name'] = networkName;
        this['tenant_id'] = tenantId;
        this['total_ips'] = totalIps;
        this['used_ips'] = usedIps;
        this['subnet_ip_availability'] = subnetIpAvailability;
    }
    NetworkIpAvailability.prototype.withNetworkId = function (networkId) {
        this['network_id'] = networkId;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "networkId", {
        get: function () {
            return this['network_id'];
        },
        set: function (networkId) {
            this['network_id'] = networkId;
        },
        enumerable: false,
        configurable: true
    });
    NetworkIpAvailability.prototype.withNetworkName = function (networkName) {
        this['network_name'] = networkName;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "networkName", {
        get: function () {
            return this['network_name'];
        },
        set: function (networkName) {
            this['network_name'] = networkName;
        },
        enumerable: false,
        configurable: true
    });
    NetworkIpAvailability.prototype.withTenantId = function (tenantId) {
        this['tenant_id'] = tenantId;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "tenantId", {
        get: function () {
            return this['tenant_id'];
        },
        set: function (tenantId) {
            this['tenant_id'] = tenantId;
        },
        enumerable: false,
        configurable: true
    });
    NetworkIpAvailability.prototype.withTotalIps = function (totalIps) {
        this['total_ips'] = totalIps;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "totalIps", {
        get: function () {
            return this['total_ips'];
        },
        set: function (totalIps) {
            this['total_ips'] = totalIps;
        },
        enumerable: false,
        configurable: true
    });
    NetworkIpAvailability.prototype.withUsedIps = function (usedIps) {
        this['used_ips'] = usedIps;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "usedIps", {
        get: function () {
            return this['used_ips'];
        },
        set: function (usedIps) {
            this['used_ips'] = usedIps;
        },
        enumerable: false,
        configurable: true
    });
    NetworkIpAvailability.prototype.withSubnetIpAvailability = function (subnetIpAvailability) {
        this['subnet_ip_availability'] = subnetIpAvailability;
        return this;
    };
    Object.defineProperty(NetworkIpAvailability.prototype, "subnetIpAvailability", {
        get: function () {
            return this['subnet_ip_availability'];
        },
        set: function (subnetIpAvailability) {
            this['subnet_ip_availability'] = subnetIpAvailability;
        },
        enumerable: false,
        configurable: true
    });
    return NetworkIpAvailability;
}());
exports.NetworkIpAvailability = NetworkIpAvailability;
