"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetStatusEnum = exports.Subnet = void 0;
var Subnet = /** @class */ (function () {
    function Subnet(id, name, description, cidr, gatewayIp, ipv6Enable, cidrV6, gatewayIpV6, dhcpEnable, primaryDns, secondaryDns, dnsList, availabilityZone, vpcId, status, neutronNetworkId, neutronSubnetId, neutronSubnetIdV6, extraDhcpOpts, tenantId, createdAt, updatedAt) {
        this['id'] = id;
        this['name'] = name;
        this['description'] = description;
        this['cidr'] = cidr;
        this['gateway_ip'] = gatewayIp;
        this['ipv6_enable'] = ipv6Enable;
        this['cidr_v6'] = cidrV6;
        this['gateway_ip_v6'] = gatewayIpV6;
        this['dhcp_enable'] = dhcpEnable;
        this['primary_dns'] = primaryDns;
        this['secondary_dns'] = secondaryDns;
        this['dnsList'] = dnsList;
        this['availability_zone'] = availabilityZone;
        this['vpc_id'] = vpcId;
        this['status'] = status;
        this['neutron_network_id'] = neutronNetworkId;
        this['neutron_subnet_id'] = neutronSubnetId;
        this['neutron_subnet_id_v6'] = neutronSubnetIdV6;
        this['extra_dhcp_opts'] = extraDhcpOpts;
        this['tenant_id'] = tenantId;
        this['created_at'] = createdAt;
        this['updated_at'] = updatedAt;
    }
    Subnet.prototype.withId = function (id) {
        this['id'] = id;
        return this;
    };
    Subnet.prototype.withName = function (name) {
        this['name'] = name;
        return this;
    };
    Subnet.prototype.withDescription = function (description) {
        this['description'] = description;
        return this;
    };
    Subnet.prototype.withCidr = function (cidr) {
        this['cidr'] = cidr;
        return this;
    };
    Subnet.prototype.withGatewayIp = function (gatewayIp) {
        this['gateway_ip'] = gatewayIp;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "gatewayIp", {
        get: function () {
            return this['gateway_ip'];
        },
        set: function (gatewayIp) {
            this['gateway_ip'] = gatewayIp;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withIpv6Enable = function (ipv6Enable) {
        this['ipv6_enable'] = ipv6Enable;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "ipv6Enable", {
        get: function () {
            return this['ipv6_enable'];
        },
        set: function (ipv6Enable) {
            this['ipv6_enable'] = ipv6Enable;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withCidrV6 = function (cidrV6) {
        this['cidr_v6'] = cidrV6;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "cidrV6", {
        get: function () {
            return this['cidr_v6'];
        },
        set: function (cidrV6) {
            this['cidr_v6'] = cidrV6;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withGatewayIpV6 = function (gatewayIpV6) {
        this['gateway_ip_v6'] = gatewayIpV6;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "gatewayIpV6", {
        get: function () {
            return this['gateway_ip_v6'];
        },
        set: function (gatewayIpV6) {
            this['gateway_ip_v6'] = gatewayIpV6;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withDhcpEnable = function (dhcpEnable) {
        this['dhcp_enable'] = dhcpEnable;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "dhcpEnable", {
        get: function () {
            return this['dhcp_enable'];
        },
        set: function (dhcpEnable) {
            this['dhcp_enable'] = dhcpEnable;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withPrimaryDns = function (primaryDns) {
        this['primary_dns'] = primaryDns;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "primaryDns", {
        get: function () {
            return this['primary_dns'];
        },
        set: function (primaryDns) {
            this['primary_dns'] = primaryDns;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withSecondaryDns = function (secondaryDns) {
        this['secondary_dns'] = secondaryDns;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "secondaryDns", {
        get: function () {
            return this['secondary_dns'];
        },
        set: function (secondaryDns) {
            this['secondary_dns'] = secondaryDns;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withDnsList = function (dnsList) {
        this['dnsList'] = dnsList;
        return this;
    };
    Subnet.prototype.withAvailabilityZone = function (availabilityZone) {
        this['availability_zone'] = availabilityZone;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "availabilityZone", {
        get: function () {
            return this['availability_zone'];
        },
        set: function (availabilityZone) {
            this['availability_zone'] = availabilityZone;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withVpcId = function (vpcId) {
        this['vpc_id'] = vpcId;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "vpcId", {
        get: function () {
            return this['vpc_id'];
        },
        set: function (vpcId) {
            this['vpc_id'] = vpcId;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withStatus = function (status) {
        this['status'] = status;
        return this;
    };
    Subnet.prototype.withNeutronNetworkId = function (neutronNetworkId) {
        this['neutron_network_id'] = neutronNetworkId;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "neutronNetworkId", {
        get: function () {
            return this['neutron_network_id'];
        },
        set: function (neutronNetworkId) {
            this['neutron_network_id'] = neutronNetworkId;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withNeutronSubnetId = function (neutronSubnetId) {
        this['neutron_subnet_id'] = neutronSubnetId;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "neutronSubnetId", {
        get: function () {
            return this['neutron_subnet_id'];
        },
        set: function (neutronSubnetId) {
            this['neutron_subnet_id'] = neutronSubnetId;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withNeutronSubnetIdV6 = function (neutronSubnetIdV6) {
        this['neutron_subnet_id_v6'] = neutronSubnetIdV6;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "neutronSubnetIdV6", {
        get: function () {
            return this['neutron_subnet_id_v6'];
        },
        set: function (neutronSubnetIdV6) {
            this['neutron_subnet_id_v6'] = neutronSubnetIdV6;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withExtraDhcpOpts = function (extraDhcpOpts) {
        this['extra_dhcp_opts'] = extraDhcpOpts;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "extraDhcpOpts", {
        get: function () {
            return this['extra_dhcp_opts'];
        },
        set: function (extraDhcpOpts) {
            this['extra_dhcp_opts'] = extraDhcpOpts;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withScope = function (scope) {
        this['scope'] = scope;
        return this;
    };
    Subnet.prototype.withTenantId = function (tenantId) {
        this['tenant_id'] = tenantId;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "tenantId", {
        get: function () {
            return this['tenant_id'];
        },
        set: function (tenantId) {
            this['tenant_id'] = tenantId;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withCreatedAt = function (createdAt) {
        this['created_at'] = createdAt;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "createdAt", {
        get: function () {
            return this['created_at'];
        },
        set: function (createdAt) {
            this['created_at'] = createdAt;
        },
        enumerable: false,
        configurable: true
    });
    Subnet.prototype.withUpdatedAt = function (updatedAt) {
        this['updated_at'] = updatedAt;
        return this;
    };
    Object.defineProperty(Subnet.prototype, "updatedAt", {
        get: function () {
            return this['updated_at'];
        },
        set: function (updatedAt) {
            this['updated_at'] = updatedAt;
        },
        enumerable: false,
        configurable: true
    });
    return Subnet;
}());
exports.Subnet = Subnet;
/**
    * @export
    * @enum {string}
    */
var SubnetStatusEnum;
(function (SubnetStatusEnum) {
    SubnetStatusEnum["ACTIVE"] = "ACTIVE";
    SubnetStatusEnum["UNKNOWN"] = "UNKNOWN";
    SubnetStatusEnum["ERROR"] = "ERROR";
})(SubnetStatusEnum = exports.SubnetStatusEnum || (exports.SubnetStatusEnum = {}));
