export declare class CreateSubNetworkInterfaceOption {
    private 'virsubnet_id';
    private 'vlan_id'?;
    private 'parent_id';
    description?: string;
    private 'ipv6_enable'?;
    private 'private_ip_address'?;
    private 'ipv6_ip_address'?;
    private 'security_groups'?;
    private 'project_id'?;
    constructor(virsubnetId?: any, parentId?: any);
    withVirsubnetId(virsubnetId: string): CreateSubNetworkInterfaceOption;
    set virsubnetId(virsubnetId: string | undefined);
    get virsubnetId(): string | undefined;
    withVlanId(vlanId: string): CreateSubNetworkInterfaceOption;
    set vlanId(vlanId: string | undefined);
    get vlanId(): string | undefined;
    withParentId(parentId: string): CreateSubNetworkInterfaceOption;
    set parentId(parentId: string | undefined);
    get parentId(): string | undefined;
    withDescription(description: string): CreateSubNetworkInterfaceOption;
    withIpv6Enable(ipv6Enable: boolean): CreateSubNetworkInterfaceOption;
    set ipv6Enable(ipv6Enable: boolean | undefined);
    get ipv6Enable(): boolean | undefined;
    withPrivateIpAddress(privateIpAddress: string): CreateSubNetworkInterfaceOption;
    set privateIpAddress(privateIpAddress: string | undefined);
    get privateIpAddress(): string | undefined;
    withIpv6IpAddress(ipv6IpAddress: string): CreateSubNetworkInterfaceOption;
    set ipv6IpAddress(ipv6IpAddress: string | undefined);
    get ipv6IpAddress(): string | undefined;
    withSecurityGroups(securityGroups: Array<string>): CreateSubNetworkInterfaceOption;
    set securityGroups(securityGroups: Array<string> | undefined);
    get securityGroups(): Array<string> | undefined;
    withProjectId(projectId: string): CreateSubNetworkInterfaceOption;
    set projectId(projectId: string | undefined);
    get projectId(): string | undefined;
}
