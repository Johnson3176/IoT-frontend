"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListRuleActionsRequest = void 0;
var ListRuleActionsRequest = /** @class */ (function () {
    function ListRuleActionsRequest() {
    }
    ListRuleActionsRequest.prototype.withInstanceId = function (instanceId) {
        this['Instance-Id'] = instanceId;
        return this;
    };
    Object.defineProperty(ListRuleActionsRequest.prototype, "instanceId", {
        get: function () {
            return this['Instance-Id'];
        },
        set: function (instanceId) {
            this['Instance-Id'] = instanceId;
        },
        enumerable: false,
        configurable: true
    });
    ListRuleActionsRequest.prototype.withRuleId = function (ruleId) {
        this['rule_id'] = ruleId;
        return this;
    };
    Object.defineProperty(ListRuleActionsRequest.prototype, "ruleId", {
        get: function () {
            return this['rule_id'];
        },
        set: function (ruleId) {
            this['rule_id'] = ruleId;
        },
        enumerable: false,
        configurable: true
    });
    ListRuleActionsRequest.prototype.withChannel = function (channel) {
        this['channel'] = channel;
        return this;
    };
    ListRuleActionsRequest.prototype.withAppType = function (appType) {
        this['app_type'] = appType;
        return this;
    };
    Object.defineProperty(ListRuleActionsRequest.prototype, "appType", {
        get: function () {
            return this['app_type'];
        },
        set: function (appType) {
            this['app_type'] = appType;
        },
        enumerable: false,
        configurable: true
    });
    ListRuleActionsRequest.prototype.withAppId = function (appId) {
        this['app_id'] = appId;
        return this;
    };
    Object.defineProperty(ListRuleActionsRequest.prototype, "appId", {
        get: function () {
            return this['app_id'];
        },
        set: function (appId) {
            this['app_id'] = appId;
        },
        enumerable: false,
        configurable: true
    });
    ListRuleActionsRequest.prototype.withLimit = function (limit) {
        this['limit'] = limit;
        return this;
    };
    ListRuleActionsRequest.prototype.withMarker = function (marker) {
        this['marker'] = marker;
        return this;
    };
    ListRuleActionsRequest.prototype.withOffset = function (offset) {
        this['offset'] = offset;
        return this;
    };
    return ListRuleActionsRequest;
}());
exports.ListRuleActionsRequest = ListRuleActionsRequest;
