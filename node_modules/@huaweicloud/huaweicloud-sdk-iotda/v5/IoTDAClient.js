"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredError = exports.ParamCreater = exports.IoTDAClient = void 0;
var ClientBuilder_1 = require("@huaweicloud/huaweicloud-sdk-core/ClientBuilder");
var AddApplicationRequest_1 = require("./model/AddApplicationRequest");
var AddCertificateRequest_1 = require("./model/AddCertificateRequest");
var AddDeviceGroupRequest_1 = require("./model/AddDeviceGroupRequest");
var AddDeviceRequest_1 = require("./model/AddDeviceRequest");
var AddQueueRequest_1 = require("./model/AddQueueRequest");
var BatchShowQueueRequest_1 = require("./model/BatchShowQueueRequest");
var BroadcastMessageRequest_1 = require("./model/BroadcastMessageRequest");
var ChangeRuleStatusRequest_1 = require("./model/ChangeRuleStatusRequest");
var CheckCertificateRequest_1 = require("./model/CheckCertificateRequest");
var CreateAccessCodeRequest_1 = require("./model/CreateAccessCodeRequest");
var CreateAsyncCommandRequest_1 = require("./model/CreateAsyncCommandRequest");
var CreateBatchTaskRequest_1 = require("./model/CreateBatchTaskRequest");
var CreateCommandRequest_1 = require("./model/CreateCommandRequest");
var CreateMessageRequest_1 = require("./model/CreateMessageRequest");
var CreateOrDeleteDeviceInGroupRequest_1 = require("./model/CreateOrDeleteDeviceInGroupRequest");
var CreateOtaPackageRequest_1 = require("./model/CreateOtaPackageRequest");
var CreateProductRequest_1 = require("./model/CreateProductRequest");
var CreateRoutingRuleRequest_1 = require("./model/CreateRoutingRuleRequest");
var CreateRuleActionRequest_1 = require("./model/CreateRuleActionRequest");
var CreateRuleRequest_1 = require("./model/CreateRuleRequest");
var DeleteApplicationRequest_1 = require("./model/DeleteApplicationRequest");
var DeleteBatchTaskFileRequest_1 = require("./model/DeleteBatchTaskFileRequest");
var DeleteCertificateRequest_1 = require("./model/DeleteCertificateRequest");
var DeleteDeviceGroupRequest_1 = require("./model/DeleteDeviceGroupRequest");
var DeleteDeviceRequest_1 = require("./model/DeleteDeviceRequest");
var DeleteOtaPackageRequest_1 = require("./model/DeleteOtaPackageRequest");
var DeleteProductRequest_1 = require("./model/DeleteProductRequest");
var DeleteQueueRequest_1 = require("./model/DeleteQueueRequest");
var DeleteRoutingRuleRequest_1 = require("./model/DeleteRoutingRuleRequest");
var DeleteRuleActionRequest_1 = require("./model/DeleteRuleActionRequest");
var DeleteRuleRequest_1 = require("./model/DeleteRuleRequest");
var FreezeDeviceRequest_1 = require("./model/FreezeDeviceRequest");
var ListBatchTaskFilesRequest_1 = require("./model/ListBatchTaskFilesRequest");
var ListBatchTasksRequest_1 = require("./model/ListBatchTasksRequest");
var ListCertificatesRequest_1 = require("./model/ListCertificatesRequest");
var ListDeviceGroupsRequest_1 = require("./model/ListDeviceGroupsRequest");
var ListDeviceMessagesRequest_1 = require("./model/ListDeviceMessagesRequest");
var ListDevicesRequest_1 = require("./model/ListDevicesRequest");
var ListOtaPackageInfoRequest_1 = require("./model/ListOtaPackageInfoRequest");
var ListProductsRequest_1 = require("./model/ListProductsRequest");
var ListPropertiesRequest_1 = require("./model/ListPropertiesRequest");
var ListResourcesByTagsRequest_1 = require("./model/ListResourcesByTagsRequest");
var ListRoutingRulesRequest_1 = require("./model/ListRoutingRulesRequest");
var ListRuleActionsRequest_1 = require("./model/ListRuleActionsRequest");
var ListRulesRequest_1 = require("./model/ListRulesRequest");
var ResetDeviceSecretRequest_1 = require("./model/ResetDeviceSecretRequest");
var ResetFingerprintRequest_1 = require("./model/ResetFingerprintRequest");
var SearchDevicesRequest_1 = require("./model/SearchDevicesRequest");
var ShowApplicationRequest_1 = require("./model/ShowApplicationRequest");
var ShowApplicationsRequest_1 = require("./model/ShowApplicationsRequest");
var ShowAsyncDeviceCommandRequest_1 = require("./model/ShowAsyncDeviceCommandRequest");
var ShowBatchTaskRequest_1 = require("./model/ShowBatchTaskRequest");
var ShowDeviceGroupRequest_1 = require("./model/ShowDeviceGroupRequest");
var ShowDeviceMessageRequest_1 = require("./model/ShowDeviceMessageRequest");
var ShowDeviceRequest_1 = require("./model/ShowDeviceRequest");
var ShowDeviceShadowRequest_1 = require("./model/ShowDeviceShadowRequest");
var ShowDevicesInGroupRequest_1 = require("./model/ShowDevicesInGroupRequest");
var ShowOtaPackageRequest_1 = require("./model/ShowOtaPackageRequest");
var ShowProductRequest_1 = require("./model/ShowProductRequest");
var ShowQueueRequest_1 = require("./model/ShowQueueRequest");
var ShowRoutingRuleRequest_1 = require("./model/ShowRoutingRuleRequest");
var ShowRuleActionRequest_1 = require("./model/ShowRuleActionRequest");
var ShowRuleRequest_1 = require("./model/ShowRuleRequest");
var TagDeviceRequest_1 = require("./model/TagDeviceRequest");
var UnfreezeDeviceRequest_1 = require("./model/UnfreezeDeviceRequest");
var UntagDeviceRequest_1 = require("./model/UntagDeviceRequest");
var UpdateDeviceGroupRequest_1 = require("./model/UpdateDeviceGroupRequest");
var UpdateDeviceRequest_1 = require("./model/UpdateDeviceRequest");
var UpdateDeviceShadowDesiredDataRequest_1 = require("./model/UpdateDeviceShadowDesiredDataRequest");
var UpdateProductRequest_1 = require("./model/UpdateProductRequest");
var UpdatePropertiesRequest_1 = require("./model/UpdatePropertiesRequest");
var UpdateRoutingRuleRequest_1 = require("./model/UpdateRoutingRuleRequest");
var UpdateRuleActionRequest_1 = require("./model/UpdateRuleActionRequest");
var UpdateRuleRequest_1 = require("./model/UpdateRuleRequest");
var IoTDAClient = /** @class */ (function () {
    function IoTDAClient(client) {
        this.hcClient = client;
    }
    IoTDAClient.newBuilder = function () {
        return new ClientBuilder_1.ClientBuilder(newClient);
    };
    IoTDAClient.prototype.getPath = function () {
        return __dirname;
    };
    /**
     * 接入凭证是用于客户端使用AMQP等协议与平台建链的一个认证凭据。只保留一条记录，如果重复调用只会重置接入凭证，使得之前的失效。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 生成接入凭证
     * @param {CreateAccessCodeRequestBody} createAccessCodeRequestBody 生成接入凭证的请求结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createAccessCode = function (createAccessCodeRequest) {
        var options = (0, exports.ParamCreater)().createAccessCode(createAccessCodeRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台创建一个AMQP队列。每个租户只能创建100个队列，若超过规格，则创建失败，若队列名称与已有的队列名称相同，则创建失败。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建AMQP队列
     * @param {QueueInfo} addQueueReQuestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.addQueue = function (addQueueRequest) {
        var options = (0, exports.ParamCreater)().addQueue(addQueueRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中的AMQP队列信息列表。可通过队列名称作模糊查询，支持分页。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询AMQP列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [queueName] **参数说明**：amqp队列名称，支持模糊查询，为空查询所有的队列（当前规格单个用户最大100个队列）。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）、间隔号（.）、冒号（:）的组合。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.batchShowQueue = function (batchShowQueueRequest) {
        var options = (0, exports.ParamCreater)().batchShowQueue(batchShowQueueRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台上删除指定AMQP队列。若当前队列正在使用，则会删除失败。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除AMQP队列
     * @param {string} queueId **参数说明**：队列ID，用于唯一标识一个队列。 **取值范围**：长度36位，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteQueue = function (deleteQueueRequest) {
        var options = (0, exports.ParamCreater)().deleteQueue(deleteQueueRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定队列的详细信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询单个AMQP队列
     * @param {string} queueId **参数说明**：队列ID，用于唯一标识一个队列。 **取值范围**：长度36位，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showQueue = function (showQueueRequest) {
        var options = (0, exports.ParamCreater)().showQueue(showQueueRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口创建资源空间。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建资源空间
     * @param {AddApplication} addApplicationRequestBody 创建资源空间所携带的结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.addApplication = function (addApplicationRequest) {
        var options = (0, exports.ParamCreater)().addApplication(addApplicationRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除指定资源空间。删除资源空间属于高危操作，删除资源空间后，该空间下的产品、设备等资源将不可用，请谨慎操作！
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除资源空间
     * @param {string} appId **参数说明**：资源空间ID，唯一标识一个资源空间，由物联网平台在创建资源空间时分配。资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteApplication = function (deleteApplicationRequest) {
        var options = (0, exports.ParamCreater)().deleteApplication(deleteApplicationRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口查询指定资源空间详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询资源空间
     * @param {string} appId **参数说明**：资源空间ID，唯一标识一个资源空间，由物联网平台在创建资源空间时分配。资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showApplication = function (showApplicationRequest) {
        var options = (0, exports.ParamCreater)().showApplication(showApplicationRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口查询资源空间列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询资源空间列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {boolean} [defaultApp] **参数说明**：默认资源空间标识，不携带则查询所有资源空间。 **取值范围**： - true：查询默认资源空间。 - false：查询非默认资源空间。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showApplications = function (showApplicationsRequest) {
        var options = (0, exports.ParamCreater)().showApplications(showApplicationsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 设备的产品模型中定义了物联网平台可向设备下发的命令，应用服务器可调用此接口向指定设备下发异步命令，以实现对设备的控制。平台负责将命令发送给设备，并将设备执行命令结果异步通知应用服务器。 命令执行结果支持灵活的数据流转，应用服务器通过调用物联网平台的创建规则触发条件（Resource:device.command.status，Event:update）、创建规则动作并激活规则后，当命令状态变更时，物联网平台会根据规则将结果发送到规则指定的服务器，如用户自定义的HTTP服务器，AMQP服务器，以及华为云的其他储存服务器等, 详情参考[[设备命令状态变更通知](https://support.huaweicloud.com/api-iothub/iot_06_v5_01212.html)](tag:hws)[[设备命令状态变更通知](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_01212.html)](tag:hws_hk)。
     * 注意：
     * - 此接口适用于NB设备异步命令下发，暂不支持其他协议类型设备命令下发。
     * - 此接口仅支持单个设备异步命令下发，如需多个设备异步命令下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 下发异步设备命令
     * @param {string} deviceId **参数说明**：下发命令的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {AsyncDeviceCommandRequest} createAsyncCommandRequestBody 请求结构体，见请求结构体说明
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createAsyncCommand = function (createAsyncCommandRequest) {
        var options = (0, exports.ParamCreater)().createAsyncCommand(createAsyncCommandRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 物联网平台可查询指定id的命令。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定id的命令
     * @param {string} deviceId **参数说明**：下发命令的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} commandId **参数说明**：下发命令的命令id，用于唯一标识一个消息，在下发命令时由物联网平台分配获得。 **取值范围**：长度不超过100，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showAsyncDeviceCommand = function (showAsyncDeviceCommandRequest) {
        var options = (0, exports.ParamCreater)().showAsyncDeviceCommand(showAsyncDeviceCommandRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口为创建批量处理任务，对多个设备进行批量操作。当前支持批量软固件升级、批量创建设备、批量删除设备、批量冻结设备、批量解冻设备、批量创建命令、批量创建消息任务。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建批量任务
     * @param {CreateBatchTask} createBatchTaskRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createBatchTask = function (createBatchTaskRequest) {
        var options = (0, exports.ParamCreater)().createBatchTask(createBatchTaskRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中批量任务列表，每一个任务又包括具体的任务内容、任务状态、任务完成情况统计等。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询批量任务列表
     * @param {string} taskType **参数说明**：批量任务类型。 **取值范围**： - softwareUpgrade: 软件升级任务 - firmwareUpgrade: 固件升级任务 - createDevices: 批量创建设备任务 - deleteDevices: 批量删除设备任务 - freezeDevices: 批量冻结设备任务 - unfreezeDevices: 批量解冻设备任务 - createCommands: 批量创建同步命令任务 - createAsyncCommands: 批量创建异步命令任务 - createMessages: 批量创建消息任务 - updateDeviceShadows：批量配置设备影子任务 - updateDevices：批量更新设备任务
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的任务列表，不携带该参数则会查询该用户下所有任务列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [status] **参数说明**：批量任务的状态，可选参数。 **取值范围**： - Initializing: 初始化中。 - Waitting: 等待中。 - Processing: 执行中。 - Success: 成功。 - Fail: 失败。 - PartialSuccess: 部分成功。 - Stopped: 停止。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。  **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listBatchTasks = function (listBatchTasksRequest) {
        var options = (0, exports.ParamCreater)().listBatchTasks(listBatchTasksRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定批量任务的信息，包括任务内容、任务状态、任务完成情况统计以及子任务列表等。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询批量任务
     * @param {string} taskId **参数说明**：批量任务ID，创建批量任务时由物联网平台分配获得。 **取值范围**：长度不超过24，只允许小写字母a到f、数字的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。  **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showBatchTask = function (showBatchTaskRequest) {
        var options = (0, exports.ParamCreater)().showBatchTask(showBatchTaskRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除批量任务文件。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除批量任务文件
     * @param {string} fileId **参数说明**：要删除的批量任务文件ID。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteBatchTaskFile = function (deleteBatchTaskFileRequest) {
        var options = (0, exports.ParamCreater)().deleteBatchTaskFile(deleteBatchTaskFileRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询批量任务文件列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询批量任务文件列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listBatchTaskFiles = function (listBatchTaskFilesRequest) {
        var options = (0, exports.ParamCreater)().listBatchTaskFiles(listBatchTaskFilesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口向订阅了指定Topic的所有在线设备发布广播消息。应用将广播消息下发给平台后，平台会先返回应用响应结果，再将消息广播给设备。
     * 注意：
     * - 此接口只适用于使用MQTT协议接入的设备。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 下发广播消息
     * @param {DeviceBroadcastRequest} broadcastMessageRequestBody 请求结构体，见请求结构体说明
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.broadcastMessage = function (broadcastMessageRequest) {
        var options = (0, exports.ParamCreater)().broadcastMessage(broadcastMessageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台上传设备CA证书
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 上传设备CA证书
     * @param {CreateCertificateDTO} addCertificateRequestBody request
     * @param {string} [spAuthToken] Sp用户Token。通过调用IoBPS服务获取SP用户Token
     * @param {string} [stageAuthToken] Stage用户的Token, 仅提供给IoStage服务使用
     * @param {string} [instanceId] 实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.addCertificate = function (addCertificateRequest) {
        var options = (0, exports.ParamCreater)().addCertificate(addCertificateRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台验证设备的CA证书，目的是为了验证用户持有设备CA证书的私钥
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 验证设备CA证书
     * @param {string} certificateId 设备CA证书ID，在上传设备CA证书时由平台分配的唯一标识。
     * @param {string} actionId 对证书执行的操作，当前仅支持verify:校验证书
     * @param {VerifyCertificateDTO} checkCertificateRequestBody certificate
     * @param {string} [spAuthToken] Sp用户Token。通过调用IoBPS服务获取SP用户Token
     * @param {string} [stageAuthToken] Stage用户的Token, 仅提供给IoStage服务使用
     * @param {string} [instanceId] 实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.checkCertificate = function (checkCertificateRequest) {
        var options = (0, exports.ParamCreater)().checkCertificate(checkCertificateRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台删除设备CA证书
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除设备CA证书
     * @param {string} certificateId 设备CA证书ID，在上传设备CA证书时由平台分配的唯一标识。
     * @param {string} [spAuthToken] Sp用户Token。通过调用IoBPS服务获取SP用户Token
     * @param {string} [stageAuthToken] Stage用户的Token, 仅提供给IoStage服务使用
     * @param {string} [instanceId] 实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteCertificate = function (deleteCertificateRequest) {
        var options = (0, exports.ParamCreater)().deleteCertificate(deleteCertificateRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台获取设备CA证书列表
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取设备CA证书列表
     * @param {string} [spAuthToken] Sp用户Token。通过调用IoBPS服务获取SP用户Token
     * @param {string} [stageAuthToken] Stage用户的Token, 仅提供给IoStage服务使用
     * @param {string} [instanceId] 实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。
     * @param {string} [appId] 资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的证书列表，不携带该参数则会查询该用户下所有证书列表。
     * @param {number} [limit] 分页查询时每页显示的记录数，默认值为10，取值范围为1-50的整数。
     * @param {string} [marker] 上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。
     * @param {number} [offset] 表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listCertificates = function (listCertificatesRequest) {
        var options = (0, exports.ParamCreater)().listCertificates(listCertificatesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 设备的产品模型中定义了物联网平台可向设备下发的命令，应用服务器可调用此接口向指定设备下发命令，以实现对设备的同步控制。平台负责将命令以同步方式发送给设备，并将设备执行命令结果同步返回, 如果设备没有响应，平台会返回给应用服务器超时，平台超时时间是20秒。如果命令下发需要超过20秒，建议采用[[消息下发](https://support.huaweicloud.com/api-iothub/iot_06_v5_0059.html)](tag:hws)[[消息下发](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0059.html)](tag:hws_hk)。
     * 注意：
     * - 此接口适用于MQTT设备同步命令下发，暂不支持NB-IoT设备命令下发。
     * - 此接口仅支持单个设备同步命令下发，如需多个设备同步命令下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 下发设备命令
     * @param {string} deviceId **参数说明**：下发消息的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {DeviceCommandRequest} createCommandRequestBody 请求结构体，见请求结构体说明
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createCommand = function (createCommandRequest) {
        var options = (0, exports.ParamCreater)().createCommand(createCommandRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口新建设备组，一个华为云账号下最多可有1,000个设备组，包括父设备组和子设备组。设备组的最大层级关系不超过5层，即群组形成的关系树最大深度不超过5。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 添加设备组
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {AddDeviceGroupDTO} [addDeviceGroupRequestBody] **参数说明**：请求结构体，见请求结构体说明。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.addDeviceGroup = function (addDeviceGroupRequest) {
        var options = (0, exports.ParamCreater)().addDeviceGroup(addDeviceGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口管理设备组中的设备。单个设备组内最多添加20,000个设备，一个设备最多可以被添加到10个设备组中。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 管理设备组中的设备
     * @param {string} groupId **参数说明**：设备组ID，用于唯一标识一个设备组，在创建设备组时由物联网平台分配。 **取值范围**：长度不超过36，十六进制字符串和连接符（-）的组合
     * @param {string} actionId **参数说明**：操作类型，支持添加设备和删除设备。 **取值范围**： - addDevice: 添加设备。添加已注册的设备到指定的设备组中。 - removeDevice: 删除设备。从指定的设备组中删除设备，只是解除了设备和设备组的关系，该设备在平台仍然存在。
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createOrDeleteDeviceInGroup = function (createOrDeleteDeviceInGroupRequest) {
        var options = (0, exports.ParamCreater)().createOrDeleteDeviceInGroup(createOrDeleteDeviceInGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除指定设备组，如果该设备组存在子设备组或者该设备组中存在设备，必须先删除子设备组并将设备从该设备组移除，才能删除该设备组。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除设备组
     * @param {string} groupId **参数说明**：设备组ID，用于唯一标识一个设备组，在创建设备组时由物联网平台分配。 **取值范围**：长度不超过36，十六进制字符串和连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteDeviceGroup = function (deleteDeviceGroupRequest) {
        var options = (0, exports.ParamCreater)().deleteDeviceGroup(deleteDeviceGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中的设备组信息列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备组列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {string} [lastModifiedTime] **参数说明**：查询设备组在last_modified_time之后修改的记录。 **取值范围**：格式为yyyyMMdd\&#39;T\&#39;HHmmss\&#39;Z\&#39;，如20151212T121212Z。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的产品列表，不携带该参数则会查询该用户下所有产品列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listDeviceGroups = function (listDeviceGroupsRequest) {
        var options = (0, exports.ParamCreater)().listDeviceGroups(listDeviceGroupsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询指定设备组详情。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备组
     * @param {string} groupId **参数说明**：设备组ID，用于唯一标识一个设备组，在创建设备组时由物联网平台分配。 **取值范围**：长度不超过36，十六进制字符串和连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showDeviceGroup = function (showDeviceGroupRequest) {
        var options = (0, exports.ParamCreater)().showDeviceGroup(showDeviceGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询指定设备组下的设备列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备组设备列表
     * @param {string} groupId **参数说明**：设备组ID，用于唯一标识一个设备组，在创建设备组时由物联网平台分配。 **取值范围**：长度不超过36，十六进制字符串和连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showDevicesInGroup = function (showDevicesInGroupRequest) {
        var options = (0, exports.ParamCreater)().showDevicesInGroup(showDevicesInGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定设备组。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改设备组
     * @param {string} groupId **参数说明**：设备组ID，用于唯一标识一个设备组，在创建设备组时由物联网平台分配。 **取值范围**：长度不超过36，十六进制字符串和连接符（-）的组合。
     * @param {UpdateDeviceGroupDTO} updateDeviceGroupRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateDeviceGroup = function (updateDeviceGroupRequest) {
        var options = (0, exports.ParamCreater)().updateDeviceGroup(updateDeviceGroupRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台创建一个设备，仅在创建后设备才可以接入物联网平台。
     *
     * - 该接口支持使用gateway_id参数指定在父设备下创建一个子设备，并且支持多级子设备，当前最大支持二级子设备。
     * - 该接口同时还支持对设备进行初始配置，接口会读取创建设备请求参数product_id对应的产品详情，如果产品的属性有定义默认值，则会将该属性默认值写入该设备的设备影子中。
     * - 用户还可以使用创建设备请求参数shadow字段为设备指定初始配置，指定后将会根据service_id和desired设置的属性值与产品中对应属性的默认值比对，如果不同，则将以shadow字段中设置的属性值为准写入到设备影子中。
     * - 该接口仅支持创建单个设备，如需批量注册设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建设备
     * @param {AddDevice} addDeviceRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.addDevice = function (addDeviceRequest) {
        var options = (0, exports.ParamCreater)().addDevice(addDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台上删除指定设备。若设备下连接了非直连设备，则必须把设备下的非直连设备都删除后，才能删除该设备。该接口仅支持删除单个设备，如需批量删除设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除设备
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteDevice = function (deleteDeviceRequest) {
        var options = (0, exports.ParamCreater)().deleteDevice(deleteDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口冻结设备，设备冻结后不能再连接上线，可以通过解冻设备接口解除设备冻结。注意，当前仅支持冻结与平台直连的设备。该接口仅支持冻结单个设备，如需批量冻结设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 冻结设备
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.freezeDevice = function (freezeDeviceRequest) {
        var options = (0, exports.ParamCreater)().freezeDevice(freezeDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中的设备信息列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {string} [productId] **参数说明**：设备关联的产品ID，用于唯一标识一个产品模型，创建产品后获得。方法请参见 [[创建产品](https://support.huaweicloud.com/api-iothub/iot_06_v5_0050.html)](tag:hws)[[创建产品](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0050.html)](tag:hws_hk)。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [gatewayId] **参数说明**：网关ID，用于标识设备所属的父设备，即父设备的设备ID。携带该参数时，表示查询该设备下的子设备，默认查询下一级子设备，如果需要查询该设备下所有各级子设备，请同时携带is_cascade_query参数为true；不携带该参数时，表示查询用户下所有设备。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {boolean} [isCascadeQuery] **参数说明**：是否级联查询，该参数仅在同时携带gateway_id时生效。默认值为false。 **取值范围**： - true：表示查询设备ID等于gateway_id参数的设备下的所有各级子设备。 - false：表示查询设备ID等于gateway_id参数的设备下的一级子设备。
     * @param {string} [nodeId] **参数说明**：设备标识码，通常使用IMEI、MAC地址或Serial No作为node_id。 **取值范围**：长度不超过64，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [deviceName] **参数说明**：设备名称。 **取值范围**：长度不超过256，只允许中文、字母、数字、以及_?\&#39;#().,&amp;%@!-等字符的组合。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {string} [startTime] **参数说明**：查询设备注册时间在startTime之后的记录，格式：yyyyMMdd\&#39;T\&#39;HHmmss\&#39;Z\&#39;，如20151212T121212Z。
     * @param {string} [endTime] **参数说明**：查询设备注册时间在endTime之前的记录，格式：yyyyMMdd\&#39;T\&#39;HHmmss\&#39;Z\&#39;，如20151212T121212Z。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的设备列表，不携带该参数则会查询该用户下所有设备列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listDevices = function (listDevicesRequest) {
        var options = (0, exports.ParamCreater)().listDevices(listDevicesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口重置设备密钥，携带指定密钥时平台将设备密钥重置为指定的密钥，不携带密钥时平台将自动生成一个新的随机密钥返回。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 重置设备密钥
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} actionId **参数说明**：对设备执行的操作。 **取值范围**： - resetSecret: 重置密钥。注意：NB设备密钥由于协议特殊性，只支持十六进制密钥接入。
     * @param {ResetDeviceSecret} resetDeviceSecretRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.resetDeviceSecret = function (resetDeviceSecretRequest) {
        var options = (0, exports.ParamCreater)().resetDeviceSecret(resetDeviceSecretRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口重置设备指纹。携带指定设备指纹时将之重置为指定值；不携带时将之置空，后续设备第一次接入时，该设备指纹的值将设置为第一次接入时的证书指纹。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 重置设备指纹
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {ResetFingerprint} resetFingerprintRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.resetFingerprint = function (resetFingerprintRequest) {
        var options = (0, exports.ParamCreater)().resetFingerprint(resetFingerprintRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * #### 接口说明
     *
     * 应用服务器使用SQL语句调用该接口，灵活的搜索所需要的设备资源列表
     *
     * #### 限制
     *
     * - 仅**标准版实例、企业版实例**支持该接口调用，基础版不支持。
     * - 单账号调用该接口的 TPS 限制最大为1/S(每秒1次请求数)
     *
     * #### 类SQL语法使用说明
     *
     * 类SQL语句有select、from、where(可选)、order by(可选)、limit子句(可选)组成，长度限制为400个字符。子句里的内容大小写敏感，SQL语句的关键字大小写不敏感。
     *
     * 示例：
     *
     * &#x60;&#x60;&#x60;
     * select * from device where device_id &#x3D; \&#39;as********\&#39; limit 0,5
     * &#x60;&#x60;&#x60;
     *
     * ##### SELECT子句
     *
     * &#x60;&#x60;&#x60;
     * select [field]/[count(*)/count(1)] from device
     * &#x60;&#x60;&#x60;
     *
     * 其中field为需要获取的字段，请参考响应参数字段名称，也可填*，获取所有字段。
     *
     * 如果需要统计搜索的设备个数，请填count(*)或者count(1).
     *
     * ##### FROM子句
     *
     * &#x60;&#x60;&#x60;
     * from device
     * &#x60;&#x60;&#x60;
     *
     * from后为要查询的资源名，当前支持\&quot;device\&quot;
     *
     * ##### WHERE子句(可选)
     *
     * &#x60;&#x60;&#x60;
     * WHERE [condition1] AND [condition2]
     * &#x60;&#x60;&#x60;
     *
     * 最多支持5个condition，不支持嵌套；支持的检索字段请参见下面的**搜索条件字段说明**和**支持的运算符**章节
     *
     * 连接词支持AND、OR，优先级参考标准SQL语法，默认AND优先级高于OR。
     *
     * ##### LIMIT子句(可选)
     *
     * &#x60;&#x60;&#x60;
     * limit [offset,] rows
     * &#x60;&#x60;&#x60;
     *
     * offset标识搜索的偏移量，rows标识返回搜索结果的最大行数，例如：
     *
     * - limit n ;示例(select * from device limit 10)
     *
     *   最大返回n条结果数据
     *
     * - limit m,n; 示例(select * from device limit 20,10)
     *   搜索偏移量为m，最大返回n条结果数据
     *
     * ###### 限制
     *
     *  offset 最大 500， rows最大50，如果不填写limit子句，默认为limit 10
     *
     * ##### ORDER BY子句(可选)
     *
     * 用于实现自定义排序，当前支持自定义排序的字段为：\&quot;marker\&quot;。
     *
     * &#x60;&#x60;&#x60;
     * order by marker [asc]/[desc]
     * &#x60;&#x60;&#x60;
     *
     * 子句不填写时默认逻辑为随机排序
     *
     * #### 搜索条件字段说明
     *
     * | 字段名      | 类型   | 说明             | 取值范围                                                     |
     * | :---------- | :----- | :--------------- | :----------------------------------------------------------- |
     * | app_id      | string | 资源空间ID       | 长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
     * | device_id   | string | 设备ID           | 长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合，建议不少于4个字符。 |
     * | gateway_id  | string | 网关ID           | 长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
     * | product_id  | string | 设备关联的产品ID | 长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
     * | device_name | string | 设备名称         | 长度不超过256，只允许中文、字母、数字、以及_?\&#39;#().,&amp;%@!-等字符的组合，建议不少于4个字符。 |
     * | node_id     | string | 设备标识码       | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）的组合，建议不少于4个字符 |
     * | status      | string | 设备的状态       | ONLINE(在线)、OFFLINE(离线)、ABNORMAL(异常)、INACTIVE(未激活)、FROZEN(冻结) |
     * | node_type   | string | 设备节点类型     | GATEWAY(直连设备或网关)、ENDPOINT(非直连设备)                |
     * | tag_key     | string | 标签键           | 长度不超过64，只允许中文、字母、数字、以及_.-等字符的组合。  |
     * | tag_value   | string | 标签值           | 长度不超过128，只允许中文、字母、数字、以及_.-等字符的组合。 |
     * | sw_version  | string | 软件版本         | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）、英文点(.)的组合。 |
     * | fw_version  | string | 固件版本         | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）、英文点(.)的组合。 |
     * | create_time | string | 设备注册时间     | 格式：yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39;，如：2015-06-06T12:10:10.000Z |
     * | marker      | string | 结果记录ID       | 长度为24的十六进制字符串，如ffffffffffffffffffffffff         |
     *
     * #### 支持的运算符
     *
     * | 运算符  | 支持的字段                               |
     * | ------- | ---------------------------------------- |
     * | &#x3D;       | 所有                                     |
     * | !&#x3D;      | 所有                                     |
     * | &gt;       | create_time、marker                      |
     * | &lt;       | create_time、marker                      |
     * | like    | device_name、node_id、tag_key、tag_value |
     * | in      | 除tag_key、tag_value以外字段             |
     * | not  in | 除tag_key、tag_value以外字段             |
     *
     * #### SQL 限制
     *
     * - like: 只支持前缀匹配，不支持后缀匹配或者通配符匹配。前缀匹配不得少于4个字符，且不能包含任何特殊字符(只允许中文、字母、数字、下划线（_）、连接符（-）). 前缀后必须跟上\&quot;%\&quot;结尾。
     * - 不支持除了count(*)/count(1)以外的其他任何函数。
     * - 不支持其他SQL用法，如嵌套SQL、union、join、别名(Alias)等用法
     * - SQL长度限制为400个字符，单个请求条件最大支持5个。
     * - 不支持\&quot;null\&quot;和空字符串等条件值匹配
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 灵活搜索设备列表
     * @param {SearchSql} searchDevicesRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.searchDevices = function (searchDevicesRequest) {
        var options = (0, exports.ParamCreater)().searchDevices(searchDevicesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定设备的详细信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showDevice = function (showDeviceRequest) {
        var options = (0, exports.ParamCreater)().showDevice(showDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口解冻设备，解除冻结后，设备可以连接上线。该接口仅支持解冻单个设备，如需批量解冻设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 解冻设备
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.unfreezeDevice = function (unfreezeDeviceRequest) {
        var options = (0, exports.ParamCreater)().unfreezeDevice(unfreezeDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定设备的基本信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改设备
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {UpdateDevice} updateDeviceRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateDevice = function (updateDeviceRequest) {
        var options = (0, exports.ParamCreater)().updateDevice(updateDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询指定设备的设备影子信息，包括对设备的期望属性信息（desired区）和设备最新上报的属性信息（reported区）。
     *
     * 设备影子介绍：
     * 设备影子是一个用于存储和检索设备当前状态信息的JSON文档。
     * - 每个设备有且只有一个设备影子，由设备ID唯一标识
     * - 设备影子用于存储设备上报的(状态)属性和应用程序期望的设备(状态)属性
     * - 无论该设备是否在线，都可以通过该影子获取和设置设备的属性
     * - 设备上线或者设备上报属性时，如果desired区和reported区存在差异，则将差异部分下发给设备，配置的预期属性需在产品模型中定义且method具有可写属性“W”才可下发
     *
     * 限制：
     * 设备影子JSON文档中的key不允许特殊字符：点(.)、dollar符号($)、空char(十六进制的ASCII码为00)。如果包含了以上特殊字符则无法正常刷新影子文档。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备影子数据
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showDeviceShadow = function (showDeviceShadowRequest) {
        var options = (0, exports.ParamCreater)().showDeviceShadow(showDeviceShadowRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口配置设备影子的预期属性（desired区），当设备上线或者设备上报属性时把属性下发给设备。
     *
     * 设备影子介绍：
     * 设备影子是一个用于存储和检索设备当前状态信息的JSON文档。
     * - 每个设备有且只有一个设备影子，由设备ID唯一标识
     * - 设备影子用于存储设备上报的(状态)属性和应用程序期望的设备(状态)属性
     * - 无论该设备是否在线，都可以通过该影子获取和设置设备的属性
     * - 设备上线或者设备上报属性时，如果desired区和reported区存在差异，则将差异部分下发给设备，配置的预期属性需在产品模型中定义且method具有可写属性“W”才可下发
     * - 该接口仅支持配置单个设备的设备影子的预期数据，如需多个设备的设备影子配置，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * 限制：
     * 设备影子JSON文档中的key不允许特殊字符：点(.)、dollar符号($)、空char(十六进制的ASCII码为00)。如果包含了以上特殊字符则无法正常刷新影子文档。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 配置设备影子预期数据
     * @param {string} deviceId **参数说明**：设备ID，用于唯一标识一个设备。在注册设备时直接指定，或者由物联网平台分配获得。由物联网平台分配时，生成规则为\&quot;product_id\&quot; + \&quot;_\&quot; + \&quot;node_id\&quot;拼接而成。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {UpdateDesireds} updateDeviceShadowDesiredDataRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateDeviceShadowDesiredData = function (updateDeviceShadowDesiredDataRequest) {
        var options = (0, exports.ParamCreater)().updateDeviceShadowDesiredData(updateDeviceShadowDesiredDataRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 物联网平台可向设备下发消息，应用服务器可调用此接口向指定设备下发消息，以实现对设备的控制。应用将消息下发给平台后，平台返回应用响应结果，平台再将消息发送给设备。平台返回应用响应结果不一定是设备接收结果，建议用户应用通过订阅[[设备消息状态变更通知](https://support.huaweicloud.com/api-iothub/iot_06_v5_01203.html)](tag:hws)[[设备消息状态变更通知](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_01203.html)](tag:hws_hk)，订阅后平台会将设备接收结果推送给订阅的应用。
     * 注意：
     * - 此接口适用于MQTT设备消息下发，暂不支持其他协议接入的设备消息下发。
     * - 此接口仅支持单个设备消息下发，如需多个设备消息下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 下发设备消息
     * @param {string} deviceId **参数说明**：下发消息的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {DeviceMessageRequest} createMessageRequestBody 请求结构体，见请求结构体说明
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createMessage = function (createMessageRequest) {
        var options = (0, exports.ParamCreater)().createMessage(createMessageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询平台下发给设备的消息，平台为每个设备默认最多保存20条消息，超过20条后， 后续的消息会替换下发最早的消息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备消息
     * @param {string} deviceId **参数说明**：下发消息的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listDeviceMessages = function (listDeviceMessagesRequest) {
        var options = (0, exports.ParamCreater)().listDeviceMessages(listDeviceMessagesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询平台下发给设备的指定消息id的消息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询指定消息id的消息
     * @param {string} deviceId **参数说明**：下发消息的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} messageId **参数说明**：下发消息的消息ID，用于唯一标识一个消息，在消息下发时由物联网平台分配获得。 **取值范围**：长度不超过100，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showDeviceMessage = function (showDeviceMessageRequest) {
        var options = (0, exports.ParamCreater)().showDeviceMessage(showDeviceMessageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 用户可调用此接口创建升级包关联OBS对象
     * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建OTA升级包
     * @param {CreateOtaPackage} createOtaPackageRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createOtaPackage = function (createOtaPackageRequest) {
        var options = (0, exports.ParamCreater)().createOtaPackage(createOtaPackageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 用户可调用此接口删除关联OBS对象的升级包信息，不会删除OBS上对象
     * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除OTA升级包
     * @param {string} packageId **参数说明**：升级包ID，用于唯一标识一个升级包。由物联网平台分配获得。 **取值范围**：长度不超过36，只允许字母、数字、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteOtaPackage = function (deleteOtaPackageRequest) {
        var options = (0, exports.ParamCreater)().deleteOtaPackage(deleteOtaPackageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 用户可调用此接口查询关联OBS对象的升级包列表
     * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询OTA升级包列表
     * @param {string} packageType **参数说明**：升级包类型。 **取值范围**：软件包必须设置为：softwarePackage，固件包必须设置为：firmwarePackage。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [appId] **参数说明**：资源空间ID。存在多资源空间的用户需要使用该接口时，建议携带该参数指定查询指定资源空间的升级包列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [productId] **参数说明**：设备关联的产品ID，用于唯一标识一个产品模型，创建产品后获得。方法请参见 [[创建产品](https://support.huaweicloud.com/api-iothub/iot_06_v5_0050.html)](tag:hws)[[创建产品](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0050.html)](tag:hws_hk)。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [version] **参数说明**：升级包版本号。 **取值范围**：长度不超过256，只允许字母、数字、下划线（_）、连接符（-）、英文点（.）的组合。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。**取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listOtaPackageInfo = function (listOtaPackageInfoRequest) {
        var options = (0, exports.ParamCreater)().listOtaPackageInfo(listOtaPackageInfoRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 用户可调用此接口查询关联OBS对象的升级包详情
     * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 获取OTA升级包详情
     * @param {string} packageId **参数说明**：升级包ID，用于唯一标识一个升级包。由物联网平台分配获得。 **取值范围**：长度不超过36，只允许字母、数字、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showOtaPackage = function (showOtaPackageRequest) {
        var options = (0, exports.ParamCreater)().showOtaPackage(showOtaPackageRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口创建产品。此接口仅创建了产品，没有创建和安装插件，如果需要对数据进行编解码，还需要在平台开发和安装插件。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建产品
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {AddProduct} [createProductRequestBody] request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createProduct = function (createProductRequest) {
        var options = (0, exports.ParamCreater)().createProduct(createProductRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除已导入物联网平台的指定产品模型。此接口仅删除了产品，未删除关联的插件，在产品下存在设备时，该产品不允许删除。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除产品
     * @param {string} productId **参数说明**：产品ID，用于唯一标识一个产品，在物联网平台创建产品后由平台分配获得。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，建议携带该参数，指定要删除的产品属于哪个资源空间；若不携带，则优先删除默认资源空间下产品，如默认资源空间下无对应产品，则按照产品创建时间删除最早创建产品。如果用户存在多资源空间，同时又不想携带该参数，可以联系华为技术支持对用户数据做资源空间合并。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteProduct = function (deleteProductRequest) {
        var options = (0, exports.ParamCreater)().deleteProduct(deleteProductRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询已导入物联网平台的产品模型信息列表，了解产品模型的概要信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询产品列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的产品列表，不携带该参数则会查询该用户下所有产品列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listProducts = function (listProductsRequest) {
        var options = (0, exports.ParamCreater)().listProducts(listProductsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询已导入物联网平台的指定产品模型详细信息，包括产品模型的服务、属性、命令等。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询产品
     * @param {string} productId **参数说明**：产品ID，用于唯一标识一个产品，在物联网平台创建产品后由平台分配获得。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，建议携带该参数，指定要查询的产品属于哪个资源空间；若不携带，则优先取默认资源空间下产品，如默认资源空间下无对应产品，则按照产品创建时间取最早创建产品。如果用户存在多资源空间，同时又不想携带该参数，可以联系华为技术支持对用户数据做资源空间合并。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showProduct = function (showProductRequest) {
        var options = (0, exports.ParamCreater)().showProduct(showProductRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改已导入物联网平台的指定产品模型，包括产品模型的服务、属性、命令等。此接口仅修改了产品，未修改和安装插件，如果修改了产品中的service定义，且在平台中有对应的插件，请修改并重新安装插件。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改产品
     * @param {string} productId **参数说明**：产品ID，用于唯一标识一个产品，在物联网平台创建产品后由平台分配获得。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {UpdateProduct} updateProductRequestBody request
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateProduct = function (updateProductRequest) {
        var options = (0, exports.ParamCreater)().updateProduct(updateProductRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 设备的产品模型中定义了物联网平台可向设备下发的属性，应用服务器可调用此接口向设备发送指令用以查询设备的实时属性, 并由设备将属性查询的结果同步返回给应用服务器。
     * 注意：此接口适用于MQTT设备，暂不支持NB-IoT设备。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询设备属性
     * @param {string} deviceId **参数说明**：下发属性的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} serviceId **参数说明**：设备的服务ID，在设备关联的产品模型中定义。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listProperties = function (listPropertiesRequest) {
        var options = (0, exports.ParamCreater)().listProperties(listPropertiesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 设备的产品模型中定义了物联网平台可向设备下发的属性，应用服务器可调用此接口向指定设备下发属性。平台负责将属性以同步方式发送给设备，并将设备执行属性结果同步返回。
     * 注意：此接口适用于MQTT设备，暂不支持NB-IoT设备。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改设备属性
     * @param {string} deviceId **参数说明**：下发属性的设备ID，用于唯一标识一个设备，在注册设备时由物联网平台分配获得。 **取值范围**：长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {DevicePropertiesRequest} updatePropertiesRequestBody 请求结构体，见请求结构体说明
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateProperties = function (updatePropertiesRequest) {
        var options = (0, exports.ParamCreater)().updateProperties(updatePropertiesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台创建一条规则触发条件。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建规则触发条件
     * @param {AddRuleReq} createRoutingRuleRequestBody **参数说明**：请求的body对象，详细请看规则结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createRoutingRule = function (createRoutingRuleRequest) {
        var options = (0, exports.ParamCreater)().createRoutingRule(createRoutingRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台创建一条规则动作。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建规则动作
     * @param {AddActionReq} createRuleActionRequestBody **参数说明**：请求的body对象，详细请看规则结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createRuleAction = function (createRuleActionRequest) {
        var options = (0, exports.ParamCreater)().createRuleAction(createRuleActionRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除物联网平台中的指定规则条件。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除规则触发条件
     * @param {string} ruleId **参数说明**：规则条件ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteRoutingRule = function (deleteRoutingRuleRequest) {
        var options = (0, exports.ParamCreater)().deleteRoutingRule(deleteRoutingRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除物联网平台中的指定规则动作。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除规则动作
     * @param {string} actionId **参数说明**：规则动作ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteRuleAction = function (deleteRuleActionRequest) {
        var options = (0, exports.ParamCreater)().deleteRuleAction(deleteRuleActionRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中设置的规则条件列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则条件列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [resource] **参数说明**：订阅的资源名称。 **取值范围**： - device：设备。 - device.property：设备属性。 - device.message：设备消息。 - device.message.status：设备消息状态。 - device.status：设备状态。 - batchtask：批量任务。 - product：产品。 - device.command.status：设备异步命令状态。
     * @param {string} [event] **参数说明**：订阅的资源事件。 **取值范围**：与资源有关，不同的资源，事件不同。 event需要与resource关联使用，具体的“resource：event”映射关系如下： - device：create（设备添加） - device：delete（设备删除） - device：update（设备更新） - device.status：update （设备状态变更） - device.property：report（设备属性上报） - device.message：report（设备消息上报） - device.message.status：update（设备消息状态变更） - batchtask：update （批量任务状态变更） - product：create（产品添加） - product：delete（产品删除） - product：update（产品更新） - device.command.status：update（设备异步命令状态更新）。
     * @param {string} [appType] **参数说明**：租户规则的生效范围。 **取值范围**： - GLOBAL：生效范围为租户级。 - APP：生效范围为资源空间级。如果类型为APP，可携带app_id查询指定资源空间下的规则动作列表，不携带app_id则查询[[默认资源空间](https://support.huaweicloud.com/usermanual-iothub/iot_01_0006.html#section0)](tag:hws)[[默认资源空间](https://support.huaweicloud.com/intl/zh-cn/usermanual-iothub/iot_01_0006.html#section0)](tag:hws_hk)下的规则列表。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，携带app_id查询指定资源空间下的规则动作列表，不携带app_id则查询[[默认资源空间](https://support.huaweicloud.com/usermanual-iothub/iot_01_0006.html#section0)](tag:hws)[[默认资源空间](https://support.huaweicloud.com/intl/zh-cn/usermanual-iothub/iot_01_0006.html#section0)](tag:hws_hk)下的规则动作列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [ruleName] **参数说明**：用户自定义的规则名称
     * @param {boolean} [active] **参数说明**：规则条件的状态是否为激活。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。默认每页10条记录，最大设定每页50条记录。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。 - 限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listRoutingRules = function (listRoutingRulesRequest) {
        var options = (0, exports.ParamCreater)().listRoutingRules(listRoutingRulesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中设置的规则动作列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则动作列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [ruleId] **参数说明**：规则触发条件ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [channel] **参数说明**：规则动作的类型。 **取值范围**： - HTTP_FORWARDING：HTTP服务消息类型。 - DIS_FORWARDING：转发DIS服务消息类型。 - OBS_FORWARDING：转发OBS服务消息类型。 - AMQP_FORWARDING：转发AMQP服务消息类型。 - DMS_KAFKA_FORWARDING：转发kafka消息类型。[ - ROMA_FORWARDING：转发Roma消息类型。（仅企业版支持） - INFLUXDB_FORWARDING：转发InfluxDB消息类型。（仅标准版和企业版支持） - MYSQL_FORWARDING：转发MySQL消息类型。（仅标准版和企业版支持） - FUNCTIONGRAPH_FORWARDING：转发FunctionGraph消息类型。（仅标准版和企业版支持） - MRS_KAFKA_FORWARDING：转发MRS_KAFKA消息类型。（仅企业版支持） - DMS_ROCKETMQ_FORWARDING：转发RocketMQ消息类型。（仅标准版和企业版支持）](tag:hws)[ - INFLUXDB_FORWARDING：转发InfluxDB消息类型。 - MYSQL_FORWARDING：转发MySQL消息类型。 - FUNCTIONGRAPH_FORWARDING：转发FunctionGraph消息类型。](tag:hws_hk)
     * @param {string} [appType] **参数说明**：租户规则的生效范围。 **取值范围**： - GLOBAL：生效范围为租户级。 - APP：生效范围为资源空间级。如果类型为APP，可携带app_id查询指定资源空间下的规则动作列表，不携带app_id则查询[[默认资源空间](https://support.huaweicloud.com/usermanual-iothub/iot_01_0006.html#section0)](tag:hws)[[默认资源空间](https://support.huaweicloud.com/intl/zh-cn/usermanual-iothub/iot_01_0006.html#section0)](tag:hws_hk)下的规则动作列表。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，rule_id不携带且app_type为APP时，该参数生效，可携带app_id查询指定资源空间下的规则动作列表，不携带app_id则查询[[默认资源空间](https://support.huaweicloud.com/usermanual-iothub/iot_01_0006.html#section0)](tag:hws)[[默认资源空间](https://support.huaweicloud.com/intl/zh-cn/usermanual-iothub/iot_01_0006.html#section0)](tag:hws_hk)下的规则动作列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。默认每页10条记录，最大设定每页50条记录。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。 - 限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listRuleActions = function (listRuleActionsRequest) {
        var options = (0, exports.ParamCreater)().listRuleActions(listRuleActionsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定规则条件的配置信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则条件
     * @param {string} ruleId **参数说明**：规则条件ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showRoutingRule = function (showRoutingRuleRequest) {
        var options = (0, exports.ParamCreater)().showRoutingRule(showRoutingRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定规则动作的配置信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则动作
     * @param {string} actionId **参数说明**：规则动作ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showRuleAction = function (showRuleActionRequest) {
        var options = (0, exports.ParamCreater)().showRuleAction(showRuleActionRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定规则条件的配置参数。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改规则触发条件
     * @param {string} ruleId **参数说明**：规则条件ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {UpdateRuleReq} updateRoutingRuleRequestBody **参数说明**：请求的body对象，详细请看规则结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateRoutingRule = function (updateRoutingRuleRequest) {
        var options = (0, exports.ParamCreater)().updateRoutingRule(updateRoutingRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定规则动作的配置。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改规则动作
     * @param {string} actionId **参数说明**：规则动作ID。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {UpdateActionReq} updateRuleActionRequestBody **参数说明**：请求的body对象，详细请看规则结构体
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateRuleAction = function (updateRuleActionRequest) {
        var options = (0, exports.ParamCreater)().updateRuleAction(updateRuleActionRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定规则的状态，激活或者去激活规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改规则状态
     * @param {string} ruleId **参数说明**：规则Id。 **取值范围**：长度不超过32，只允许字母、数字的组合。
     * @param {RuleStatus} changeRuleStatusRequestBody **参数说明**：请求的body对象，详细请看规则结构体。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.changeRuleStatus = function (changeRuleStatusRequest) {
        var options = (0, exports.ParamCreater)().changeRuleStatus(changeRuleStatusRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口在物联网平台创建一条规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 创建规则
     * @param {Rule} createRuleRequestBody **参数说明**：请求的body对象，详细请看规则结构体。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.createRule = function (createRuleRequest) {
        var options = (0, exports.ParamCreater)().createRule(createRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口删除物联网平台中的指定规则。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 删除规则
     * @param {string} ruleId **参数说明**：规则ID，用于唯一标识一条规则，在创建规则时由物联网平台分配获得。 **取值范围**：长度不超过32，只允许字母、数字的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.deleteRule = function (deleteRuleRequest) {
        var options = (0, exports.ParamCreater)().deleteRule(deleteRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中设置的规则列表。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则列表
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {string} [appId] **参数说明**：资源空间ID。此参数为非必选参数，存在多资源空间的用户需要使用该接口时，可以携带该参数查询指定资源空间下的规则列表，不携带该参数则会查询该用户下所有规则列表。 **取值范围**：长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。
     * @param {string} [ruleType] **参数说明**：规则类型。此参数为非必选参数，指定对应的规则类型结果进行返回，不携带该参数则会返回所有类型规则。 **取值范围**： - DEVICE_LINKAGE：云端联动规则。  - DEVICE_SIDE：端侧规则。
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。默认为0，取值范围为0-500的整数。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listRules = function (listRulesRequest) {
        var options = (0, exports.ParamCreater)().listRules(listRulesRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询物联网平台中指定规则的配置信息。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 查询规则
     * @param {string} ruleId **参数说明**：规则ID，用于唯一标识一条规则，在创建规则时由物联网平台分配获得。 **取值范围**：长度不超过32，只允许字母、数字的组合。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.showRule = function (showRuleRequest) {
        var options = (0, exports.ParamCreater)().showRule(showRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口修改物联网平台中指定规则的配置。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 修改规则
     * @param {string} ruleId **参数说明**：规则ID，用于唯一标识一条规则，在创建规则时由物联网平台分配获得。 **取值范围**：长度不超过32，只允许字母、数字的组合。
     * @param {Rule} updateRuleRequestBody **参数说明**：请求的body对象，详细请看规则结构体。
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.updateRule = function (updateRuleRequest) {
        var options = (0, exports.ParamCreater)().updateRule(updateRuleRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口查询绑定了指定标签的资源。当前支持标签的资源有Device(设备)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 按标签查询资源
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {number} [limit] **参数说明**：分页查询时每页显示的记录数。 **取值范围**：1-50的整数，默认值为10。
     * @param {string} [marker] **参数说明**：上一次分页查询结果中最后一条记录的ID，在上一次分页查询时由物联网平台返回获得。分页查询时物联网平台是按marker也就是记录ID降序查询的，越新的数据记录ID也会越大。若填写marker，则本次只查询记录ID小于marker的数据记录。若不填写，则从记录ID最大也就是最新的一条数据开始查询。如果需要依次查询所有数据，则每次查询时必须填写上一次查询响应中的marker值。 **取值范围**：长度为24的十六进制字符串，默认值为ffffffffffffffffffffffff。
     * @param {number} [offset] **参数说明**：表示从marker后偏移offset条记录开始查询。当offset为0时，表示从marker后第一条记录开始输出。限制offset最大值是出于API性能考虑，您可以搭配marker使用该参数实现翻页，例如每页50条记录，1-11页内都可以直接使用offset跳转到指定页，但到11页后，由于offset限制为500，您需要使用第11页返回的marker作为下次查询的marker，以实现翻页到12-22页。 **取值范围**：0-500的整数，默认为0。
     * @param {QueryResourceByTagsDTO} [listResourcesByTagsRequestBody] 请求结构体，见请求结构体说明
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.listResourcesByTags = function (listResourcesByTagsRequest) {
        var options = (0, exports.ParamCreater)().listResourcesByTags(listResourcesByTagsRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口为指定资源绑定标签。当前支持标签的资源有Device(设备)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 绑定标签
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {BindTagsDTO} [tagDeviceRequestBody] **参数说明**：请求结构体，见请求结构体说明
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.tagDevice = function (tagDeviceRequest) {
        var options = (0, exports.ParamCreater)().tagDevice(tagDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    /**
     * 应用服务器可调用此接口为指定资源解绑标签。当前支持标签的资源有Device(设备)。
     *
     * Please refer to HUAWEI cloud API Explorer for details.
     *
     * @summary 解绑标签
     * @param {string} [instanceId] **参数说明**：实例ID。物理多租下各实例的唯一标识，一般华为云租户无需携带该参数，仅在物理多租场景下从管理面访问API时需要携带该参数。您可以在IoTDA管理控制台界面，选择左侧导航栏“总览”页签查看当前实例的ID
     * @param {UnbindTagsDTO} [untagDeviceRequestBody] **参数说明**：请求结构体，见请求结构体说明
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    IoTDAClient.prototype.untagDevice = function (untagDeviceRequest) {
        var options = (0, exports.ParamCreater)().untagDevice(untagDeviceRequest);
        // @ts-ignore
        options['responseHeaders'] = [''];
        return this.hcClient.sendRequest(options);
    };
    return IoTDAClient;
}());
exports.IoTDAClient = IoTDAClient;
var ParamCreater = function () {
    return {
        /**
         * 接入凭证是用于客户端使用AMQP等协议与平台建链的一个认证凭据。只保留一条记录，如果重复调用只会重置接入凭证，使得之前的失效。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAccessCode: function (createAccessCodeRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/auth/accesscode",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createAccessCodeRequest !== null && createAccessCodeRequest !== undefined) {
                if (createAccessCodeRequest instanceof CreateAccessCodeRequest_1.CreateAccessCodeRequest) {
                    body = createAccessCodeRequest.body;
                    instanceId = createAccessCodeRequest.instanceId;
                }
                else {
                    body = createAccessCodeRequest['body'];
                    instanceId = createAccessCodeRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台创建一个AMQP队列。每个租户只能创建100个队列，若超过规格，则创建失败，若队列名称与已有的队列名称相同，则创建失败。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addQueue: function (addQueueRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/amqp-queues",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (addQueueRequest !== null && addQueueRequest !== undefined) {
                if (addQueueRequest instanceof AddQueueRequest_1.AddQueueRequest) {
                    body = addQueueRequest.body;
                    instanceId = addQueueRequest.instanceId;
                }
                else {
                    body = addQueueRequest['body'];
                    instanceId = addQueueRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中的AMQP队列信息列表。可通过队列名称作模糊查询，支持分页。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        batchShowQueue: function (batchShowQueueRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/amqp-queues",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var queueName;
            var limit;
            var marker;
            var offset;
            if (batchShowQueueRequest !== null && batchShowQueueRequest !== undefined) {
                if (batchShowQueueRequest instanceof BatchShowQueueRequest_1.BatchShowQueueRequest) {
                    instanceId = batchShowQueueRequest.instanceId;
                    queueName = batchShowQueueRequest.queueName;
                    limit = batchShowQueueRequest.limit;
                    marker = batchShowQueueRequest.marker;
                    offset = batchShowQueueRequest.offset;
                }
                else {
                    instanceId = batchShowQueueRequest['Instance-Id'];
                    queueName = batchShowQueueRequest['queue_name'];
                    limit = batchShowQueueRequest['limit'];
                    marker = batchShowQueueRequest['marker'];
                    offset = batchShowQueueRequest['offset'];
                }
            }
            if (queueName !== null && queueName !== undefined) {
                localVarQueryParameter['queue_name'] = queueName;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台上删除指定AMQP队列。若当前队列正在使用，则会删除失败。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteQueue: function (deleteQueueRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/amqp-queues/{queue_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var queueId;
            var instanceId;
            if (deleteQueueRequest !== null && deleteQueueRequest !== undefined) {
                if (deleteQueueRequest instanceof DeleteQueueRequest_1.DeleteQueueRequest) {
                    queueId = deleteQueueRequest.queueId;
                    instanceId = deleteQueueRequest.instanceId;
                }
                else {
                    queueId = deleteQueueRequest['queue_id'];
                    instanceId = deleteQueueRequest['Instance-Id'];
                }
            }
            if (queueId === null || queueId === undefined) {
                throw new RequiredError('queueId', 'Required parameter queueId was null or undefined when calling deleteQueue.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'queue_id': queueId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定队列的详细信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showQueue: function (showQueueRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/amqp-queues/{queue_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var queueId;
            var instanceId;
            if (showQueueRequest !== null && showQueueRequest !== undefined) {
                if (showQueueRequest instanceof ShowQueueRequest_1.ShowQueueRequest) {
                    queueId = showQueueRequest.queueId;
                    instanceId = showQueueRequest.instanceId;
                }
                else {
                    queueId = showQueueRequest['queue_id'];
                    instanceId = showQueueRequest['Instance-Id'];
                }
            }
            if (queueId === null || queueId === undefined) {
                throw new RequiredError('queueId', 'Required parameter queueId was null or undefined when calling showQueue.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'queue_id': queueId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口创建资源空间。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addApplication: function (addApplicationRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/apps",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (addApplicationRequest !== null && addApplicationRequest !== undefined) {
                if (addApplicationRequest instanceof AddApplicationRequest_1.AddApplicationRequest) {
                    body = addApplicationRequest.body;
                    instanceId = addApplicationRequest.instanceId;
                }
                else {
                    body = addApplicationRequest['body'];
                    instanceId = addApplicationRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除指定资源空间。删除资源空间属于高危操作，删除资源空间后，该空间下的产品、设备等资源将不可用，请谨慎操作！
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteApplication: function (deleteApplicationRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/apps/{app_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var appId;
            var instanceId;
            if (deleteApplicationRequest !== null && deleteApplicationRequest !== undefined) {
                if (deleteApplicationRequest instanceof DeleteApplicationRequest_1.DeleteApplicationRequest) {
                    appId = deleteApplicationRequest.appId;
                    instanceId = deleteApplicationRequest.instanceId;
                }
                else {
                    appId = deleteApplicationRequest['app_id'];
                    instanceId = deleteApplicationRequest['Instance-Id'];
                }
            }
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId', 'Required parameter appId was null or undefined when calling deleteApplication.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'app_id': appId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口查询指定资源空间详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showApplication: function (showApplicationRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/apps/{app_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var appId;
            var instanceId;
            if (showApplicationRequest !== null && showApplicationRequest !== undefined) {
                if (showApplicationRequest instanceof ShowApplicationRequest_1.ShowApplicationRequest) {
                    appId = showApplicationRequest.appId;
                    instanceId = showApplicationRequest.instanceId;
                }
                else {
                    appId = showApplicationRequest['app_id'];
                    instanceId = showApplicationRequest['Instance-Id'];
                }
            }
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId', 'Required parameter appId was null or undefined when calling showApplication.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'app_id': appId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 资源空间对应的是物联网平台原有的应用，在物联网平台的含义与应用一致，只是变更了名称。应用服务器可以调用此接口查询资源空间列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showApplications: function (showApplicationsRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/apps",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var defaultApp;
            if (showApplicationsRequest !== null && showApplicationsRequest !== undefined) {
                if (showApplicationsRequest instanceof ShowApplicationsRequest_1.ShowApplicationsRequest) {
                    instanceId = showApplicationsRequest.instanceId;
                    defaultApp = showApplicationsRequest.defaultApp;
                }
                else {
                    instanceId = showApplicationsRequest['Instance-Id'];
                    defaultApp = showApplicationsRequest['default_app'];
                }
            }
            if (defaultApp !== null && defaultApp !== undefined) {
                localVarQueryParameter['default_app'] = defaultApp;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 设备的产品模型中定义了物联网平台可向设备下发的命令，应用服务器可调用此接口向指定设备下发异步命令，以实现对设备的控制。平台负责将命令发送给设备，并将设备执行命令结果异步通知应用服务器。 命令执行结果支持灵活的数据流转，应用服务器通过调用物联网平台的创建规则触发条件（Resource:device.command.status，Event:update）、创建规则动作并激活规则后，当命令状态变更时，物联网平台会根据规则将结果发送到规则指定的服务器，如用户自定义的HTTP服务器，AMQP服务器，以及华为云的其他储存服务器等, 详情参考[[设备命令状态变更通知](https://support.huaweicloud.com/api-iothub/iot_06_v5_01212.html)](tag:hws)[[设备命令状态变更通知](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_01212.html)](tag:hws_hk)。
         * 注意：
         * - 此接口适用于NB设备异步命令下发，暂不支持其他协议类型设备命令下发。
         * - 此接口仅支持单个设备异步命令下发，如需多个设备异步命令下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createAsyncCommand: function (createAsyncCommandRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/async-commands",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (createAsyncCommandRequest !== null && createAsyncCommandRequest !== undefined) {
                if (createAsyncCommandRequest instanceof CreateAsyncCommandRequest_1.CreateAsyncCommandRequest) {
                    deviceId = createAsyncCommandRequest.deviceId;
                    body = createAsyncCommandRequest.body;
                    instanceId = createAsyncCommandRequest.instanceId;
                }
                else {
                    deviceId = createAsyncCommandRequest['device_id'];
                    body = createAsyncCommandRequest['body'];
                    instanceId = createAsyncCommandRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling createAsyncCommand.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 物联网平台可查询指定id的命令。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showAsyncDeviceCommand: function (showAsyncDeviceCommandRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}/async-commands/{command_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var commandId;
            var instanceId;
            if (showAsyncDeviceCommandRequest !== null && showAsyncDeviceCommandRequest !== undefined) {
                if (showAsyncDeviceCommandRequest instanceof ShowAsyncDeviceCommandRequest_1.ShowAsyncDeviceCommandRequest) {
                    deviceId = showAsyncDeviceCommandRequest.deviceId;
                    commandId = showAsyncDeviceCommandRequest.commandId;
                    instanceId = showAsyncDeviceCommandRequest.instanceId;
                }
                else {
                    deviceId = showAsyncDeviceCommandRequest['device_id'];
                    commandId = showAsyncDeviceCommandRequest['command_id'];
                    instanceId = showAsyncDeviceCommandRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling showAsyncDeviceCommand.');
            }
            if (commandId === null || commandId === undefined) {
                throw new RequiredError('commandId', 'Required parameter commandId was null or undefined when calling showAsyncDeviceCommand.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, 'command_id': commandId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口为创建批量处理任务，对多个设备进行批量操作。当前支持批量软固件升级、批量创建设备、批量删除设备、批量冻结设备、批量解冻设备、批量创建命令、批量创建消息任务。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createBatchTask: function (createBatchTaskRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/batchtasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createBatchTaskRequest !== null && createBatchTaskRequest !== undefined) {
                if (createBatchTaskRequest instanceof CreateBatchTaskRequest_1.CreateBatchTaskRequest) {
                    body = createBatchTaskRequest.body;
                    instanceId = createBatchTaskRequest.instanceId;
                }
                else {
                    body = createBatchTaskRequest['body'];
                    instanceId = createBatchTaskRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中批量任务列表，每一个任务又包括具体的任务内容、任务状态、任务完成情况统计等。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBatchTasks: function (listBatchTasksRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/batchtasks",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var taskType;
            var instanceId;
            var appId;
            var status;
            var limit;
            var marker;
            var offset;
            if (listBatchTasksRequest !== null && listBatchTasksRequest !== undefined) {
                if (listBatchTasksRequest instanceof ListBatchTasksRequest_1.ListBatchTasksRequest) {
                    taskType = listBatchTasksRequest.taskType;
                    instanceId = listBatchTasksRequest.instanceId;
                    appId = listBatchTasksRequest.appId;
                    status = listBatchTasksRequest.status;
                    limit = listBatchTasksRequest.limit;
                    marker = listBatchTasksRequest.marker;
                    offset = listBatchTasksRequest.offset;
                }
                else {
                    taskType = listBatchTasksRequest['task_type'];
                    instanceId = listBatchTasksRequest['Instance-Id'];
                    appId = listBatchTasksRequest['app_id'];
                    status = listBatchTasksRequest['status'];
                    limit = listBatchTasksRequest['limit'];
                    marker = listBatchTasksRequest['marker'];
                    offset = listBatchTasksRequest['offset'];
                }
            }
            if (taskType === null || taskType === undefined) {
                throw new RequiredError('taskType', 'Required parameter taskType was null or undefined when calling listBatchTasks.');
            }
            if (taskType !== null && taskType !== undefined) {
                localVarQueryParameter['task_type'] = taskType;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定批量任务的信息，包括任务内容、任务状态、任务完成情况统计以及子任务列表等。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showBatchTask: function (showBatchTaskRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/batchtasks/{task_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var taskId;
            var instanceId;
            var limit;
            var marker;
            var offset;
            if (showBatchTaskRequest !== null && showBatchTaskRequest !== undefined) {
                if (showBatchTaskRequest instanceof ShowBatchTaskRequest_1.ShowBatchTaskRequest) {
                    taskId = showBatchTaskRequest.taskId;
                    instanceId = showBatchTaskRequest.instanceId;
                    limit = showBatchTaskRequest.limit;
                    marker = showBatchTaskRequest.marker;
                    offset = showBatchTaskRequest.offset;
                }
                else {
                    taskId = showBatchTaskRequest['task_id'];
                    instanceId = showBatchTaskRequest['Instance-Id'];
                    limit = showBatchTaskRequest['limit'];
                    marker = showBatchTaskRequest['marker'];
                    offset = showBatchTaskRequest['offset'];
                }
            }
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId', 'Required parameter taskId was null or undefined when calling showBatchTask.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'task_id': taskId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除批量任务文件。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteBatchTaskFile: function (deleteBatchTaskFileRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/batchtask-files/{file_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var fileId;
            var instanceId;
            if (deleteBatchTaskFileRequest !== null && deleteBatchTaskFileRequest !== undefined) {
                if (deleteBatchTaskFileRequest instanceof DeleteBatchTaskFileRequest_1.DeleteBatchTaskFileRequest) {
                    fileId = deleteBatchTaskFileRequest.fileId;
                    instanceId = deleteBatchTaskFileRequest.instanceId;
                }
                else {
                    fileId = deleteBatchTaskFileRequest['file_id'];
                    instanceId = deleteBatchTaskFileRequest['Instance-Id'];
                }
            }
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling deleteBatchTaskFile.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'file_id': fileId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询批量任务文件列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listBatchTaskFiles: function (listBatchTaskFilesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/batchtask-files",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var instanceId;
            if (listBatchTaskFilesRequest !== null && listBatchTaskFilesRequest !== undefined) {
                if (listBatchTaskFilesRequest instanceof ListBatchTaskFilesRequest_1.ListBatchTaskFilesRequest) {
                    instanceId = listBatchTaskFilesRequest.instanceId;
                }
                else {
                    instanceId = listBatchTaskFilesRequest['Instance-Id'];
                }
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口向订阅了指定Topic的所有在线设备发布广播消息。应用将广播消息下发给平台后，平台会先返回应用响应结果，再将消息广播给设备。
         * 注意：
         * - 此接口只适用于使用MQTT协议接入的设备。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        broadcastMessage: function (broadcastMessageRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/broadcast-messages",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (broadcastMessageRequest !== null && broadcastMessageRequest !== undefined) {
                if (broadcastMessageRequest instanceof BroadcastMessageRequest_1.BroadcastMessageRequest) {
                    body = broadcastMessageRequest.body;
                    instanceId = broadcastMessageRequest.instanceId;
                }
                else {
                    body = broadcastMessageRequest['body'];
                    instanceId = broadcastMessageRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台上传设备CA证书
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addCertificate: function (addCertificateRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/certificates",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var spAuthToken;
            var stageAuthToken;
            var instanceId;
            if (addCertificateRequest !== null && addCertificateRequest !== undefined) {
                if (addCertificateRequest instanceof AddCertificateRequest_1.AddCertificateRequest) {
                    body = addCertificateRequest.body;
                    spAuthToken = addCertificateRequest.spAuthToken;
                    stageAuthToken = addCertificateRequest.stageAuthToken;
                    instanceId = addCertificateRequest.instanceId;
                }
                else {
                    body = addCertificateRequest['body'];
                    spAuthToken = addCertificateRequest['Sp-Auth-Token'];
                    stageAuthToken = addCertificateRequest['Stage-Auth-Token'];
                    instanceId = addCertificateRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (spAuthToken !== undefined && spAuthToken !== null) {
                localVarHeaderParameter['Sp-Auth-Token'] = String(spAuthToken);
            }
            if (stageAuthToken !== undefined && stageAuthToken !== null) {
                localVarHeaderParameter['Stage-Auth-Token'] = String(stageAuthToken);
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台验证设备的CA证书，目的是为了验证用户持有设备CA证书的私钥
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        checkCertificate: function (checkCertificateRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/certificates/{certificate_id}/action",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var body;
            var certificateId;
            var actionId;
            var spAuthToken;
            var stageAuthToken;
            var instanceId;
            if (checkCertificateRequest !== null && checkCertificateRequest !== undefined) {
                if (checkCertificateRequest instanceof CheckCertificateRequest_1.CheckCertificateRequest) {
                    certificateId = checkCertificateRequest.certificateId;
                    actionId = checkCertificateRequest.actionId;
                    body = checkCertificateRequest.body;
                    spAuthToken = checkCertificateRequest.spAuthToken;
                    stageAuthToken = checkCertificateRequest.stageAuthToken;
                    instanceId = checkCertificateRequest.instanceId;
                }
                else {
                    certificateId = checkCertificateRequest['certificate_id'];
                    actionId = checkCertificateRequest['action_id'];
                    body = checkCertificateRequest['body'];
                    spAuthToken = checkCertificateRequest['Sp-Auth-Token'];
                    stageAuthToken = checkCertificateRequest['Stage-Auth-Token'];
                    instanceId = checkCertificateRequest['Instance-Id'];
                }
            }
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling checkCertificate.');
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling checkCertificate.');
            }
            if (actionId !== null && actionId !== undefined) {
                localVarQueryParameter['action_id'] = actionId;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (spAuthToken !== undefined && spAuthToken !== null) {
                localVarHeaderParameter['Sp-Auth-Token'] = String(spAuthToken);
            }
            if (stageAuthToken !== undefined && stageAuthToken !== null) {
                localVarHeaderParameter['Stage-Auth-Token'] = String(stageAuthToken);
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'certificate_id': certificateId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台删除设备CA证书
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteCertificate: function (deleteCertificateRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/certificates/{certificate_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var certificateId;
            var spAuthToken;
            var stageAuthToken;
            var instanceId;
            if (deleteCertificateRequest !== null && deleteCertificateRequest !== undefined) {
                if (deleteCertificateRequest instanceof DeleteCertificateRequest_1.DeleteCertificateRequest) {
                    certificateId = deleteCertificateRequest.certificateId;
                    spAuthToken = deleteCertificateRequest.spAuthToken;
                    stageAuthToken = deleteCertificateRequest.stageAuthToken;
                    instanceId = deleteCertificateRequest.instanceId;
                }
                else {
                    certificateId = deleteCertificateRequest['certificate_id'];
                    spAuthToken = deleteCertificateRequest['Sp-Auth-Token'];
                    stageAuthToken = deleteCertificateRequest['Stage-Auth-Token'];
                    instanceId = deleteCertificateRequest['Instance-Id'];
                }
            }
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId', 'Required parameter certificateId was null or undefined when calling deleteCertificate.');
            }
            if (spAuthToken !== undefined && spAuthToken !== null) {
                localVarHeaderParameter['Sp-Auth-Token'] = String(spAuthToken);
            }
            if (stageAuthToken !== undefined && stageAuthToken !== null) {
                localVarHeaderParameter['Stage-Auth-Token'] = String(stageAuthToken);
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'certificate_id': certificateId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台获取设备CA证书列表
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listCertificates: function (listCertificatesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/certificates",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var spAuthToken;
            var stageAuthToken;
            var instanceId;
            var appId;
            var limit;
            var marker;
            var offset;
            if (listCertificatesRequest !== null && listCertificatesRequest !== undefined) {
                if (listCertificatesRequest instanceof ListCertificatesRequest_1.ListCertificatesRequest) {
                    spAuthToken = listCertificatesRequest.spAuthToken;
                    stageAuthToken = listCertificatesRequest.stageAuthToken;
                    instanceId = listCertificatesRequest.instanceId;
                    appId = listCertificatesRequest.appId;
                    limit = listCertificatesRequest.limit;
                    marker = listCertificatesRequest.marker;
                    offset = listCertificatesRequest.offset;
                }
                else {
                    spAuthToken = listCertificatesRequest['Sp-Auth-Token'];
                    stageAuthToken = listCertificatesRequest['Stage-Auth-Token'];
                    instanceId = listCertificatesRequest['Instance-Id'];
                    appId = listCertificatesRequest['app_id'];
                    limit = listCertificatesRequest['limit'];
                    marker = listCertificatesRequest['marker'];
                    offset = listCertificatesRequest['offset'];
                }
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (spAuthToken !== undefined && spAuthToken !== null) {
                localVarHeaderParameter['Sp-Auth-Token'] = String(spAuthToken);
            }
            if (stageAuthToken !== undefined && stageAuthToken !== null) {
                localVarHeaderParameter['Stage-Auth-Token'] = String(stageAuthToken);
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 设备的产品模型中定义了物联网平台可向设备下发的命令，应用服务器可调用此接口向指定设备下发命令，以实现对设备的同步控制。平台负责将命令以同步方式发送给设备，并将设备执行命令结果同步返回, 如果设备没有响应，平台会返回给应用服务器超时，平台超时时间是20秒。如果命令下发需要超过20秒，建议采用[[消息下发](https://support.huaweicloud.com/api-iothub/iot_06_v5_0059.html)](tag:hws)[[消息下发](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0059.html)](tag:hws_hk)。
         * 注意：
         * - 此接口适用于MQTT设备同步命令下发，暂不支持NB-IoT设备命令下发。
         * - 此接口仅支持单个设备同步命令下发，如需多个设备同步命令下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createCommand: function (createCommandRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/commands",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (createCommandRequest !== null && createCommandRequest !== undefined) {
                if (createCommandRequest instanceof CreateCommandRequest_1.CreateCommandRequest) {
                    deviceId = createCommandRequest.deviceId;
                    body = createCommandRequest.body;
                    instanceId = createCommandRequest.instanceId;
                }
                else {
                    deviceId = createCommandRequest['device_id'];
                    body = createCommandRequest['body'];
                    instanceId = createCommandRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling createCommand.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口新建设备组，一个华为云账号下最多可有1,000个设备组，包括父设备组和子设备组。设备组的最大层级关系不超过5层，即群组形成的关系树最大深度不超过5。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addDeviceGroup: function (addDeviceGroupRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/device-group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (addDeviceGroupRequest !== null && addDeviceGroupRequest !== undefined) {
                if (addDeviceGroupRequest instanceof AddDeviceGroupRequest_1.AddDeviceGroupRequest) {
                    instanceId = addDeviceGroupRequest.instanceId;
                    body = addDeviceGroupRequest.body;
                }
                else {
                    instanceId = addDeviceGroupRequest['Instance-Id'];
                    body = addDeviceGroupRequest['body'];
                }
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口管理设备组中的设备。单个设备组内最多添加20,000个设备，一个设备最多可以被添加到10个设备组中。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createOrDeleteDeviceInGroup: function (createOrDeleteDeviceInGroupRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/device-group/{group_id}/action",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var groupId;
            var actionId;
            var deviceId;
            var instanceId;
            if (createOrDeleteDeviceInGroupRequest !== null && createOrDeleteDeviceInGroupRequest !== undefined) {
                if (createOrDeleteDeviceInGroupRequest instanceof CreateOrDeleteDeviceInGroupRequest_1.CreateOrDeleteDeviceInGroupRequest) {
                    groupId = createOrDeleteDeviceInGroupRequest.groupId;
                    actionId = createOrDeleteDeviceInGroupRequest.actionId;
                    deviceId = createOrDeleteDeviceInGroupRequest.deviceId;
                    instanceId = createOrDeleteDeviceInGroupRequest.instanceId;
                }
                else {
                    groupId = createOrDeleteDeviceInGroupRequest['group_id'];
                    actionId = createOrDeleteDeviceInGroupRequest['action_id'];
                    deviceId = createOrDeleteDeviceInGroupRequest['device_id'];
                    instanceId = createOrDeleteDeviceInGroupRequest['Instance-Id'];
                }
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId', 'Required parameter groupId was null or undefined when calling createOrDeleteDeviceInGroup.');
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling createOrDeleteDeviceInGroup.');
            }
            if (actionId !== null && actionId !== undefined) {
                localVarQueryParameter['action_id'] = actionId;
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling createOrDeleteDeviceInGroup.');
            }
            if (deviceId !== null && deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'group_id': groupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除指定设备组，如果该设备组存在子设备组或者该设备组中存在设备，必须先删除子设备组并将设备从该设备组移除，才能删除该设备组。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteDeviceGroup: function (deleteDeviceGroupRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/device-group/{group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var groupId;
            var instanceId;
            if (deleteDeviceGroupRequest !== null && deleteDeviceGroupRequest !== undefined) {
                if (deleteDeviceGroupRequest instanceof DeleteDeviceGroupRequest_1.DeleteDeviceGroupRequest) {
                    groupId = deleteDeviceGroupRequest.groupId;
                    instanceId = deleteDeviceGroupRequest.instanceId;
                }
                else {
                    groupId = deleteDeviceGroupRequest['group_id'];
                    instanceId = deleteDeviceGroupRequest['Instance-Id'];
                }
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId', 'Required parameter groupId was null or undefined when calling deleteDeviceGroup.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'group_id': groupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中的设备组信息列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listDeviceGroups: function (listDeviceGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/device-group",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var limit;
            var marker;
            var offset;
            var lastModifiedTime;
            var appId;
            if (listDeviceGroupsRequest !== null && listDeviceGroupsRequest !== undefined) {
                if (listDeviceGroupsRequest instanceof ListDeviceGroupsRequest_1.ListDeviceGroupsRequest) {
                    instanceId = listDeviceGroupsRequest.instanceId;
                    limit = listDeviceGroupsRequest.limit;
                    marker = listDeviceGroupsRequest.marker;
                    offset = listDeviceGroupsRequest.offset;
                    lastModifiedTime = listDeviceGroupsRequest.lastModifiedTime;
                    appId = listDeviceGroupsRequest.appId;
                }
                else {
                    instanceId = listDeviceGroupsRequest['Instance-Id'];
                    limit = listDeviceGroupsRequest['limit'];
                    marker = listDeviceGroupsRequest['marker'];
                    offset = listDeviceGroupsRequest['offset'];
                    lastModifiedTime = listDeviceGroupsRequest['last_modified_time'];
                    appId = listDeviceGroupsRequest['app_id'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (lastModifiedTime !== null && lastModifiedTime !== undefined) {
                localVarQueryParameter['last_modified_time'] = lastModifiedTime;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询指定设备组详情。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDeviceGroup: function (showDeviceGroupRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/device-group/{group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var groupId;
            var instanceId;
            if (showDeviceGroupRequest !== null && showDeviceGroupRequest !== undefined) {
                if (showDeviceGroupRequest instanceof ShowDeviceGroupRequest_1.ShowDeviceGroupRequest) {
                    groupId = showDeviceGroupRequest.groupId;
                    instanceId = showDeviceGroupRequest.instanceId;
                }
                else {
                    groupId = showDeviceGroupRequest['group_id'];
                    instanceId = showDeviceGroupRequest['Instance-Id'];
                }
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId', 'Required parameter groupId was null or undefined when calling showDeviceGroup.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'group_id': groupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询指定设备组下的设备列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDevicesInGroup: function (showDevicesInGroupRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/device-group/{group_id}/devices",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var groupId;
            var instanceId;
            var limit;
            var marker;
            var offset;
            if (showDevicesInGroupRequest !== null && showDevicesInGroupRequest !== undefined) {
                if (showDevicesInGroupRequest instanceof ShowDevicesInGroupRequest_1.ShowDevicesInGroupRequest) {
                    groupId = showDevicesInGroupRequest.groupId;
                    instanceId = showDevicesInGroupRequest.instanceId;
                    limit = showDevicesInGroupRequest.limit;
                    marker = showDevicesInGroupRequest.marker;
                    offset = showDevicesInGroupRequest.offset;
                }
                else {
                    groupId = showDevicesInGroupRequest['group_id'];
                    instanceId = showDevicesInGroupRequest['Instance-Id'];
                    limit = showDevicesInGroupRequest['limit'];
                    marker = showDevicesInGroupRequest['marker'];
                    offset = showDevicesInGroupRequest['offset'];
                }
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId', 'Required parameter groupId was null or undefined when calling showDevicesInGroup.');
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'group_id': groupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定设备组。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateDeviceGroup: function (updateDeviceGroupRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/device-group/{group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var groupId;
            var instanceId;
            if (updateDeviceGroupRequest !== null && updateDeviceGroupRequest !== undefined) {
                if (updateDeviceGroupRequest instanceof UpdateDeviceGroupRequest_1.UpdateDeviceGroupRequest) {
                    groupId = updateDeviceGroupRequest.groupId;
                    body = updateDeviceGroupRequest.body;
                    instanceId = updateDeviceGroupRequest.instanceId;
                }
                else {
                    groupId = updateDeviceGroupRequest['group_id'];
                    body = updateDeviceGroupRequest['body'];
                    instanceId = updateDeviceGroupRequest['Instance-Id'];
                }
            }
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId', 'Required parameter groupId was null or undefined when calling updateDeviceGroup.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'group_id': groupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台创建一个设备，仅在创建后设备才可以接入物联网平台。
         *
         * - 该接口支持使用gateway_id参数指定在父设备下创建一个子设备，并且支持多级子设备，当前最大支持二级子设备。
         * - 该接口同时还支持对设备进行初始配置，接口会读取创建设备请求参数product_id对应的产品详情，如果产品的属性有定义默认值，则会将该属性默认值写入该设备的设备影子中。
         * - 用户还可以使用创建设备请求参数shadow字段为设备指定初始配置，指定后将会根据service_id和desired设置的属性值与产品中对应属性的默认值比对，如果不同，则将以shadow字段中设置的属性值为准写入到设备影子中。
         * - 该接口仅支持创建单个设备，如需批量注册设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        addDevice: function (addDeviceRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (addDeviceRequest !== null && addDeviceRequest !== undefined) {
                if (addDeviceRequest instanceof AddDeviceRequest_1.AddDeviceRequest) {
                    body = addDeviceRequest.body;
                    instanceId = addDeviceRequest.instanceId;
                }
                else {
                    body = addDeviceRequest['body'];
                    instanceId = addDeviceRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台上删除指定设备。若设备下连接了非直连设备，则必须把设备下的非直连设备都删除后，才能删除该设备。该接口仅支持删除单个设备，如需批量删除设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteDevice: function (deleteDeviceRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/devices/{device_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (deleteDeviceRequest !== null && deleteDeviceRequest !== undefined) {
                if (deleteDeviceRequest instanceof DeleteDeviceRequest_1.DeleteDeviceRequest) {
                    deviceId = deleteDeviceRequest.deviceId;
                    instanceId = deleteDeviceRequest.instanceId;
                }
                else {
                    deviceId = deleteDeviceRequest['device_id'];
                    instanceId = deleteDeviceRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling deleteDevice.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口冻结设备，设备冻结后不能再连接上线，可以通过解冻设备接口解除设备冻结。注意，当前仅支持冻结与平台直连的设备。该接口仅支持冻结单个设备，如需批量冻结设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        freezeDevice: function (freezeDeviceRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/freeze",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (freezeDeviceRequest !== null && freezeDeviceRequest !== undefined) {
                if (freezeDeviceRequest instanceof FreezeDeviceRequest_1.FreezeDeviceRequest) {
                    deviceId = freezeDeviceRequest.deviceId;
                    instanceId = freezeDeviceRequest.instanceId;
                }
                else {
                    deviceId = freezeDeviceRequest['device_id'];
                    instanceId = freezeDeviceRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling freezeDevice.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中的设备信息列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listDevices: function (listDevicesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var productId;
            var gatewayId;
            var isCascadeQuery;
            var nodeId;
            var deviceName;
            var limit;
            var marker;
            var offset;
            var startTime;
            var endTime;
            var appId;
            if (listDevicesRequest !== null && listDevicesRequest !== undefined) {
                if (listDevicesRequest instanceof ListDevicesRequest_1.ListDevicesRequest) {
                    instanceId = listDevicesRequest.instanceId;
                    productId = listDevicesRequest.productId;
                    gatewayId = listDevicesRequest.gatewayId;
                    isCascadeQuery = listDevicesRequest.isCascadeQuery;
                    nodeId = listDevicesRequest.nodeId;
                    deviceName = listDevicesRequest.deviceName;
                    limit = listDevicesRequest.limit;
                    marker = listDevicesRequest.marker;
                    offset = listDevicesRequest.offset;
                    startTime = listDevicesRequest.startTime;
                    endTime = listDevicesRequest.endTime;
                    appId = listDevicesRequest.appId;
                }
                else {
                    instanceId = listDevicesRequest['Instance-Id'];
                    productId = listDevicesRequest['product_id'];
                    gatewayId = listDevicesRequest['gateway_id'];
                    isCascadeQuery = listDevicesRequest['is_cascade_query'];
                    nodeId = listDevicesRequest['node_id'];
                    deviceName = listDevicesRequest['device_name'];
                    limit = listDevicesRequest['limit'];
                    marker = listDevicesRequest['marker'];
                    offset = listDevicesRequest['offset'];
                    startTime = listDevicesRequest['start_time'];
                    endTime = listDevicesRequest['end_time'];
                    appId = listDevicesRequest['app_id'];
                }
            }
            if (productId !== null && productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }
            if (gatewayId !== null && gatewayId !== undefined) {
                localVarQueryParameter['gateway_id'] = gatewayId;
            }
            if (isCascadeQuery !== null && isCascadeQuery !== undefined) {
                localVarQueryParameter['is_cascade_query'] = isCascadeQuery;
            }
            if (nodeId !== null && nodeId !== undefined) {
                localVarQueryParameter['node_id'] = nodeId;
            }
            if (deviceName !== null && deviceName !== undefined) {
                localVarQueryParameter['device_name'] = deviceName;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (startTime !== null && startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }
            if (endTime !== null && endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口重置设备密钥，携带指定密钥时平台将设备密钥重置为指定的密钥，不携带密钥时平台将自动生成一个新的随机密钥返回。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        resetDeviceSecret: function (resetDeviceSecretRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/action",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var body;
            var deviceId;
            var actionId;
            var instanceId;
            if (resetDeviceSecretRequest !== null && resetDeviceSecretRequest !== undefined) {
                if (resetDeviceSecretRequest instanceof ResetDeviceSecretRequest_1.ResetDeviceSecretRequest) {
                    deviceId = resetDeviceSecretRequest.deviceId;
                    actionId = resetDeviceSecretRequest.actionId;
                    body = resetDeviceSecretRequest.body;
                    instanceId = resetDeviceSecretRequest.instanceId;
                }
                else {
                    deviceId = resetDeviceSecretRequest['device_id'];
                    actionId = resetDeviceSecretRequest['action_id'];
                    body = resetDeviceSecretRequest['body'];
                    instanceId = resetDeviceSecretRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling resetDeviceSecret.');
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling resetDeviceSecret.');
            }
            if (actionId !== null && actionId !== undefined) {
                localVarQueryParameter['action_id'] = actionId;
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口重置设备指纹。携带指定设备指纹时将之重置为指定值；不携带时将之置空，后续设备第一次接入时，该设备指纹的值将设置为第一次接入时的证书指纹。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        resetFingerprint: function (resetFingerprintRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/reset-fingerprint",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (resetFingerprintRequest !== null && resetFingerprintRequest !== undefined) {
                if (resetFingerprintRequest instanceof ResetFingerprintRequest_1.ResetFingerprintRequest) {
                    deviceId = resetFingerprintRequest.deviceId;
                    body = resetFingerprintRequest.body;
                    instanceId = resetFingerprintRequest.instanceId;
                }
                else {
                    deviceId = resetFingerprintRequest['device_id'];
                    body = resetFingerprintRequest['body'];
                    instanceId = resetFingerprintRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling resetFingerprint.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * #### 接口说明
         *
         * 应用服务器使用SQL语句调用该接口，灵活的搜索所需要的设备资源列表
         *
         * #### 限制
         *
         * - 仅**标准版实例、企业版实例**支持该接口调用，基础版不支持。
         * - 单账号调用该接口的 TPS 限制最大为1/S(每秒1次请求数)
         *
         * #### 类SQL语法使用说明
         *
         * 类SQL语句有select、from、where(可选)、order by(可选)、limit子句(可选)组成，长度限制为400个字符。子句里的内容大小写敏感，SQL语句的关键字大小写不敏感。
         *
         * 示例：
         *
         * &#x60;&#x60;&#x60;
         * select * from device where device_id &#x3D; \&#39;as********\&#39; limit 0,5
         * &#x60;&#x60;&#x60;
         *
         * ##### SELECT子句
         *
         * &#x60;&#x60;&#x60;
         * select [field]/[count(*)/count(1)] from device
         * &#x60;&#x60;&#x60;
         *
         * 其中field为需要获取的字段，请参考响应参数字段名称，也可填*，获取所有字段。
         *
         * 如果需要统计搜索的设备个数，请填count(*)或者count(1).
         *
         * ##### FROM子句
         *
         * &#x60;&#x60;&#x60;
         * from device
         * &#x60;&#x60;&#x60;
         *
         * from后为要查询的资源名，当前支持\&quot;device\&quot;
         *
         * ##### WHERE子句(可选)
         *
         * &#x60;&#x60;&#x60;
         * WHERE [condition1] AND [condition2]
         * &#x60;&#x60;&#x60;
         *
         * 最多支持5个condition，不支持嵌套；支持的检索字段请参见下面的**搜索条件字段说明**和**支持的运算符**章节
         *
         * 连接词支持AND、OR，优先级参考标准SQL语法，默认AND优先级高于OR。
         *
         * ##### LIMIT子句(可选)
         *
         * &#x60;&#x60;&#x60;
         * limit [offset,] rows
         * &#x60;&#x60;&#x60;
         *
         * offset标识搜索的偏移量，rows标识返回搜索结果的最大行数，例如：
         *
         * - limit n ;示例(select * from device limit 10)
         *
         *   最大返回n条结果数据
         *
         * - limit m,n; 示例(select * from device limit 20,10)
         *   搜索偏移量为m，最大返回n条结果数据
         *
         * ###### 限制
         *
         *  offset 最大 500， rows最大50，如果不填写limit子句，默认为limit 10
         *
         * ##### ORDER BY子句(可选)
         *
         * 用于实现自定义排序，当前支持自定义排序的字段为：\&quot;marker\&quot;。
         *
         * &#x60;&#x60;&#x60;
         * order by marker [asc]/[desc]
         * &#x60;&#x60;&#x60;
         *
         * 子句不填写时默认逻辑为随机排序
         *
         * #### 搜索条件字段说明
         *
         * | 字段名      | 类型   | 说明             | 取值范围                                                     |
         * | :---------- | :----- | :--------------- | :----------------------------------------------------------- |
         * | app_id      | string | 资源空间ID       | 长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
         * | device_id   | string | 设备ID           | 长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合，建议不少于4个字符。 |
         * | gateway_id  | string | 网关ID           | 长度不超过128，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
         * | product_id  | string | 设备关联的产品ID | 长度不超过36，只允许字母、数字、下划线（_）、连接符（-）的组合。 |
         * | device_name | string | 设备名称         | 长度不超过256，只允许中文、字母、数字、以及_?\&#39;#().,&amp;%@!-等字符的组合，建议不少于4个字符。 |
         * | node_id     | string | 设备标识码       | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）的组合，建议不少于4个字符 |
         * | status      | string | 设备的状态       | ONLINE(在线)、OFFLINE(离线)、ABNORMAL(异常)、INACTIVE(未激活)、FROZEN(冻结) |
         * | node_type   | string | 设备节点类型     | GATEWAY(直连设备或网关)、ENDPOINT(非直连设备)                |
         * | tag_key     | string | 标签键           | 长度不超过64，只允许中文、字母、数字、以及_.-等字符的组合。  |
         * | tag_value   | string | 标签值           | 长度不超过128，只允许中文、字母、数字、以及_.-等字符的组合。 |
         * | sw_version  | string | 软件版本         | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）、英文点(.)的组合。 |
         * | fw_version  | string | 固件版本         | 长度不超过64，只允许字母、数字、下划线（_）、连接符（-）、英文点(.)的组合。 |
         * | create_time | string | 设备注册时间     | 格式：yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39;，如：2015-06-06T12:10:10.000Z |
         * | marker      | string | 结果记录ID       | 长度为24的十六进制字符串，如ffffffffffffffffffffffff         |
         *
         * #### 支持的运算符
         *
         * | 运算符  | 支持的字段                               |
         * | ------- | ---------------------------------------- |
         * | &#x3D;       | 所有                                     |
         * | !&#x3D;      | 所有                                     |
         * | &gt;       | create_time、marker                      |
         * | &lt;       | create_time、marker                      |
         * | like    | device_name、node_id、tag_key、tag_value |
         * | in      | 除tag_key、tag_value以外字段             |
         * | not  in | 除tag_key、tag_value以外字段             |
         *
         * #### SQL 限制
         *
         * - like: 只支持前缀匹配，不支持后缀匹配或者通配符匹配。前缀匹配不得少于4个字符，且不能包含任何特殊字符(只允许中文、字母、数字、下划线（_）、连接符（-）). 前缀后必须跟上\&quot;%\&quot;结尾。
         * - 不支持除了count(*)/count(1)以外的其他任何函数。
         * - 不支持其他SQL用法，如嵌套SQL、union、join、别名(Alias)等用法
         * - SQL长度限制为400个字符，单个请求条件最大支持5个。
         * - 不支持\&quot;null\&quot;和空字符串等条件值匹配
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        searchDevices: function (searchDevicesRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/search/query-devices",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (searchDevicesRequest !== null && searchDevicesRequest !== undefined) {
                if (searchDevicesRequest instanceof SearchDevicesRequest_1.SearchDevicesRequest) {
                    body = searchDevicesRequest.body;
                    instanceId = searchDevicesRequest.instanceId;
                }
                else {
                    body = searchDevicesRequest['body'];
                    instanceId = searchDevicesRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定设备的详细信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDevice: function (showDeviceRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (showDeviceRequest !== null && showDeviceRequest !== undefined) {
                if (showDeviceRequest instanceof ShowDeviceRequest_1.ShowDeviceRequest) {
                    deviceId = showDeviceRequest.deviceId;
                    instanceId = showDeviceRequest.instanceId;
                }
                else {
                    deviceId = showDeviceRequest['device_id'];
                    instanceId = showDeviceRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling showDevice.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口解冻设备，解除冻结后，设备可以连接上线。该接口仅支持解冻单个设备，如需批量解冻设备，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        unfreezeDevice: function (unfreezeDeviceRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/unfreeze",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (unfreezeDeviceRequest !== null && unfreezeDeviceRequest !== undefined) {
                if (unfreezeDeviceRequest instanceof UnfreezeDeviceRequest_1.UnfreezeDeviceRequest) {
                    deviceId = unfreezeDeviceRequest.deviceId;
                    instanceId = unfreezeDeviceRequest.instanceId;
                }
                else {
                    deviceId = unfreezeDeviceRequest['device_id'];
                    instanceId = unfreezeDeviceRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling unfreezeDevice.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定设备的基本信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateDevice: function (updateDeviceRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/devices/{device_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (updateDeviceRequest !== null && updateDeviceRequest !== undefined) {
                if (updateDeviceRequest instanceof UpdateDeviceRequest_1.UpdateDeviceRequest) {
                    deviceId = updateDeviceRequest.deviceId;
                    body = updateDeviceRequest.body;
                    instanceId = updateDeviceRequest.instanceId;
                }
                else {
                    deviceId = updateDeviceRequest['device_id'];
                    body = updateDeviceRequest['body'];
                    instanceId = updateDeviceRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling updateDevice.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询指定设备的设备影子信息，包括对设备的期望属性信息（desired区）和设备最新上报的属性信息（reported区）。
         *
         * 设备影子介绍：
         * 设备影子是一个用于存储和检索设备当前状态信息的JSON文档。
         * - 每个设备有且只有一个设备影子，由设备ID唯一标识
         * - 设备影子用于存储设备上报的(状态)属性和应用程序期望的设备(状态)属性
         * - 无论该设备是否在线，都可以通过该影子获取和设置设备的属性
         * - 设备上线或者设备上报属性时，如果desired区和reported区存在差异，则将差异部分下发给设备，配置的预期属性需在产品模型中定义且method具有可写属性“W”才可下发
         *
         * 限制：
         * 设备影子JSON文档中的key不允许特殊字符：点(.)、dollar符号($)、空char(十六进制的ASCII码为00)。如果包含了以上特殊字符则无法正常刷新影子文档。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDeviceShadow: function (showDeviceShadowRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}/shadow",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (showDeviceShadowRequest !== null && showDeviceShadowRequest !== undefined) {
                if (showDeviceShadowRequest instanceof ShowDeviceShadowRequest_1.ShowDeviceShadowRequest) {
                    deviceId = showDeviceShadowRequest.deviceId;
                    instanceId = showDeviceShadowRequest.instanceId;
                }
                else {
                    deviceId = showDeviceShadowRequest['device_id'];
                    instanceId = showDeviceShadowRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling showDeviceShadow.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口配置设备影子的预期属性（desired区），当设备上线或者设备上报属性时把属性下发给设备。
         *
         * 设备影子介绍：
         * 设备影子是一个用于存储和检索设备当前状态信息的JSON文档。
         * - 每个设备有且只有一个设备影子，由设备ID唯一标识
         * - 设备影子用于存储设备上报的(状态)属性和应用程序期望的设备(状态)属性
         * - 无论该设备是否在线，都可以通过该影子获取和设置设备的属性
         * - 设备上线或者设备上报属性时，如果desired区和reported区存在差异，则将差异部分下发给设备，配置的预期属性需在产品模型中定义且method具有可写属性“W”才可下发
         * - 该接口仅支持配置单个设备的设备影子的预期数据，如需多个设备的设备影子配置，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * 限制：
         * 设备影子JSON文档中的key不允许特殊字符：点(.)、dollar符号($)、空char(十六进制的ASCII码为00)。如果包含了以上特殊字符则无法正常刷新影子文档。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateDeviceShadowDesiredData: function (updateDeviceShadowDesiredDataRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/devices/{device_id}/shadow",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (updateDeviceShadowDesiredDataRequest !== null && updateDeviceShadowDesiredDataRequest !== undefined) {
                if (updateDeviceShadowDesiredDataRequest instanceof UpdateDeviceShadowDesiredDataRequest_1.UpdateDeviceShadowDesiredDataRequest) {
                    deviceId = updateDeviceShadowDesiredDataRequest.deviceId;
                    body = updateDeviceShadowDesiredDataRequest.body;
                    instanceId = updateDeviceShadowDesiredDataRequest.instanceId;
                }
                else {
                    deviceId = updateDeviceShadowDesiredDataRequest['device_id'];
                    body = updateDeviceShadowDesiredDataRequest['body'];
                    instanceId = updateDeviceShadowDesiredDataRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling updateDeviceShadowDesiredData.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 物联网平台可向设备下发消息，应用服务器可调用此接口向指定设备下发消息，以实现对设备的控制。应用将消息下发给平台后，平台返回应用响应结果，平台再将消息发送给设备。平台返回应用响应结果不一定是设备接收结果，建议用户应用通过订阅[[设备消息状态变更通知](https://support.huaweicloud.com/api-iothub/iot_06_v5_01203.html)](tag:hws)[[设备消息状态变更通知](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_01203.html)](tag:hws_hk)，订阅后平台会将设备接收结果推送给订阅的应用。
         * 注意：
         * - 此接口适用于MQTT设备消息下发，暂不支持其他协议接入的设备消息下发。
         * - 此接口仅支持单个设备消息下发，如需多个设备消息下发，请参见 [[创建批量任务](https://support.huaweicloud.com/api-iothub/iot_06_v5_0045.html)](tag:hws)[[创建批量任务](https://support.huaweicloud.com/intl/zh-cn/api-iothub/iot_06_v5_0045.html)](tag:hws_hk)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createMessage: function (createMessageRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/devices/{device_id}/messages",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (createMessageRequest !== null && createMessageRequest !== undefined) {
                if (createMessageRequest instanceof CreateMessageRequest_1.CreateMessageRequest) {
                    deviceId = createMessageRequest.deviceId;
                    body = createMessageRequest.body;
                    instanceId = createMessageRequest.instanceId;
                }
                else {
                    deviceId = createMessageRequest['device_id'];
                    body = createMessageRequest['body'];
                    instanceId = createMessageRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling createMessage.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询平台下发给设备的消息，平台为每个设备默认最多保存20条消息，超过20条后， 后续的消息会替换下发最早的消息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listDeviceMessages: function (listDeviceMessagesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}/messages",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var instanceId;
            if (listDeviceMessagesRequest !== null && listDeviceMessagesRequest !== undefined) {
                if (listDeviceMessagesRequest instanceof ListDeviceMessagesRequest_1.ListDeviceMessagesRequest) {
                    deviceId = listDeviceMessagesRequest.deviceId;
                    instanceId = listDeviceMessagesRequest.instanceId;
                }
                else {
                    deviceId = listDeviceMessagesRequest['device_id'];
                    instanceId = listDeviceMessagesRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling listDeviceMessages.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询平台下发给设备的指定消息id的消息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showDeviceMessage: function (showDeviceMessageRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}/messages/{message_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var deviceId;
            var messageId;
            var instanceId;
            if (showDeviceMessageRequest !== null && showDeviceMessageRequest !== undefined) {
                if (showDeviceMessageRequest instanceof ShowDeviceMessageRequest_1.ShowDeviceMessageRequest) {
                    deviceId = showDeviceMessageRequest.deviceId;
                    messageId = showDeviceMessageRequest.messageId;
                    instanceId = showDeviceMessageRequest.instanceId;
                }
                else {
                    deviceId = showDeviceMessageRequest['device_id'];
                    messageId = showDeviceMessageRequest['message_id'];
                    instanceId = showDeviceMessageRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling showDeviceMessage.');
            }
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId', 'Required parameter messageId was null or undefined when calling showDeviceMessage.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'device_id': deviceId, 'message_id': messageId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 用户可调用此接口创建升级包关联OBS对象
         * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createOtaPackage: function (createOtaPackageRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/ota-upgrades/packages",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createOtaPackageRequest !== null && createOtaPackageRequest !== undefined) {
                if (createOtaPackageRequest instanceof CreateOtaPackageRequest_1.CreateOtaPackageRequest) {
                    body = createOtaPackageRequest.body;
                    instanceId = createOtaPackageRequest.instanceId;
                }
                else {
                    body = createOtaPackageRequest['body'];
                    instanceId = createOtaPackageRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 用户可调用此接口删除关联OBS对象的升级包信息，不会删除OBS上对象
         * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteOtaPackage: function (deleteOtaPackageRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/ota-upgrades/packages/{package_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var packageId;
            var instanceId;
            if (deleteOtaPackageRequest !== null && deleteOtaPackageRequest !== undefined) {
                if (deleteOtaPackageRequest instanceof DeleteOtaPackageRequest_1.DeleteOtaPackageRequest) {
                    packageId = deleteOtaPackageRequest.packageId;
                    instanceId = deleteOtaPackageRequest.instanceId;
                }
                else {
                    packageId = deleteOtaPackageRequest['package_id'];
                    instanceId = deleteOtaPackageRequest['Instance-Id'];
                }
            }
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId', 'Required parameter packageId was null or undefined when calling deleteOtaPackage.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'package_id': packageId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 用户可调用此接口查询关联OBS对象的升级包列表
         * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listOtaPackageInfo: function (listOtaPackageInfoRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/ota-upgrades/packages",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var packageType;
            var instanceId;
            var appId;
            var productId;
            var version;
            var limit;
            var marker;
            var offset;
            if (listOtaPackageInfoRequest !== null && listOtaPackageInfoRequest !== undefined) {
                if (listOtaPackageInfoRequest instanceof ListOtaPackageInfoRequest_1.ListOtaPackageInfoRequest) {
                    packageType = listOtaPackageInfoRequest.packageType;
                    instanceId = listOtaPackageInfoRequest.instanceId;
                    appId = listOtaPackageInfoRequest.appId;
                    productId = listOtaPackageInfoRequest.productId;
                    version = listOtaPackageInfoRequest.version;
                    limit = listOtaPackageInfoRequest.limit;
                    marker = listOtaPackageInfoRequest.marker;
                    offset = listOtaPackageInfoRequest.offset;
                }
                else {
                    packageType = listOtaPackageInfoRequest['package_type'];
                    instanceId = listOtaPackageInfoRequest['Instance-Id'];
                    appId = listOtaPackageInfoRequest['app_id'];
                    productId = listOtaPackageInfoRequest['product_id'];
                    version = listOtaPackageInfoRequest['version'];
                    limit = listOtaPackageInfoRequest['limit'];
                    marker = listOtaPackageInfoRequest['marker'];
                    offset = listOtaPackageInfoRequest['offset'];
                }
            }
            if (packageType === null || packageType === undefined) {
                throw new RequiredError('packageType', 'Required parameter packageType was null or undefined when calling listOtaPackageInfo.');
            }
            if (packageType !== null && packageType !== undefined) {
                localVarQueryParameter['package_type'] = packageType;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (productId !== null && productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }
            if (version !== null && version !== undefined) {
                localVarQueryParameter['version'] = version;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 用户可调用此接口查询关联OBS对象的升级包详情
         * 使用前提：使用该API需要您授权设备接入服务(IoTDA)的实例访问对象存储服务(OBS)以及 密钥管理服务(KMS Administrator)的权限。在“[[统一身份认证服务（IAM）](https://console.huaweicloud.com/iam)](tag:hws)[[统一身份认证服务（IAM）](https://console-intl.huaweicloud.com/iam)](tag:hws_hk) - 委托”中将委托名称为iotda_admin_trust的委托授权KMS Administrator和OBS OperateAccess
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showOtaPackage: function (showOtaPackageRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/ota-upgrades/packages/{package_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var packageId;
            var instanceId;
            if (showOtaPackageRequest !== null && showOtaPackageRequest !== undefined) {
                if (showOtaPackageRequest instanceof ShowOtaPackageRequest_1.ShowOtaPackageRequest) {
                    packageId = showOtaPackageRequest.packageId;
                    instanceId = showOtaPackageRequest.instanceId;
                }
                else {
                    packageId = showOtaPackageRequest['package_id'];
                    instanceId = showOtaPackageRequest['Instance-Id'];
                }
            }
            if (packageId === null || packageId === undefined) {
                throw new RequiredError('packageId', 'Required parameter packageId was null or undefined when calling showOtaPackage.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'package_id': packageId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口创建产品。此接口仅创建了产品，没有创建和安装插件，如果需要对数据进行编解码，还需要在平台开发和安装插件。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createProduct: function (createProductRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/products",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createProductRequest !== null && createProductRequest !== undefined) {
                if (createProductRequest instanceof CreateProductRequest_1.CreateProductRequest) {
                    instanceId = createProductRequest.instanceId;
                    body = createProductRequest.body;
                }
                else {
                    instanceId = createProductRequest['Instance-Id'];
                    body = createProductRequest['body'];
                }
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除已导入物联网平台的指定产品模型。此接口仅删除了产品，未删除关联的插件，在产品下存在设备时，该产品不允许删除。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteProduct: function (deleteProductRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/products/{product_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var productId;
            var instanceId;
            var appId;
            if (deleteProductRequest !== null && deleteProductRequest !== undefined) {
                if (deleteProductRequest instanceof DeleteProductRequest_1.DeleteProductRequest) {
                    productId = deleteProductRequest.productId;
                    instanceId = deleteProductRequest.instanceId;
                    appId = deleteProductRequest.appId;
                }
                else {
                    productId = deleteProductRequest['product_id'];
                    instanceId = deleteProductRequest['Instance-Id'];
                    appId = deleteProductRequest['app_id'];
                }
            }
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling deleteProduct.');
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'product_id': productId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询已导入物联网平台的产品模型信息列表，了解产品模型的概要信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProducts: function (listProductsRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/products",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var limit;
            var marker;
            var appId;
            var offset;
            if (listProductsRequest !== null && listProductsRequest !== undefined) {
                if (listProductsRequest instanceof ListProductsRequest_1.ListProductsRequest) {
                    instanceId = listProductsRequest.instanceId;
                    limit = listProductsRequest.limit;
                    marker = listProductsRequest.marker;
                    appId = listProductsRequest.appId;
                    offset = listProductsRequest.offset;
                }
                else {
                    instanceId = listProductsRequest['Instance-Id'];
                    limit = listProductsRequest['limit'];
                    marker = listProductsRequest['marker'];
                    appId = listProductsRequest['app_id'];
                    offset = listProductsRequest['offset'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询已导入物联网平台的指定产品模型详细信息，包括产品模型的服务、属性、命令等。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showProduct: function (showProductRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/products/{product_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var productId;
            var instanceId;
            var appId;
            if (showProductRequest !== null && showProductRequest !== undefined) {
                if (showProductRequest instanceof ShowProductRequest_1.ShowProductRequest) {
                    productId = showProductRequest.productId;
                    instanceId = showProductRequest.instanceId;
                    appId = showProductRequest.appId;
                }
                else {
                    productId = showProductRequest['product_id'];
                    instanceId = showProductRequest['Instance-Id'];
                    appId = showProductRequest['app_id'];
                }
            }
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling showProduct.');
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'product_id': productId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改已导入物联网平台的指定产品模型，包括产品模型的服务、属性、命令等。此接口仅修改了产品，未修改和安装插件，如果修改了产品中的service定义，且在平台中有对应的插件，请修改并重新安装插件。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateProduct: function (updateProductRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/products/{product_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var productId;
            var instanceId;
            if (updateProductRequest !== null && updateProductRequest !== undefined) {
                if (updateProductRequest instanceof UpdateProductRequest_1.UpdateProductRequest) {
                    productId = updateProductRequest.productId;
                    body = updateProductRequest.body;
                    instanceId = updateProductRequest.instanceId;
                }
                else {
                    productId = updateProductRequest['product_id'];
                    body = updateProductRequest['body'];
                    instanceId = updateProductRequest['Instance-Id'];
                }
            }
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId', 'Required parameter productId was null or undefined when calling updateProduct.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'product_id': productId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 设备的产品模型中定义了物联网平台可向设备下发的属性，应用服务器可调用此接口向设备发送指令用以查询设备的实时属性, 并由设备将属性查询的结果同步返回给应用服务器。
         * 注意：此接口适用于MQTT设备，暂不支持NB-IoT设备。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listProperties: function (listPropertiesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/devices/{device_id}/properties",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var deviceId;
            var serviceId;
            var instanceId;
            if (listPropertiesRequest !== null && listPropertiesRequest !== undefined) {
                if (listPropertiesRequest instanceof ListPropertiesRequest_1.ListPropertiesRequest) {
                    deviceId = listPropertiesRequest.deviceId;
                    serviceId = listPropertiesRequest.serviceId;
                    instanceId = listPropertiesRequest.instanceId;
                }
                else {
                    deviceId = listPropertiesRequest['device_id'];
                    serviceId = listPropertiesRequest['service_id'];
                    instanceId = listPropertiesRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling listProperties.');
            }
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId', 'Required parameter serviceId was null or undefined when calling listProperties.');
            }
            if (serviceId !== null && serviceId !== undefined) {
                localVarQueryParameter['service_id'] = serviceId;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 设备的产品模型中定义了物联网平台可向设备下发的属性，应用服务器可调用此接口向指定设备下发属性。平台负责将属性以同步方式发送给设备，并将设备执行属性结果同步返回。
         * 注意：此接口适用于MQTT设备，暂不支持NB-IoT设备。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateProperties: function (updatePropertiesRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/devices/{device_id}/properties",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var deviceId;
            var instanceId;
            if (updatePropertiesRequest !== null && updatePropertiesRequest !== undefined) {
                if (updatePropertiesRequest instanceof UpdatePropertiesRequest_1.UpdatePropertiesRequest) {
                    deviceId = updatePropertiesRequest.deviceId;
                    body = updatePropertiesRequest.body;
                    instanceId = updatePropertiesRequest.instanceId;
                }
                else {
                    deviceId = updatePropertiesRequest['device_id'];
                    body = updatePropertiesRequest['body'];
                    instanceId = updatePropertiesRequest['Instance-Id'];
                }
            }
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId', 'Required parameter deviceId was null or undefined when calling updateProperties.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'device_id': deviceId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台创建一条规则触发条件。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createRoutingRule: function (createRoutingRuleRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/routing-rule/rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createRoutingRuleRequest !== null && createRoutingRuleRequest !== undefined) {
                if (createRoutingRuleRequest instanceof CreateRoutingRuleRequest_1.CreateRoutingRuleRequest) {
                    body = createRoutingRuleRequest.body;
                    instanceId = createRoutingRuleRequest.instanceId;
                }
                else {
                    body = createRoutingRuleRequest['body'];
                    instanceId = createRoutingRuleRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台创建一条规则动作。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createRuleAction: function (createRuleActionRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/routing-rule/actions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createRuleActionRequest !== null && createRuleActionRequest !== undefined) {
                if (createRuleActionRequest instanceof CreateRuleActionRequest_1.CreateRuleActionRequest) {
                    body = createRuleActionRequest.body;
                    instanceId = createRuleActionRequest.instanceId;
                }
                else {
                    body = createRuleActionRequest['body'];
                    instanceId = createRuleActionRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除物联网平台中的指定规则条件。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteRoutingRule: function (deleteRoutingRuleRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/routing-rule/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var ruleId;
            var instanceId;
            if (deleteRoutingRuleRequest !== null && deleteRoutingRuleRequest !== undefined) {
                if (deleteRoutingRuleRequest instanceof DeleteRoutingRuleRequest_1.DeleteRoutingRuleRequest) {
                    ruleId = deleteRoutingRuleRequest.ruleId;
                    instanceId = deleteRoutingRuleRequest.instanceId;
                }
                else {
                    ruleId = deleteRoutingRuleRequest['rule_id'];
                    instanceId = deleteRoutingRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling deleteRoutingRule.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除物联网平台中的指定规则动作。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteRuleAction: function (deleteRuleActionRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/routing-rule/actions/{action_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var actionId;
            var instanceId;
            if (deleteRuleActionRequest !== null && deleteRuleActionRequest !== undefined) {
                if (deleteRuleActionRequest instanceof DeleteRuleActionRequest_1.DeleteRuleActionRequest) {
                    actionId = deleteRuleActionRequest.actionId;
                    instanceId = deleteRuleActionRequest.instanceId;
                }
                else {
                    actionId = deleteRuleActionRequest['action_id'];
                    instanceId = deleteRuleActionRequest['Instance-Id'];
                }
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling deleteRuleAction.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'action_id': actionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中设置的规则条件列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRoutingRules: function (listRoutingRulesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/routing-rule/rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var resource;
            var event;
            var appType;
            var appId;
            var ruleName;
            var active;
            var limit;
            var marker;
            var offset;
            if (listRoutingRulesRequest !== null && listRoutingRulesRequest !== undefined) {
                if (listRoutingRulesRequest instanceof ListRoutingRulesRequest_1.ListRoutingRulesRequest) {
                    instanceId = listRoutingRulesRequest.instanceId;
                    resource = listRoutingRulesRequest.resource;
                    event = listRoutingRulesRequest.event;
                    appType = listRoutingRulesRequest.appType;
                    appId = listRoutingRulesRequest.appId;
                    ruleName = listRoutingRulesRequest.ruleName;
                    active = listRoutingRulesRequest.active;
                    limit = listRoutingRulesRequest.limit;
                    marker = listRoutingRulesRequest.marker;
                    offset = listRoutingRulesRequest.offset;
                }
                else {
                    instanceId = listRoutingRulesRequest['Instance-Id'];
                    resource = listRoutingRulesRequest['resource'];
                    event = listRoutingRulesRequest['event'];
                    appType = listRoutingRulesRequest['app_type'];
                    appId = listRoutingRulesRequest['app_id'];
                    ruleName = listRoutingRulesRequest['rule_name'];
                    active = listRoutingRulesRequest['active'];
                    limit = listRoutingRulesRequest['limit'];
                    marker = listRoutingRulesRequest['marker'];
                    offset = listRoutingRulesRequest['offset'];
                }
            }
            if (resource !== null && resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }
            if (event !== null && event !== undefined) {
                localVarQueryParameter['event'] = event;
            }
            if (appType !== null && appType !== undefined) {
                localVarQueryParameter['app_type'] = appType;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (ruleName !== null && ruleName !== undefined) {
                localVarQueryParameter['rule_name'] = ruleName;
            }
            if (active !== null && active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中设置的规则动作列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRuleActions: function (listRuleActionsRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/routing-rule/actions",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var ruleId;
            var channel;
            var appType;
            var appId;
            var limit;
            var marker;
            var offset;
            if (listRuleActionsRequest !== null && listRuleActionsRequest !== undefined) {
                if (listRuleActionsRequest instanceof ListRuleActionsRequest_1.ListRuleActionsRequest) {
                    instanceId = listRuleActionsRequest.instanceId;
                    ruleId = listRuleActionsRequest.ruleId;
                    channel = listRuleActionsRequest.channel;
                    appType = listRuleActionsRequest.appType;
                    appId = listRuleActionsRequest.appId;
                    limit = listRuleActionsRequest.limit;
                    marker = listRuleActionsRequest.marker;
                    offset = listRuleActionsRequest.offset;
                }
                else {
                    instanceId = listRuleActionsRequest['Instance-Id'];
                    ruleId = listRuleActionsRequest['rule_id'];
                    channel = listRuleActionsRequest['channel'];
                    appType = listRuleActionsRequest['app_type'];
                    appId = listRuleActionsRequest['app_id'];
                    limit = listRuleActionsRequest['limit'];
                    marker = listRuleActionsRequest['marker'];
                    offset = listRuleActionsRequest['offset'];
                }
            }
            if (ruleId !== null && ruleId !== undefined) {
                localVarQueryParameter['rule_id'] = ruleId;
            }
            if (channel !== null && channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            if (appType !== null && appType !== undefined) {
                localVarQueryParameter['app_type'] = appType;
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定规则条件的配置信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRoutingRule: function (showRoutingRuleRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/routing-rule/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var ruleId;
            var instanceId;
            if (showRoutingRuleRequest !== null && showRoutingRuleRequest !== undefined) {
                if (showRoutingRuleRequest instanceof ShowRoutingRuleRequest_1.ShowRoutingRuleRequest) {
                    ruleId = showRoutingRuleRequest.ruleId;
                    instanceId = showRoutingRuleRequest.instanceId;
                }
                else {
                    ruleId = showRoutingRuleRequest['rule_id'];
                    instanceId = showRoutingRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling showRoutingRule.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定规则动作的配置信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRuleAction: function (showRuleActionRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/routing-rule/actions/{action_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var actionId;
            var instanceId;
            if (showRuleActionRequest !== null && showRuleActionRequest !== undefined) {
                if (showRuleActionRequest instanceof ShowRuleActionRequest_1.ShowRuleActionRequest) {
                    actionId = showRuleActionRequest.actionId;
                    instanceId = showRuleActionRequest.instanceId;
                }
                else {
                    actionId = showRuleActionRequest['action_id'];
                    instanceId = showRuleActionRequest['Instance-Id'];
                }
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling showRuleAction.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'action_id': actionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定规则条件的配置参数。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateRoutingRule: function (updateRoutingRuleRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/routing-rule/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var ruleId;
            var instanceId;
            if (updateRoutingRuleRequest !== null && updateRoutingRuleRequest !== undefined) {
                if (updateRoutingRuleRequest instanceof UpdateRoutingRuleRequest_1.UpdateRoutingRuleRequest) {
                    ruleId = updateRoutingRuleRequest.ruleId;
                    body = updateRoutingRuleRequest.body;
                    instanceId = updateRoutingRuleRequest.instanceId;
                }
                else {
                    ruleId = updateRoutingRuleRequest['rule_id'];
                    body = updateRoutingRuleRequest['body'];
                    instanceId = updateRoutingRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling updateRoutingRule.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定规则动作的配置。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateRuleAction: function (updateRuleActionRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/routing-rule/actions/{action_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var actionId;
            var instanceId;
            if (updateRuleActionRequest !== null && updateRuleActionRequest !== undefined) {
                if (updateRuleActionRequest instanceof UpdateRuleActionRequest_1.UpdateRuleActionRequest) {
                    actionId = updateRuleActionRequest.actionId;
                    body = updateRuleActionRequest.body;
                    instanceId = updateRuleActionRequest.instanceId;
                }
                else {
                    actionId = updateRuleActionRequest['action_id'];
                    body = updateRuleActionRequest['body'];
                    instanceId = updateRuleActionRequest['Instance-Id'];
                }
            }
            if (actionId === null || actionId === undefined) {
                throw new RequiredError('actionId', 'Required parameter actionId was null or undefined when calling updateRuleAction.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'action_id': actionId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定规则的状态，激活或者去激活规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        changeRuleStatus: function (changeRuleStatusRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/rules/{rule_id}/status",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var ruleId;
            var instanceId;
            if (changeRuleStatusRequest !== null && changeRuleStatusRequest !== undefined) {
                if (changeRuleStatusRequest instanceof ChangeRuleStatusRequest_1.ChangeRuleStatusRequest) {
                    ruleId = changeRuleStatusRequest.ruleId;
                    body = changeRuleStatusRequest.body;
                    instanceId = changeRuleStatusRequest.instanceId;
                }
                else {
                    ruleId = changeRuleStatusRequest['rule_id'];
                    body = changeRuleStatusRequest['body'];
                    instanceId = changeRuleStatusRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling changeRuleStatus.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口在物联网平台创建一条规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        createRule: function (createRuleRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (createRuleRequest !== null && createRuleRequest !== undefined) {
                if (createRuleRequest instanceof CreateRuleRequest_1.CreateRuleRequest) {
                    body = createRuleRequest.body;
                    instanceId = createRuleRequest.instanceId;
                }
                else {
                    body = createRuleRequest['body'];
                    instanceId = createRuleRequest['Instance-Id'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口删除物联网平台中的指定规则。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        deleteRule: function (deleteRuleRequest) {
            var options = {
                method: "DELETE",
                url: "/v5/iot/{project_id}/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var ruleId;
            var instanceId;
            if (deleteRuleRequest !== null && deleteRuleRequest !== undefined) {
                if (deleteRuleRequest instanceof DeleteRuleRequest_1.DeleteRuleRequest) {
                    ruleId = deleteRuleRequest.ruleId;
                    instanceId = deleteRuleRequest.instanceId;
                }
                else {
                    ruleId = deleteRuleRequest['rule_id'];
                    instanceId = deleteRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling deleteRule.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中设置的规则列表。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listRules: function (listRulesRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/rules",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceId;
            var appId;
            var ruleType;
            var limit;
            var marker;
            var offset;
            if (listRulesRequest !== null && listRulesRequest !== undefined) {
                if (listRulesRequest instanceof ListRulesRequest_1.ListRulesRequest) {
                    instanceId = listRulesRequest.instanceId;
                    appId = listRulesRequest.appId;
                    ruleType = listRulesRequest.ruleType;
                    limit = listRulesRequest.limit;
                    marker = listRulesRequest.marker;
                    offset = listRulesRequest.offset;
                }
                else {
                    instanceId = listRulesRequest['Instance-Id'];
                    appId = listRulesRequest['app_id'];
                    ruleType = listRulesRequest['rule_type'];
                    limit = listRulesRequest['limit'];
                    marker = listRulesRequest['marker'];
                    offset = listRulesRequest['offset'];
                }
            }
            if (appId !== null && appId !== undefined) {
                localVarQueryParameter['app_id'] = appId;
            }
            if (ruleType !== null && ruleType !== undefined) {
                localVarQueryParameter['rule_type'] = ruleType;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询物联网平台中指定规则的配置信息。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        showRule: function (showRuleRequest) {
            var options = {
                method: "GET",
                url: "/v5/iot/{project_id}/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var ruleId;
            var instanceId;
            if (showRuleRequest !== null && showRuleRequest !== undefined) {
                if (showRuleRequest instanceof ShowRuleRequest_1.ShowRuleRequest) {
                    ruleId = showRuleRequest.ruleId;
                    instanceId = showRuleRequest.instanceId;
                }
                else {
                    ruleId = showRuleRequest['rule_id'];
                    instanceId = showRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling showRule.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口修改物联网平台中指定规则的配置。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        updateRule: function (updateRuleRequest) {
            var options = {
                method: "PUT",
                url: "/v5/iot/{project_id}/rules/{rule_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var ruleId;
            var instanceId;
            if (updateRuleRequest !== null && updateRuleRequest !== undefined) {
                if (updateRuleRequest instanceof UpdateRuleRequest_1.UpdateRuleRequest) {
                    ruleId = updateRuleRequest.ruleId;
                    body = updateRuleRequest.body;
                    instanceId = updateRuleRequest.instanceId;
                }
                else {
                    ruleId = updateRuleRequest['rule_id'];
                    body = updateRuleRequest['body'];
                    instanceId = updateRuleRequest['Instance-Id'];
                }
            }
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId', 'Required parameter ruleId was null or undefined when calling updateRule.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'rule_id': ruleId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口查询绑定了指定标签的资源。当前支持标签的资源有Device(设备)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        listResourcesByTags: function (listResourcesByTagsRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/tags/query-resources",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var body;
            var instanceId;
            var limit;
            var marker;
            var offset;
            if (listResourcesByTagsRequest !== null && listResourcesByTagsRequest !== undefined) {
                if (listResourcesByTagsRequest instanceof ListResourcesByTagsRequest_1.ListResourcesByTagsRequest) {
                    instanceId = listResourcesByTagsRequest.instanceId;
                    limit = listResourcesByTagsRequest.limit;
                    marker = listResourcesByTagsRequest.marker;
                    offset = listResourcesByTagsRequest.offset;
                    body = listResourcesByTagsRequest.body;
                }
                else {
                    instanceId = listResourcesByTagsRequest['Instance-Id'];
                    limit = listResourcesByTagsRequest['limit'];
                    marker = listResourcesByTagsRequest['marker'];
                    offset = listResourcesByTagsRequest['offset'];
                    body = listResourcesByTagsRequest['body'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口为指定资源绑定标签。当前支持标签的资源有Device(设备)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        tagDevice: function (tagDeviceRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/tags/bind-resource",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (tagDeviceRequest !== null && tagDeviceRequest !== undefined) {
                if (tagDeviceRequest instanceof TagDeviceRequest_1.TagDeviceRequest) {
                    instanceId = tagDeviceRequest.instanceId;
                    body = tagDeviceRequest.body;
                }
                else {
                    instanceId = tagDeviceRequest['Instance-Id'];
                    body = tagDeviceRequest['body'];
                }
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 应用服务器可调用此接口为指定资源解绑标签。当前支持标签的资源有Device(设备)。
         *
         * Please refer to HUAWEI cloud API Explorer for details.
         */
        untagDevice: function (untagDeviceRequest) {
            var options = {
                method: "POST",
                url: "/v5/iot/{project_id}/tags/unbind-resource",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var instanceId;
            if (untagDeviceRequest !== null && untagDeviceRequest !== undefined) {
                if (untagDeviceRequest instanceof UntagDeviceRequest_1.UntagDeviceRequest) {
                    instanceId = untagDeviceRequest.instanceId;
                    body = untagDeviceRequest.body;
                }
                else {
                    instanceId = untagDeviceRequest['Instance-Id'];
                    body = untagDeviceRequest['body'];
                }
            }
            if (instanceId !== undefined && instanceId !== null) {
                localVarHeaderParameter['Instance-Id'] = String(instanceId);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
    };
};
exports.ParamCreater = ParamCreater;
function newClient(client) {
    return new IoTDAClient(client);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
