import { AxiosRequestConfig } from 'axios';
import { IHttpRequest } from './IHttpRequest';
import { HttpClient } from './HttpClient';
import { Logger, LogLevel } from '../logger';
import { DefaultHttpResponse } from './DefaultHttpResponse';
import { SdkResponse } from '../SdkResponse';
import { ICredential } from '../auth/ICredential';
export declare class DefaultHttpClient implements HttpClient {
    private endpoints;
    credentials?: ICredential;
    httpRequest?: IHttpRequest;
    private _axiosInstance;
    private _logger;
    private _defaultOptions;
    private readonly maxRetryCount;
    private retryCount;
    static httpReqParam: any;
    static httpResponse: any;
    private readonly _DEFAULT_HEADERS;
    constructor(options?: ClientOptions, endpoints?: string[]);
    sendRequest<T extends SdkResponse>(httpRequest: IHttpRequest): Promise<DefaultHttpResponse<T>>;
    private _createAxiosInstance;
    private addInterceptorsToAxiosInstance;
    private buildResLog;
    private _sendHttpRequest;
    private _formatHttpResponse;
    private _formatExceptionResponse;
}
export interface ClientOptions {
    disableSslVerification?: boolean;
    proxy?: string;
    headers?: any;
    logger?: Logger;
    logLevel?: LogLevel;
    axiosRequestConfig?: AxiosRequestConfig;
}
