"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpRequestBuilder = void 0;
var IHttpRequest_1 = require("./IHttpRequest");
var HttpRequestBuilder = /** @class */ (function () {
    function HttpRequestBuilder(httpRequest) {
        this.httpRequest = httpRequest || new IHttpRequest_1.HttpRequestImpl();
    }
    HttpRequestBuilder.prototype.build = function () {
        return this.httpRequest;
    };
    HttpRequestBuilder.prototype.withEndpoint = function (endpoints) {
        this.httpRequest.endpoint = endpoints;
        return this;
    };
    HttpRequestBuilder.prototype.withUrl = function (value) {
        this.httpRequest.url = value;
        return this;
    };
    HttpRequestBuilder.prototype.withContentType = function (value) {
        this.httpRequest.contentType = value;
        return this;
    };
    HttpRequestBuilder.prototype.withMethod = function (value) {
        this.httpRequest.method = value;
        return this;
    };
    HttpRequestBuilder.prototype.withQueryParams = function (value) {
        this.httpRequest.queryParams = value;
        return this;
    };
    HttpRequestBuilder.prototype.withPathParams = function (value) {
        this.httpRequest.pathParams = value;
        return this;
    };
    HttpRequestBuilder.prototype.withHeaders = function (value) {
        this.httpRequest.headers = value;
        return this;
    };
    HttpRequestBuilder.prototype.withData = function (value) {
        this.httpRequest.data = value;
        return this;
    };
    HttpRequestBuilder.prototype.addPathParams = function (pathParams) {
        Object.assign(this.httpRequest.getPathParams(), pathParams);
        return this;
    };
    HttpRequestBuilder.prototype.addQueryParams = function (queryParams) {
        Object.assign(this.httpRequest.getQueryParams, queryParams);
        return this;
    };
    HttpRequestBuilder.prototype.addHeaders = function (key, value) {
        var headers = this.httpRequest.getHeaders();
        if (!headers[key]) {
            this.httpRequest.headers[key] = value;
        }
        return this;
    };
    HttpRequestBuilder.prototype.addAllHeaders = function (header) {
        Object.assign(this.httpRequest.getHeaders(), header);
        return this;
    };
    return HttpRequestBuilder;
}());
exports.HttpRequestBuilder = HttpRequestBuilder;
