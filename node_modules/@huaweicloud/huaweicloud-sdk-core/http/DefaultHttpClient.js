"use strict";
/*
 * Copyright 2023 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultHttpClient = void 0;
var axios_1 = __importDefault(require("axios"));
var querystring_1 = require("querystring");
var https_proxy_agent_1 = __importDefault(require("https-proxy-agent"));
var logger_1 = require("../logger");
var ExceptionUtil_1 = require("../exception/ExceptionUtil");
var SdkException_1 = require("../exception/SdkException");
var AKSKSigner_1 = require("../auth/AKSKSigner");
var DefaultHttpClient = /** @class */ (function () {
    function DefaultHttpClient(options, endpoints) {
        if (options === void 0) { options = {}; }
        this.maxRetryCount = 1;
        this.retryCount = 0;
        this._DEFAULT_HEADERS = {
            Accept: 'application/json',
            'content-type': 'application/json',
        };
        if (!endpoints) {
            throw new SdkException_1.SdkException("Endpoints cannot be empty.");
        }
        this.endpoints = endpoints;
        this._defaultOptions = options || {};
        this._logger = options.logger || (0, logger_1.getLogger)(DefaultHttpClient.name, options.logLevel || logger_1.LogLevel.ERROR);
        this._axiosInstance = this._createAxiosInstance();
        this._logger.debug('Initialized');
    }
    DefaultHttpClient.prototype.sendRequest = function (httpRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosResponse, httpResponse, error_1, exceptionResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.retryCount = 0;
                        return [4 /*yield*/, this._sendHttpRequest(httpRequest)];
                    case 1:
                        axiosResponse = _a.sent();
                        DefaultHttpClient.httpResponse = axiosResponse;
                        httpResponse = this._formatHttpResponse(httpRequest, axiosResponse);
                        return [2 /*return*/, httpResponse];
                    case 2:
                        error_1 = _a.sent();
                        exceptionResponse = this._formatExceptionResponse(error_1);
                        this._logger.error('Some error found:', exceptionResponse);
                        throw ExceptionUtil_1.ExceptionUtil.generalException(exceptionResponse);
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    DefaultHttpClient.prototype._createAxiosInstance = function () {
        var _this = this;
        var proxyAgent = this._defaultOptions.proxy
            ? (0, https_proxy_agent_1.default)(this._defaultOptions.proxy)
            : undefined;
        var axiosRequestConfig = {
            maxContentLength: Infinity,
            headers: Object.assign(this._DEFAULT_HEADERS, this._defaultOptions.headers),
            proxy: false,
            httpAgent: proxyAgent,
            httpsAgent: proxyAgent,
        };
        if (this._defaultOptions.axiosRequestConfig) {
            Object.assign(axiosRequestConfig, this._defaultOptions.axiosRequestConfig);
        }
        var axiosInstance = axios_1.default.create(axiosRequestConfig);
        axiosInstance.interceptors.request.use(function (request) {
            var url = request.url, method = request.method, data = request.data, headers = request.headers;
            _this._logger.debug("Request: ".concat(method.toUpperCase(), " ").concat(url, " ").concat(JSON.stringify(headers), " ").concat(JSON.stringify(data)));
            return request;
        });
        this.addInterceptorsToAxiosInstance(axiosInstance);
        delete axiosInstance.defaults.headers.post['Content-Type'];
        delete axiosInstance.defaults.headers.put['Content-Type'];
        return axiosInstance;
    };
    DefaultHttpClient.prototype.addInterceptorsToAxiosInstance = function (axiosInstance) {
        var _this = this;
        axiosInstance.interceptors.response.use(function (response) {
            _this.buildResLog(response);
            return response;
        }, function (error) { return __awaiter(_this, void 0, void 0, function () {
            var backupUrl, response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(error.code === 'ECONNABORTED' ||
                            error.code === 'ECONNREFUSED' ||
                            error.code === 'ECONNRESET' ||
                            (error.response && error.response.status === 504))) return [3 /*break*/, 4];
                        if (this.retryCount >= this.maxRetryCount) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        if (this.endpoints.length < 2) {
                            return [2 /*return*/, Promise.reject(error)];
                        }
                        this.retryCount++;
                        backupUrl = this.endpoints[1];
                        // Set the baseURL of the request to the backup URL
                        error.config.baseURL = backupUrl;
                        error.config.headers['host'] = error.config.baseURL.replace(/^https?:\/\/(.*?)\/?$/, '$1');
                        reSigner(error.config, this.credentials, this.httpRequest);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, axiosInstance.request(error.config)];
                    case 2:
                        response = _a.sent();
                        // If the request succeeds, reverse the order of the 'endpoints' array
                        this.endpoints = this.endpoints.reverse();
                        return [2 /*return*/, response];
                    case 3:
                        err_1 = _a.sent();
                        // If the request fails, reject the entire request
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 4: 
                    // If the error code is not 'ECONNABORTED' or 'ECONNREFUSED', pass the error down
                    return [2 /*return*/, Promise.reject(error)];
                }
            });
        }); });
    };
    DefaultHttpClient.prototype.buildResLog = function (response) {
        var _a = response.config, url = _a.url, method = _a.method, status = response.status, statusText = response.statusText, headers = response.headers;
        var statusStr = "".concat(status !== null && status !== void 0 ? status : '').concat(statusText ? ":".concat(statusText) : '', " ");
        var requestId = headers['x-request-id'];
        var responseLength = response.data ? JSON.stringify(response.data).length : 0;
        this._logger.debug("Response: ".concat(method === null || method === void 0 ? void 0 : method.toUpperCase(), " ").concat(statusStr, " ").concat(url, " ").concat(JSON.stringify(headers), " ").concat(responseLength, " ").concat(requestId));
    };
    DefaultHttpClient.prototype._sendHttpRequest = function (httpRequest) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var url, queryParams, method, data, headers, requestParams, contentType, primaryUrl;
            return __generator(this, function (_b) {
                url = httpRequest.url, queryParams = httpRequest.queryParams, method = httpRequest.method, data = httpRequest.data, headers = httpRequest.headers;
                headers = headers || {};
                url = stripTrailingSlash(url);
                addUserAgentHeader(headers, (_a = this._defaultOptions.headers) === null || _a === void 0 ? void 0 : _a['User-Agent']);
                requestParams = {
                    url: url,
                    method: method,
                    headers: headers,
                    params: queryParams,
                    data: data,
                    paramsSerializer: function (params) {
                        return (0, querystring_1.stringify)(params);
                    },
                };
                if (httpRequest.axiosRequestConfig) {
                    Object.assign(requestParams, httpRequest.axiosRequestConfig);
                }
                if (headers['content-type'] === 'multipart/form-data') {
                    contentType = data.getHeaders()["content-type"];
                    requestParams.headers = __assign(__assign({}, requestParams.headers), { 'content-type': contentType });
                }
                primaryUrl = this.endpoints[0];
                requestParams.baseURL = primaryUrl;
                DefaultHttpClient.httpReqParam = requestParams;
                return [2 /*return*/, this._axiosInstance(requestParams)];
            });
        });
    };
    DefaultHttpClient.prototype._formatHttpResponse = function (httpRequest, axiosResponse) {
        if (httpRequest['responseHeaders'] && axiosResponse.data) {
            var responseHeaders = httpRequest['responseHeaders'];
            for (var _i = 0, responseHeaders_1 = responseHeaders; _i < responseHeaders_1.length; _i++) {
                var item = responseHeaders_1[_i];
                var lowerItem = item.toString().toLowerCase();
                if (!axiosResponse.data[item] && axiosResponse.headers[lowerItem]) {
                    axiosResponse.data[item] = axiosResponse.headers[lowerItem];
                }
            }
        }
        return {
            data: axiosResponse.data,
            statusCode: axiosResponse.status,
            headers: axiosResponse.headers,
        };
    };
    DefaultHttpClient.prototype._formatExceptionResponse = function (error) {
        var _a;
        var transformedResponse = {
            data: error.response ? error.response.data : undefined,
            status: error.response ? error.response.status : undefined,
            headers: error.response ? error.response.headers : undefined,
            message: error.message || error.code,
            requestId: (_a = error.response) === null || _a === void 0 ? void 0 : _a.headers['x-request-id'],
        };
        if (error.isAxiosError) {
            transformedResponse.config = error.config;
        }
        return transformedResponse;
    };
    return DefaultHttpClient;
}());
exports.DefaultHttpClient = DefaultHttpClient;
function addUserAgentHeader(headers, customUserAgent) {
    if (!headers) {
        return;
    }
    var prefix = 'huaweicloud-usdk-nodejs/3.0';
    if (customUserAgent && typeof customUserAgent === 'string') {
        headers['User-Agent'] = "".concat(prefix, " ").concat(customUserAgent);
    }
    else {
        headers['User-Agent'] = prefix;
    }
}
function stripTrailingSlash(url) {
    if (typeof url !== 'string' || url.trim() === '') {
        throw new Error('Invalid URL');
    }
    return url.replace(/\/$/, '');
}
function reSigner(config, credential, httpRequest) {
    var _a;
    if (!credential || !httpRequest) {
        return;
    }
    httpRequest.endpoint = "".concat(config.baseURL).concat(config.url);
    var headerProperties = Object.entries(config.headers || {}).reduce(function (acc, _a) {
        var key = _a[0], value = _a[1];
        if (key === 'X-Project-Id' || key === 'X-Domain-Id') {
            acc[key] = value;
        }
        return acc;
    }, {});
    httpRequest.headers = __assign(__assign(__assign({}, httpRequest.headers), headerProperties), (config.headers && {
        'content-type': config.headers['Content-Type']
    }));
    delete httpRequest.headers['Authorization'];
    delete httpRequest.headers['user-agent'];
    httpRequest.headers['host'] = (_a = config.baseURL) === null || _a === void 0 ? void 0 : _a.replace(/^https?:\/\/(.*?)\/?$/, '$1');
    var headers = AKSKSigner_1.AKSKSigner.sign(httpRequest, credential);
    config.headers = headers;
}
