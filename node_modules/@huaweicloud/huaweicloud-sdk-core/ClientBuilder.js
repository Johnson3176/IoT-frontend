"use strict";
/*
 * Copyright 2023 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientBuilder = void 0;
var HcClient_1 = require("./HcClient");
var DefaultHttpClient_1 = require("./http/DefaultHttpClient");
var BasicCredentials_1 = require("./auth/BasicCredentials");
var GlobalCredentials_1 = require("./auth/GlobalCredentials");
var SdkException_1 = require("./exception/SdkException");
var path = __importStar(require("path"));
var ClientBuilder = /** @class */ (function () {
    function ClientBuilder(init, credentialType) {
        this.credentialType = ["BasicCredentials", "GlobalCredentials"];
        this.envParams = process.env;
        this.credentials = {};
        this.init = init;
        if (credentialType) {
            this.credentialType = credentialType.split(",");
        }
    }
    ClientBuilder.prototype.withEndpoint = function (endpoint) {
        var _a;
        this.endpoints = [];
        if (typeof endpoint === 'string') {
            this.endpoints.push(endpoint);
        }
        else if (Array.isArray(endpoint)) {
            (_a = this.endpoints).push.apply(_a, endpoint);
        }
        return this;
    };
    ClientBuilder.prototype.withCredential = function (credential) {
        this.credential = credential;
        return this;
    };
    ClientBuilder.prototype.withProxyAgent = function (proxyAgent) {
        this.proxyAgent = proxyAgent;
        return this;
    };
    ClientBuilder.prototype.withRegion = function (region) {
        this.region = region;
        return this;
    };
    ClientBuilder.prototype.withOptions = function (options) {
        this.userOptions = options;
        return this;
    };
    ClientBuilder.prototype.build = function () {
        var _a, _b;
        var axiosOptions = {
            disableSslVerification: true
        };
        if (this.proxyAgent) {
            Object.assign(axiosOptions, { proxy: this.proxyAgent });
        }
        if ((_a = this.userOptions) === null || _a === void 0 ? void 0 : _a.customUserAgent) {
            axiosOptions.headers = axiosOptions.headers || {};
            axiosOptions.headers["User-Agent"] = this.userOptions.customUserAgent;
        }
        if ((_b = this.userOptions) === null || _b === void 0 ? void 0 : _b.axiosRequestConfig) {
            axiosOptions.axiosRequestConfig = this.userOptions.axiosRequestConfig;
        }
        if (!this.credential) {
            this.credential = this.getCredentialFromEnvironment();
        }
        if (!this.credential) {
            throw new SdkException_1.SdkException("credential can not be null, ".concat(this.credentialType, "Credential objects are required"));
        }
        if (this.region) {
            this.endpoints = this.region.endpoints;
        }
        var client = new DefaultHttpClient_1.DefaultHttpClient(axiosOptions, this.endpoints);
        var hcClient = new HcClient_1.HcClient(client);
        this.region && hcClient.withRegion(this.region);
        hcClient.withCredential(this.credential).withEndpoints(this.endpoints);
        return this.init(hcClient);
    };
    /**
     * Get 'HUAWEICLOUD_SDK_TYPE' from environment variables
     * If the variable does not exist, use the first credential type
     * Generate credential entity
     * Assign AK, SK, projectId/domainId from the environment variables
     * If the environment variable is 'GlobalCredentials', assign the domainId
     * @returns ICredential
     */
    ClientBuilder.prototype.getCredentialFromEnvironment = function () {
        var sdkType = process.env.HUAWEICLOUD_SDK_TYPE;
        var credentialTYPE = this.whichCredential(sdkType);
        return this.getInputParamCredential(credentialTYPE, this.envParams);
    };
    ClientBuilder.prototype.whichCredential = function (sdkType) {
        if (!sdkType) {
            return new BasicCredentials_1.BasicCredentials();
        }
        switch (sdkType) {
            case 'BasicCredentials':
                return new BasicCredentials_1.BasicCredentials();
            case 'GlobalCredentials':
                return new GlobalCredentials_1.GlobalCredentials();
            default:
                if (this.credentials[sdkType]) {
                    return this.credentials[sdkType];
                }
                var definedCredPath = path.join(this.init().getPath(), "".concat(sdkType));
                var credentialTYPE = require(definedCredPath);
                this.credentials[sdkType] = new credentialTYPE();
                return this.credentials[sdkType];
        }
    };
    ClientBuilder.prototype.getInputParamCredential = function (CredentialsType, credential) {
        var hash = Object.keys(credential)
            .filter(function (key) { return key.indexOf("HUAWEICLOUD_SDK_") === 0; })
            .reduce(function (acc, key) {
            var newKey = key.substring(16);
            if (newKey.indexOf('_') === -1) {
                newKey = "with".concat(newKey.toLowerCase().replace(/^\w/, function (c) { return c.toUpperCase(); }));
            }
            else {
                newKey = newKey.split('_').map(function (word) { return "".concat(word.toLowerCase().replace(/^\w/, function (c) { return c.toUpperCase(); })); }).join('');
                newKey = "with".concat(newKey);
            }
            acc[newKey] = credential[key];
            return acc;
        }, {});
        Object.keys(hash).forEach(function (key) {
            if (CredentialsType[key]) {
                CredentialsType[key](hash[key]);
            }
        });
        return CredentialsType;
    };
    return ClientBuilder;
}());
exports.ClientBuilder = ClientBuilder;
