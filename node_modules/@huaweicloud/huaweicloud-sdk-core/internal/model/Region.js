"use strict";
/*
 * Copyright 2023 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Region = void 0;
var Region = /** @class */ (function () {
    function Region(description, parentRegionId, links, id, type) {
        this['description'] = description;
        this['parent_region_id'] = parentRegionId;
        this['links'] = links;
        this['id'] = id;
        this['type'] = type;
    }
    Region.prototype.withDescription = function (description) {
        this['description'] = description;
        return this;
    };
    Region.prototype.withParentRegionId = function (parentRegionId) {
        this['parent_region_id'] = parentRegionId;
        return this;
    };
    Object.defineProperty(Region.prototype, "parentRegionId", {
        get: function () {
            return this['parent_region_id'];
        },
        set: function (parentRegionId) {
            this['parent_region_id'] = parentRegionId;
        },
        enumerable: false,
        configurable: true
    });
    Region.prototype.withLinks = function (links) {
        this['links'] = links;
        return this;
    };
    Region.prototype.withId = function (id) {
        this['id'] = id;
        return this;
    };
    Region.prototype.withType = function (type) {
        this['type'] = type;
        return this;
    };
    return Region;
}());
exports.Region = Region;
