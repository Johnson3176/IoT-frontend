"use strict";
/*
 * Copyright 2023 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IamService = void 0;
var SdkException_1 = require("../../exception/SdkException");
var KeystoneCreateProjectRequest_1 = require("../model/KeystoneCreateProjectRequest");
var KeystoneListProjectsRequest_1 = require("../model/KeystoneListProjectsRequest");
var lodash_1 = require("lodash");
var constant_1 = require("../../utils/constant");
var IamService = /** @class */ (function () {
    function IamService(hclient, iamEndpoint) {
        this.client = hclient.overrideEndpoints(iamEndpoint ? [iamEndpoint] : [constant_1.Constants.DEFAULT_IAM_ENDPOINT]);
    }
    IamService.prototype.getProjectId = function (regionId) {
        return __awaiter(this, void 0, void 0, function () {
            var request, projectRes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = new KeystoneListProjectsRequest_1.KeystoneListProjectsRequest();
                        request.name = regionId;
                        return [4 /*yield*/, this.keystoneListProjects(request)];
                    case 1:
                        projectRes = _a.sent();
                        if (projectRes.projects && projectRes.projects.length == 1) {
                            return [2 /*return*/, projectRes.projects[0].id];
                        }
                        else {
                            return [2 /*return*/, this.getCreateProjectId(regionId)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    IamService.prototype.getDomainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getAuthDomainId()];
            });
        });
    };
    IamService.prototype.getCreateProjectId = function (regionId) {
        return __awaiter(this, void 0, void 0, function () {
            var supportedRegions, domainId, createReq, createRes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSupportedRegions()];
                    case 1:
                        supportedRegions = _a.sent();
                        if (!supportedRegions || supportedRegions.length <= 0) {
                            throw new SdkException_1.SdkException("failed to list regions");
                        }
                        if (!(0, lodash_1.includes)(supportedRegions, regionId)) {
                            throw new SdkException_1.SdkException("the region input is not supported to create project automatically");
                        }
                        return [4 /*yield*/, this.getAuthDomainId()];
                    case 2:
                        domainId = _a.sent();
                        if (!domainId) {
                            throw new SdkException_1.SdkException("No domain id found, please select one of the following solutions:\n\t"
                                + "1. Manually specify domain_id when initializing the credentials.\n\t"
                                + "2. Use the domain account to grant the current account permissions of the IAM service.\n\t"
                                + "3. Use AK/SK of the domain account.");
                        }
                        createReq = new KeystoneCreateProjectRequest_1.KeystoneCreateProjectRequest();
                        createReq.withBody({
                            project: {
                                name: regionId,
                                domain_id: domainId
                            }
                        });
                        return [4 /*yield*/, this.keystoneCreateProject(createReq)];
                    case 3:
                        createRes = _a.sent();
                        if (!createRes.project) {
                            throw new SdkException_1.SdkException("failed to create project");
                        }
                        return [2 /*return*/, createRes.project.id];
                }
            });
        });
    };
    IamService.prototype.getSupportedRegions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var publicRegionType, res, ans;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        publicRegionType = "public";
                        return [4 /*yield*/, this.keystoneListRegions()];
                    case 1:
                        res = _a.sent();
                        if (!res) {
                            throw new SdkException_1.SdkException("failed to list all regions");
                        }
                        ans = (0, lodash_1.filter)(res.regions, function (item) {
                            return publicRegionType === item.type;
                        }).map(function (item) {
                            return item.id;
                        });
                        return [2 /*return*/, ans];
                }
            });
        });
    };
    IamService.prototype.getAuthDomainId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.keystoneListAuthDomains()];
                    case 1:
                        res = _a.sent();
                        if (!res || !res.domains || res.domains.length <= 0) {
                            throw new SdkException_1.SdkException("No domain id found, please select one of the following solutions:\n\t"
                                + "1. Manually specify domain_id when initializing the credentials.\n\t"
                                + "2. Use the domain account to grant the current account permissions of the IAM service.\n\t"
                                + "3. Use AK/SK of the domain account.");
                        }
                        return [2 /*return*/, res.domains[0].id];
                }
            });
        });
    };
    IamService.prototype.keystoneListRegions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, localVarHeaderParameter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: "GET",
                            url: "/v3/regions",
                            contentType: "application/json",
                            queryParams: {},
                            pathParams: {},
                            headers: {},
                            data: {}
                        };
                        localVarHeaderParameter = {};
                        options.headers = localVarHeaderParameter;
                        return [4 /*yield*/, this.client.sendRequest(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IamService.prototype.keystoneListProjects = function (keystoneListProjectsRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var options, localVarHeaderParameter, localVarQueryParameter, domainId, name, parentId, enabled, isDomain, page, perPage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: "GET",
                            url: "/v3/projects",
                            contentType: "application/json",
                            queryParams: {},
                            pathParams: {},
                            headers: {},
                            data: {}
                        };
                        localVarHeaderParameter = {};
                        localVarQueryParameter = {};
                        if (keystoneListProjectsRequest !== null && keystoneListProjectsRequest !== undefined) {
                            if (keystoneListProjectsRequest instanceof KeystoneListProjectsRequest_1.KeystoneListProjectsRequest) {
                                domainId = keystoneListProjectsRequest.domainId;
                                name = keystoneListProjectsRequest.name;
                                parentId = keystoneListProjectsRequest.parentId;
                                enabled = keystoneListProjectsRequest.enabled;
                                isDomain = keystoneListProjectsRequest.isDomain;
                                page = keystoneListProjectsRequest.page;
                                perPage = keystoneListProjectsRequest.perPage;
                            }
                            else {
                                domainId = keystoneListProjectsRequest['domain_id'];
                                name = keystoneListProjectsRequest['name'];
                                parentId = keystoneListProjectsRequest['parent_id'];
                                enabled = keystoneListProjectsRequest['enabled'];
                                isDomain = keystoneListProjectsRequest['is_domain'];
                                page = keystoneListProjectsRequest['page'];
                                perPage = keystoneListProjectsRequest['per_page'];
                            }
                        }
                        if (domainId !== null && domainId !== undefined) {
                            localVarQueryParameter['domain_id'] = domainId;
                        }
                        if (name !== null && name !== undefined) {
                            localVarQueryParameter['name'] = name;
                        }
                        if (parentId !== null && parentId !== undefined) {
                            localVarQueryParameter['parent_id'] = parentId;
                        }
                        if (enabled !== null && enabled !== undefined) {
                            localVarQueryParameter['enabled'] = enabled;
                        }
                        if (isDomain !== null && isDomain !== undefined) {
                            localVarQueryParameter['is_domain'] = isDomain;
                        }
                        if (page !== null && page !== undefined) {
                            localVarQueryParameter['page'] = page;
                        }
                        if (perPage !== null && perPage !== undefined) {
                            localVarQueryParameter['per_page'] = perPage;
                        }
                        options.queryParams = localVarQueryParameter;
                        options.headers = localVarHeaderParameter;
                        return [4 /*yield*/, this.client.sendRequest(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IamService.prototype.keystoneCreateProject = function (keystoneCreateProjectRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var options, localVarHeaderParameter, body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: "POST",
                            url: "/v3/projects",
                            contentType: "application/json;charset=UTF-8",
                            queryParams: {},
                            pathParams: {},
                            headers: {},
                            data: {}
                        };
                        localVarHeaderParameter = {};
                        if (keystoneCreateProjectRequest !== null && keystoneCreateProjectRequest !== undefined) {
                            if (keystoneCreateProjectRequest instanceof KeystoneCreateProjectRequest_1.KeystoneCreateProjectRequest) {
                                body = keystoneCreateProjectRequest.body;
                            }
                            else {
                                body = keystoneCreateProjectRequest['body'];
                            }
                        }
                        options.data = body !== undefined ? body : {};
                        options.headers = localVarHeaderParameter;
                        return [4 /*yield*/, this.client.sendRequest(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IamService.prototype.keystoneListAuthDomains = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            method: "GET",
                            url: "/v3/auth/domains",
                            contentType: "application/json",
                            queryParams: {},
                            pathParams: {},
                            headers: {},
                            data: {}
                        };
                        options.headers = {};
                        return [4 /*yield*/, this.client.sendRequest(options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return IamService;
}());
exports.IamService = IamService;
