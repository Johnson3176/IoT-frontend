import { HttpClient } from "./http/HttpClient";
import { ICredential } from "./auth/ICredential";
import { SdkResponse } from "./SdkResponse";
import { Region } from "./region/region";
import { ClientOptions } from "./http/DefaultHttpClient";
export interface HttpRequestOptions {
    method: string;
    url: string;
    contentType: string;
    queryParams: Record<string, any>;
    pathParams: Record<string, any>;
    headers: Record<string, string>;
    data: Record<string, any>;
}
export declare class HcClient {
    private httpClient;
    private credential?;
    private proxyAgent;
    private static loggerName;
    private logger;
    private region?;
    private clientOptions?;
    private endpoints?;
    constructor(client: HttpClient, clientOptions?: ClientOptions);
    withEndpoints(endpoints?: string[]): this;
    withCredential(credential?: ICredential): HcClient;
    withRegion(region?: Region): HcClient;
    withHttpsAgent(proxyAgent: string): HcClient;
    overrideEndpoints(endpoint?: string[]): HcClient;
    sendRequest<T extends SdkResponse>(options: HttpRequestOptions): Promise<T>;
    private buildRequest;
    private extractResponse;
}
