export declare enum LogLevel {
    ERROR = "error",
    DEBUG = "debug",
    INFO = "info",
    WARN = "warn"
}
export interface Logger {
    debug(...msg: any[]): void;
    info(...msg: any[]): void;
    warn(...msg: any[]): void;
    error(...msg: any[]): void;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
    setName(name: string): void;
}
export declare class LoggerUtils {
    /** Map of severity as comparable numbers for each log level */
    static severity: {
        [key in LogLevel]: number;
    };
    static isMoreOrEqualSevere(a: LogLevel, b: LogLevel): boolean;
}
export declare class LocalLogger implements Logger {
    private level;
    private name?;
    constructor();
    debug(...msg: any[]): void;
    info(...msg: any[]): void;
    warn(...msg: any[]): void;
    error(...msg: any[]): void;
    setLevel(level: LogLevel): void;
    getLevel(): LogLevel;
    setName(name: string): void;
}
export declare function getLogger(name: string, level: LogLevel, existingLogger?: Logger): Logger;
