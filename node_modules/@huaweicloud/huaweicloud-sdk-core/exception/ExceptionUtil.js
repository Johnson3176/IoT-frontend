"use strict";
/*
 * Copyright 2023 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExceptionUtil = void 0;
var ClientRequestException_1 = require("./ClientRequestException");
var ServerResponseException_1 = require("./ServerResponseException");
var ServiceResponseException_1 = require("./ServiceResponseException");
var ExceptionUtil = /** @class */ (function () {
    function ExceptionUtil() {
    }
    ExceptionUtil.generalException = function (exception) {
        var _a, _b, _c, _d;
        var _e = exception.data, data = _e === void 0 ? {} : _e, status = exception.status, message = exception.message, requestId = exception.requestId;
        var error = data.error, error_code = data.error_code, error_msg = data.error_msg, encoded_authorization_message = data.encoded_authorization_message;
        var errorCode = (_a = error === null || error === void 0 ? void 0 : error.code) !== null && _a !== void 0 ? _a : error_code;
        var errorMsg = (_c = (_b = error === null || error === void 0 ? void 0 : error.message) !== null && _b !== void 0 ? _b : error_msg) !== null && _c !== void 0 ? _c : message;
        var encodedAuthorizationMessage = (_d = error === null || error === void 0 ? void 0 : error.encoded_authorization_message) !== null && _d !== void 0 ? _d : encoded_authorization_message;
        var httpStatusCode = status;
        if (httpStatusCode) {
            if (isClientError(httpStatusCode)) {
                return new ClientRequestException_1.ClientRequestException(httpStatusCode, errorMsg, errorCode, requestId, encodedAuthorizationMessage);
            }
            else if (isServerError(httpStatusCode)) {
                return new ServerResponseException_1.ServerResponseException(httpStatusCode, errorMsg, errorCode, requestId, encodedAuthorizationMessage);
            }
        }
        return new ServiceResponseException_1.ServiceResponseException(httpStatusCode, errorMsg, errorCode, requestId, encodedAuthorizationMessage);
    };
    return ExceptionUtil;
}());
exports.ExceptionUtil = ExceptionUtil;
function isClientError(statusCode) {
    return statusCode >= 400 && statusCode < 500;
}
function isServerError(statusCode) {
    return statusCode >= 500 && statusCode < 600;
}
