"use strict";
/*
 * Copyright 2020 Huawei Technologies Co.,Ltd.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalCredentials = void 0;
var ICredential_1 = require("./ICredential");
var AKSKSigner_1 = require("./AKSKSigner");
var IHttpRequestBuilder_1 = require("../http/IHttpRequestBuilder");
var iam_service_1 = require("../internal/services/iam.service");
var authcache_1 = require("../internal/services/authcache");
var GlobalCredentials = /** @class */ (function () {
    function GlobalCredentials(data) {
        if (data === void 0) { data = {}; }
        this.ak = data === null || data === void 0 ? void 0 : data.ak;
        this.sk = data === null || data === void 0 ? void 0 : data.sk;
        this.securityToken = data === null || data === void 0 ? void 0 : data.securityToken;
        this.domainId = data === null || data === void 0 ? void 0 : data.domainId;
        this.iamEndpoint = data === null || data === void 0 ? void 0 : data.iamEndpoint;
    }
    GlobalCredentials.prototype.withAk = function (ak) {
        this.ak = ak;
        return this;
    };
    GlobalCredentials.prototype.withSk = function (sk) {
        this.sk = sk;
        return this;
    };
    GlobalCredentials.prototype.withDomainId = function (domainId) {
        this.domainId = domainId;
        return this;
    };
    GlobalCredentials.prototype.withSecurityToken = function (securityToken) {
        this.securityToken = securityToken;
        return this;
    };
    GlobalCredentials.prototype.withIamEndpoint = function (iamEndpoint) {
        this.iamEndpoint = iamEndpoint;
        return this;
    };
    GlobalCredentials.prototype.getAk = function () {
        if (!this.ak) {
            throw new AKSKSigner_1.RequiredError('AK cannot be empty or undefined.');
        }
        return this.ak;
    };
    GlobalCredentials.prototype.getSk = function () {
        if (!this.sk) {
            throw new AKSKSigner_1.RequiredError('SK cannot be empty or undefined.');
        }
        return this.sk;
    };
    GlobalCredentials.prototype.setDomainId = function (value) {
        this.domainId = value;
    };
    GlobalCredentials.prototype.getPathParams = function () {
        var pathParams = {};
        if (this.domainId) {
            Object.assign(pathParams, { domain_id: this.domainId });
        }
        return pathParams;
    };
    GlobalCredentials.prototype.processAuthRequest = function (httpRequest) {
        if (!this.ak) {
            throw new AKSKSigner_1.RequiredError('AK cannot be empty or undefined.');
        }
        if (!this.sk) {
            throw new AKSKSigner_1.RequiredError('SK cannot be empty or undefined.');
        }
        var builder = new IHttpRequestBuilder_1.HttpRequestBuilder()
            .addPathParams(this.getPathParams());
        // 替换所有的path参数
        var url = httpRequest.url;
        if (this.domainId) {
            url = parsePath(url, this.getPathParams());
            builder.withUrl(url)
                .addHeaders("X-Domain-Id", this.domainId);
        }
        builder.withEndpoint("".concat(httpRequest.endpoint).concat(url));
        if (this.securityToken) {
            builder.addHeaders("X-Security-Token", this.securityToken);
        }
        if (!(0, ICredential_1.isJsonContentType)(httpRequest.headers)) {
            builder.addHeaders("X-Sdk-Content-Sha256", "UNSIGNED-PAYLOAD");
        }
        builder.addAllHeaders(httpRequest.headers);
        Object.assign(httpRequest, builder.build());
        var headers = AKSKSigner_1.AKSKSigner.sign(httpRequest, this);
        builder.addAllHeaders(headers);
        return Object.assign(httpRequest, builder.build());
    };
    GlobalCredentials.prototype.processAuthParams = function (hcClient) {
        return __awaiter(this, void 0, void 0, function () {
            var authCacheInstance, akWithName, domainId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.domainId) {
                            return [2 /*return*/, this];
                        }
                        authCacheInstance = authcache_1.AuthCache.instance();
                        akWithName = this.getAk();
                        if (authCacheInstance.getCache(akWithName)) {
                            this.domainId = authCacheInstance.getCache(akWithName);
                            return [2 /*return*/, this];
                        }
                        return [4 /*yield*/, new iam_service_1.IamService(hcClient, this.iamEndpoint).getDomainId()];
                    case 1:
                        domainId = _a.sent();
                        authCacheInstance.putCache(akWithName, domainId);
                        this.domainId = domainId;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    return GlobalCredentials;
}());
exports.GlobalCredentials = GlobalCredentials;
function parsePath(path, params) {
    if (!path || !params) {
        return path || "";
    }
    var replacePathParam = function (parsedPath, _a) {
        var param = _a[0], value = _a[1];
        var encodedValue = encodeURIComponent(value);
        return parsedPath.replace(new RegExp("{".concat(param, "}"), "g"), encodedValue);
    };
    return Object.entries(params).reduce(replacePathParam, path);
}
