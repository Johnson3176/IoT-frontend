import * as THREE from "three";
declare const makeBuffer: (count: number | undefined, fn: any, dimension?: number) => Float32Array;
declare const iterateBuffer: (buffer: ArrayLike<number>, count: number, fn: any, dimension?: number) => void;
declare const convertBufferAttributeToVector: (bufferAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute, dimension?: number) => any[];
declare const isVector: (v: any) => v is THREE.Vector2 | THREE.Vector3 | THREE.Vector4;
declare const normalizeVector: (v: any) => number[];
declare const isFloat32Array: (def: any) => def is Float32Array;
declare const expandColor: (v: THREE.Color) => number[];
declare const usePropAsIsOrAsAttribute: <T extends unknown>(count: number, prop: Float32Array | T, setDefault?: ((v: T) => number) | undefined) => Float32Array;
export { makeBuffer, iterateBuffer, convertBufferAttributeToVector, isVector, normalizeVector, isFloat32Array, expandColor, usePropAsIsOrAsAttribute, };
