import { SDFRender } from "../components";
import { SDFMainImage } from "../components";
import { joinLine, reverse } from "../utils";
import defaultShaderSDFUtils from "../shaders/util.glsl";
import defaultShaderMapFunction from "../shaders/map.glsl";
import defaultShaderRaycast from "../shaders/raycast.glsl";
import defaultShaderNormal from "../shaders/normal.glsl";
import defaultShaderMaterial from "../shaders/material.glsl";
import defaultShaderLighting from "../shaders/lighting.glsl";
import shaderBeautifulLighting from "../shaders/lightingB.glsl";
import defaultShaderRender from "../shaders/render.glsl";
import defaultShaderGetSceneColor from "../shaders/getSceneColor.glsl";
import shaderGetSceneColorWithOrbitControls from "../shaders/getSceneColorO.glsl";
import defaultShaderMainImage from "../shaders/main.glsl";
class Marcher {
    utilFunction;
    mapFunction;
    material;
    lighting;
    raycast;
    calcNormal;
    render;
    getSceneColor;
    mainImage;
    groups;
    showIsoline;
    constructor(config = {}) {
        this.utilFunction = "";
        this.mapFunction = null;
        this.material = null;
        this.lighting = null;
        this.raycast = null;
        this.calcNormal = null;
        this.render = new SDFRender();
        this.getSceneColor = null;
        this.mainImage = new SDFMainImage();
        this.groups = [];
        const { antialias = false, skybox = "vec3(10.,10.,10.)/255.", showIsoline = false, } = config;
        if (antialias) {
            this.mainImage.setAntialias(true);
        }
        if (skybox) {
            this.render.setSkyBox(skybox);
        }
        this.showIsoline = showIsoline;
    }
    setUtilFunction(str) {
        this.utilFunction = str;
        return this;
    }
    setMapFunction(mapFunction) {
        this.mapFunction = mapFunction;
        return this;
    }
    setMaterial(material) {
        this.material = material;
        return this;
    }
    setLighting(lighting) {
        this.lighting = lighting;
        return this;
    }
    setRaycast(raycast) {
        this.raycast = raycast;
        return this;
    }
    setCalcNormal(calcNormal) {
        this.calcNormal = calcNormal;
        return this;
    }
    setGetSceneColor(getSceneColor) {
        this.getSceneColor = getSceneColor;
        return this;
    }
    addGroup(group) {
        this.groups.push(group);
        return this;
    }
    enableOrbitControls() {
        this.setGetSceneColor(shaderGetSceneColorWithOrbitControls);
        return this;
    }
    enableBeautifulLighting() {
        this.setLighting(shaderBeautifulLighting);
        return this;
    }
    get shaderSDFUtils() {
        return defaultShaderSDFUtils;
    }
    get shaderMapFunction() {
        return this.mapFunction?.shader || defaultShaderMapFunction;
    }
    get shaderRaycast() {
        return this.raycast || defaultShaderRaycast;
    }
    get shaderNormal() {
        return this.calcNormal || defaultShaderNormal;
    }
    get shaderMaterial() {
        return this.material?.shader || defaultShaderMaterial;
    }
    get shaderLighting() {
        return this.lighting || defaultShaderLighting;
    }
    get shaderRender() {
        return this.render?.shader || defaultShaderRender;
    }
    get shaderGetSceneColor() {
        return this.getSceneColor || defaultShaderGetSceneColor;
    }
    get shaderMainImage() {
        return this.mainImage?.shader || defaultShaderMainImage;
    }
    get shaderGroupFunctionsArray() {
        return this.groups.map((item) => item.mapFuncShader);
    }
    get shaderGroupFunctions() {
        return joinLine(this.shaderGroupFunctionsArray);
    }
    get shaderGroupFunctionsReverse() {
        return joinLine(reverse(this.shaderGroupFunctionsArray));
    }
    get shaderIsolineDefine() {
        return `#define SHOW_ISOLINE ${this.showIsoline ? 1 : 0}`;
    }
    get totalShaderArray() {
        return [
            this.shaderIsolineDefine,
            this.shaderSDFUtils,
            this.utilFunction,
            this.shaderGroupFunctionsReverse,
            this.shaderMapFunction,
            this.shaderRaycast,
            this.shaderNormal,
            this.shaderMaterial,
            this.shaderLighting,
            this.shaderRender,
            this.shaderGetSceneColor,
            this.shaderMainImage,
        ];
    }
    get fragmentShader() {
        return joinLine(this.totalShaderArray);
    }
}
export { Marcher };
