export interface SDFConfig {
    sdfVarName: string;
    materialId: string;
}
declare class PrimitiveSDF {
    sdfVarName: string;
    materialId: string;
    isVisible: boolean;
    translateXValue: number;
    translateYValue: number;
    translateZValue: number;
    rotateXValue: number;
    rotateYValue: number;
    rotateZValue: number;
    scaleXValue: number;
    scaleYValue: number;
    scaleZValue: number;
    operationsBefore: string[];
    operationsAfter: string[];
    operationsHalf: string[];
    operationsSym: string[];
    constructor(config?: Partial<SDFConfig>);
    get pointVarName(): string;
    get pointShader(): string;
    get shader(): string;
    get addExisting(): string;
    get totalShader(): string;
    get scaleVector(): string;
    get scaleValue(): number;
    show(): this;
    hide(): this;
    get positionVector(): string;
    get positionShader(): string;
    translate(x?: number, y?: number, z?: number): this;
    translateX(value?: number): this;
    translateY(value?: number): this;
    translateZ(value?: number): this;
    get rotationVector(): string;
    get rotationShader(): string;
    rotate(x?: number, y?: number, z?: number, useDeg2rad?: boolean): this;
    rotateX(value?: number): this;
    rotateY(value?: number): this;
    rotateZ(value?: number): this;
    scale(x?: number, y?: number, z?: number): this;
    scaleX(value?: number): this;
    scaleY(value?: number): this;
    scaleZ(value?: number): this;
    get operationsBeforeShader(): string;
    get operationsAfterShader(): string;
    get operationsHalfShader(): string;
    get operationsSymShader(): string;
    removeOperation(name: string): void;
    elongate(x?: number, y?: number, z?: number): this;
    elongateX(value?: number): this;
    elongateY(value?: number): this;
    elongateZ(value?: number): this;
    round(value?: number): this;
    onion(value?: number): this;
    shell(value?: number): this;
    union(sdf: PrimitiveSDF): this;
    intersect(sdf: PrimitiveSDF): this;
    subtract(sdf: PrimitiveSDF): this;
    smoothUnion(sdf: PrimitiveSDF, value?: number): this;
    smoothIntersect(sdf: PrimitiveSDF, value?: number): this;
    smoothSubtract(sdf: PrimitiveSDF, value?: number): this;
    sym(axis?: string): this;
    symX(): this;
    symY(): this;
    symZ(): this;
    rep(x?: number, y?: number, z?: number): this;
    repLim(s?: number, x1?: number, y1?: number, z1?: number, x2?: number, y2?: number, z2?: number): this;
    twist(value?: number): this;
    cheapBend(value?: number): this;
    half(axis?: string): this;
    halfX(): this;
    halfY(): this;
    halfZ(): this;
}
export { PrimitiveSDF };
